
99.WASHING_MACHINE_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b064  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800b214  0800b214  0001b214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b0  0800b4b0  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b0  0800b4b0  0001b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4b8  0800b4b8  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4bc  0800b4bc  0001b4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800b4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00000acc  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c9c  20000c9c  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e287  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c93  00000000  00000000  0003e487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  00042120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a8  00000000  00000000  00043948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ca5  00000000  00000000  00044ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e434  00000000  00000000  00049c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed697  00000000  00000000  000680c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155760  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070c8  00000000  00000000  001557b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b1fc 	.word	0x0800b1fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	0800b1fc 	.word	0x0800b1fc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <mode_select>:

int btn4_press=0;


void mode_select(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8a:	489c      	ldr	r0, [pc, #624]	; (8000ffc <mode_select+0x27c>)
 8000d8c:	f001 fba2 	bl	80024d4 <get_button>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d139      	bne.n	8000e0a <mode_select+0x8a>
	{
		lcd_command(CLEAR_DISPLAY);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f001 fcfe 	bl	8002798 <lcd_command>

		lcd_display_mode_num++;
 8000d9c:	4b98      	ldr	r3, [pc, #608]	; (8001000 <mode_select+0x280>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b96      	ldr	r3, [pc, #600]	; (8001000 <mode_select+0x280>)
 8000da6:	701a      	strb	r2, [r3, #0]
		lcd_display_mode_num %= 2;
 8000da8:	4b95      	ldr	r3, [pc, #596]	; (8001000 <mode_select+0x280>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b93      	ldr	r3, [pc, #588]	; (8001000 <mode_select+0x280>)
 8000db4:	701a      	strb	r2, [r3, #0]

		if(lcd_display_mode_num == 1)
 8000db6:	4b92      	ldr	r3, [pc, #584]	; (8001000 <mode_select+0x280>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d110      	bne.n	8000de0 <mode_select+0x60>
		{
			lcd_command(CLEAR_DISPLAY);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f001 fcea 	bl	8002798 <lcd_command>

			move_cursor(0, 0);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f001 fd7c 	bl	80028c4 <move_cursor>
			lcd_string(" MODE SELECT");
 8000dcc:	488d      	ldr	r0, [pc, #564]	; (8001004 <mode_select+0x284>)
 8000dce:	f001 fd64 	bl	800289a <lcd_string>
			move_cursor(1, 0);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f001 fd75 	bl	80028c4 <move_cursor>
			lcd_string("1wash2power3time");
 8000dda:	488b      	ldr	r0, [pc, #556]	; (8001008 <mode_select+0x288>)
 8000ddc:	f001 fd5d 	bl	800289a <lcd_string>
		}

		if(lcd_display_mode_num == 0)
 8000de0:	4b87      	ldr	r3, [pc, #540]	; (8001000 <mode_select+0x280>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d110      	bne.n	8000e0a <mode_select+0x8a>
		{
			lcd_command(CLEAR_DISPLAY);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f001 fcd5 	bl	8002798 <lcd_command>

			move_cursor(0, 0);
 8000dee:	2100      	movs	r1, #0
 8000df0:	2000      	movs	r0, #0
 8000df2:	f001 fd67 	bl	80028c4 <move_cursor>
			lcd_string(" RESTING");
 8000df6:	4885      	ldr	r0, [pc, #532]	; (800100c <mode_select+0x28c>)
 8000df8:	f001 fd4f 	bl	800289a <lcd_string>
			move_cursor(1, 0);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f001 fd60 	bl	80028c4 <move_cursor>
			lcd_string("PRESS BUTTON0");
 8000e04:	4882      	ldr	r0, [pc, #520]	; (8001010 <mode_select+0x290>)
 8000e06:	f001 fd48 	bl	800289a <lcd_string>
		}
	}

	if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e10:	487a      	ldr	r0, [pc, #488]	; (8000ffc <mode_select+0x27c>)
 8000e12:	f001 fb5f 	bl	80024d4 <get_button>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d132      	bne.n	8000e82 <mode_select+0x102>
	{
		lcd_command(CLEAR_DISPLAY);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f001 fcbb 	bl	8002798 <lcd_command>
		move_cursor(0, 0);
 8000e22:	2100      	movs	r1, #0
 8000e24:	2000      	movs	r0, #0
 8000e26:	f001 fd4d 	bl	80028c4 <move_cursor>
		lcd_string("  WASH or DRY");
 8000e2a:	487a      	ldr	r0, [pc, #488]	; (8001014 <mode_select+0x294>)
 8000e2c:	f001 fd35 	bl	800289a <lcd_string>

		wash_dry_sel++;
 8000e30:	4b79      	ldr	r3, [pc, #484]	; (8001018 <mode_select+0x298>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b77      	ldr	r3, [pc, #476]	; (8001018 <mode_select+0x298>)
 8000e3a:	701a      	strb	r2, [r3, #0]
		wash_dry_sel %= 2;
 8000e3c:	4b76      	ldr	r3, [pc, #472]	; (8001018 <mode_select+0x298>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b74      	ldr	r3, [pc, #464]	; (8001018 <mode_select+0x298>)
 8000e48:	701a      	strb	r2, [r3, #0]

		if (wash_dry_sel == 1)
 8000e4a:	4b73      	ldr	r3, [pc, #460]	; (8001018 <mode_select+0x298>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d109      	bne.n	8000e66 <mode_select+0xe6>
		{
			move_cursor(1, 0);
 8000e52:	2100      	movs	r1, #0
 8000e54:	2001      	movs	r0, #1
 8000e56:	f001 fd35 	bl	80028c4 <move_cursor>
			lcd_string("1.WASH");  // 정3역2정3역2
 8000e5a:	4870      	ldr	r0, [pc, #448]	; (800101c <mode_select+0x29c>)
 8000e5c:	f001 fd1d 	bl	800289a <lcd_string>
			wash_dry_num = 1;
 8000e60:	4b6f      	ldr	r3, [pc, #444]	; (8001020 <mode_select+0x2a0>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
		}

		if (wash_dry_sel == 0)
 8000e66:	4b6c      	ldr	r3, [pc, #432]	; (8001018 <mode_select+0x298>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d109      	bne.n	8000e82 <mode_select+0x102>
		{
			move_cursor(1, 0);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2001      	movs	r0, #1
 8000e72:	f001 fd27 	bl	80028c4 <move_cursor>
			lcd_string("2.DRY");  // 정2역3정2역3
 8000e76:	486b      	ldr	r0, [pc, #428]	; (8001024 <mode_select+0x2a4>)
 8000e78:	f001 fd0f 	bl	800289a <lcd_string>
			wash_dry_num = 0;
 8000e7c:	4b68      	ldr	r3, [pc, #416]	; (8001020 <mode_select+0x2a0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
		}
	}

	if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8000e82:	2202      	movs	r2, #2
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	485c      	ldr	r0, [pc, #368]	; (8000ffc <mode_select+0x27c>)
 8000e8a:	f001 fb23 	bl	80024d4 <get_button>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d146      	bne.n	8000f22 <mode_select+0x1a2>
	{
		lcd_command(CLEAR_DISPLAY);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f001 fc7f 	bl	8002798 <lcd_command>
		move_cursor(0, 0);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f001 fd11 	bl	80028c4 <move_cursor>
		lcd_string("  POWER SELECT");
 8000ea2:	4861      	ldr	r0, [pc, #388]	; (8001028 <mode_select+0x2a8>)
 8000ea4:	f001 fcf9 	bl	800289a <lcd_string>

		power_sel++;
 8000ea8:	4b60      	ldr	r3, [pc, #384]	; (800102c <mode_select+0x2ac>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <mode_select+0x2ac>)
 8000eb2:	701a      	strb	r2, [r3, #0]
		power_sel %= 3;
 8000eb4:	4b5d      	ldr	r3, [pc, #372]	; (800102c <mode_select+0x2ac>)
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <mode_select+0x2b0>)
 8000eba:	fba3 1302 	umull	r1, r3, r3, r2
 8000ebe:	0859      	lsrs	r1, r3, #1
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	440b      	add	r3, r1
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b58      	ldr	r3, [pc, #352]	; (800102c <mode_select+0x2ac>)
 8000ecc:	701a      	strb	r2, [r3, #0]

		if (power_sel == 1)
 8000ece:	4b57      	ldr	r3, [pc, #348]	; (800102c <mode_select+0x2ac>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d109      	bne.n	8000eea <mode_select+0x16a>
		{
			move_cursor(1, 0);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f001 fcf3 	bl	80028c4 <move_cursor>
			lcd_string("level : 1");
 8000ede:	4855      	ldr	r0, [pc, #340]	; (8001034 <mode_select+0x2b4>)
 8000ee0:	f001 fcdb 	bl	800289a <lcd_string>

			power_level = 40;
 8000ee4:	4b54      	ldr	r3, [pc, #336]	; (8001038 <mode_select+0x2b8>)
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	601a      	str	r2, [r3, #0]

		}

		if (power_sel == 2)
 8000eea:	4b50      	ldr	r3, [pc, #320]	; (800102c <mode_select+0x2ac>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d109      	bne.n	8000f06 <mode_select+0x186>
		{
			move_cursor(1, 0);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fce5 	bl	80028c4 <move_cursor>
			lcd_string("level : 2");
 8000efa:	4850      	ldr	r0, [pc, #320]	; (800103c <mode_select+0x2bc>)
 8000efc:	f001 fccd 	bl	800289a <lcd_string>

			power_level = 70;
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <mode_select+0x2b8>)
 8000f02:	2246      	movs	r2, #70	; 0x46
 8000f04:	601a      	str	r2, [r3, #0]
		}

		if (power_sel == 0)
 8000f06:	4b49      	ldr	r3, [pc, #292]	; (800102c <mode_select+0x2ac>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d109      	bne.n	8000f22 <mode_select+0x1a2>
		{
			move_cursor(1, 0);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f001 fcd7 	bl	80028c4 <move_cursor>
			lcd_string("level : 3");
 8000f16:	484a      	ldr	r0, [pc, #296]	; (8001040 <mode_select+0x2c0>)
 8000f18:	f001 fcbf 	bl	800289a <lcd_string>

			power_level = 100;
 8000f1c:	4b46      	ldr	r3, [pc, #280]	; (8001038 <mode_select+0x2b8>)
 8000f1e:	2264      	movs	r2, #100	; 0x64
 8000f20:	601a      	str	r2, [r3, #0]
		}
	}

	if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8000f22:	2203      	movs	r2, #3
 8000f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f28:	4834      	ldr	r0, [pc, #208]	; (8000ffc <mode_select+0x27c>)
 8000f2a:	f001 fad3 	bl	80024d4 <get_button>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d146      	bne.n	8000fc2 <mode_select+0x242>
	{
		lcd_command(CLEAR_DISPLAY);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f001 fc2f 	bl	8002798 <lcd_command>

		move_cursor(0, 0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f001 fcc1 	bl	80028c4 <move_cursor>
		lcd_string("  TIME SELECT");
 8000f42:	4840      	ldr	r0, [pc, #256]	; (8001044 <mode_select+0x2c4>)
 8000f44:	f001 fca9 	bl	800289a <lcd_string>

		time_sel++;
 8000f48:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <mode_select+0x2c8>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <mode_select+0x2c8>)
 8000f52:	701a      	strb	r2, [r3, #0]
		time_sel %= 3;
 8000f54:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <mode_select+0x2c8>)
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <mode_select+0x2b0>)
 8000f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f5e:	0859      	lsrs	r1, r3, #1
 8000f60:	460b      	mov	r3, r1
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	440b      	add	r3, r1
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <mode_select+0x2c8>)
 8000f6c:	701a      	strb	r2, [r3, #0]

		if (time_sel == 1)
 8000f6e:	4b36      	ldr	r3, [pc, #216]	; (8001048 <mode_select+0x2c8>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d109      	bne.n	8000f8a <mode_select+0x20a>
		{
			move_cursor(1, 0);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f001 fca3 	bl	80028c4 <move_cursor>
			lcd_string("TIME : 5sec");
 8000f7e:	4833      	ldr	r0, [pc, #204]	; (800104c <mode_select+0x2cc>)
 8000f80:	f001 fc8b 	bl	800289a <lcd_string>
			time_num=5;
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <mode_select+0x2d0>)
 8000f86:	2205      	movs	r2, #5
 8000f88:	701a      	strb	r2, [r3, #0]
		}

		if (time_sel == 2)
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <mode_select+0x2c8>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d109      	bne.n	8000fa6 <mode_select+0x226>
		{
			move_cursor(1, 0);
 8000f92:	2100      	movs	r1, #0
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 fc95 	bl	80028c4 <move_cursor>
			lcd_string("TIME : 10sec");
 8000f9a:	482e      	ldr	r0, [pc, #184]	; (8001054 <mode_select+0x2d4>)
 8000f9c:	f001 fc7d 	bl	800289a <lcd_string>
			time_num = 10;
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <mode_select+0x2d0>)
 8000fa2:	220a      	movs	r2, #10
 8000fa4:	701a      	strb	r2, [r3, #0]
		}

		if (time_sel == 0)
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <mode_select+0x2c8>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <mode_select+0x242>
		{
			move_cursor(1, 0);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f001 fc87 	bl	80028c4 <move_cursor>
			lcd_string("TIME : 20sec");
 8000fb6:	4828      	ldr	r0, [pc, #160]	; (8001058 <mode_select+0x2d8>)
 8000fb8:	f001 fc6f 	bl	800289a <lcd_string>
			time_num = 20;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <mode_select+0x2d0>)
 8000fbe:	2214      	movs	r2, #20
 8000fc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (get_button(GPIOC, GPIO_PIN_13, 4) == BUTTON_PRESS)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	4824      	ldr	r0, [pc, #144]	; (800105c <mode_select+0x2dc>)
 8000fca:	f001 fa83 	bl	80024d4 <get_button>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <mode_select+0x26c>
	{
		btn4_press = 1;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <mode_select+0x2e0>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
		btn4_press %= 2;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <mode_select+0x2e0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	bfb8      	it	lt
 8000fe6:	425b      	neglt	r3, r3
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <mode_select+0x2e0>)
 8000fea:	6013      	str	r3, [r2, #0]
	}

	if (btn4_press==1)
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <mode_select+0x2e0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <mode_select+0x278>
	{
		operator_start();
 8000ff4:	f000 f836 	bl	8001064 <operator_start>
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	200001ec 	.word	0x200001ec
 8001004:	0800b214 	.word	0x0800b214
 8001008:	0800b224 	.word	0x0800b224
 800100c:	0800b238 	.word	0x0800b238
 8001010:	0800b244 	.word	0x0800b244
 8001014:	0800b254 	.word	0x0800b254
 8001018:	200001ed 	.word	0x200001ed
 800101c:	0800b264 	.word	0x0800b264
 8001020:	200001f4 	.word	0x200001f4
 8001024:	0800b26c 	.word	0x0800b26c
 8001028:	0800b274 	.word	0x0800b274
 800102c:	200001ee 	.word	0x200001ee
 8001030:	aaaaaaab 	.word	0xaaaaaaab
 8001034:	0800b284 	.word	0x0800b284
 8001038:	200001f8 	.word	0x200001f8
 800103c:	0800b290 	.word	0x0800b290
 8001040:	0800b29c 	.word	0x0800b29c
 8001044:	0800b2a8 	.word	0x0800b2a8
 8001048:	200001ef 	.word	0x200001ef
 800104c:	0800b2b8 	.word	0x0800b2b8
 8001050:	200001f0 	.word	0x200001f0
 8001054:	0800b2c4 	.word	0x0800b2c4
 8001058:	0800b2d4 	.word	0x0800b2d4
 800105c:	40020800 	.word	0x40020800
 8001060:	200001fc 	.word	0x200001fc

08001064 <operator_start>:

char time__num[4];


void operator_start(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	if (wash_dry_sel == 1)
 8001068:	4b76      	ldr	r3, [pc, #472]	; (8001244 <operator_start+0x1e0>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	f040 8343 	bne.w	80016f8 <operator_start+0x694>
	{
		if (power_sel == 1)
 8001072:	4b75      	ldr	r3, [pc, #468]	; (8001248 <operator_start+0x1e4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	f040 8197 	bne.w	80013aa <operator_start+0x346>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, power_level);
 800107c:	4b73      	ldr	r3, [pc, #460]	; (800124c <operator_start+0x1e8>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b73      	ldr	r3, [pc, #460]	; (8001250 <operator_start+0x1ec>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
			if (time_sel == 1)
 8001086:	4b73      	ldr	r3, [pc, #460]	; (8001254 <operator_start+0x1f0>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d178      	bne.n	8001180 <operator_start+0x11c>
			{
				if (!time_num)
 800108e:	4b72      	ldr	r3, [pc, #456]	; (8001258 <operator_start+0x1f4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f001 81b8 	beq.w	8002408 <operator_start+0x13a4>
					return;
				if (t1ms_counter % 50 == 0)
 8001098:	4b70      	ldr	r3, [pc, #448]	; (800125c <operator_start+0x1f8>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b70      	ldr	r3, [pc, #448]	; (8001260 <operator_start+0x1fc>)
 800109e:	fb83 1302 	smull	r1, r3, r3, r2
 80010a2:	1119      	asrs	r1, r3, #4
 80010a4:	17d3      	asrs	r3, r2, #31
 80010a6:	1acb      	subs	r3, r1, r3
 80010a8:	2132      	movs	r1, #50	; 0x32
 80010aa:	fb01 f303 	mul.w	r3, r1, r3
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <operator_start+0x58>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80010b4:	2104      	movs	r1, #4
 80010b6:	486b      	ldr	r0, [pc, #428]	; (8001264 <operator_start+0x200>)
 80010b8:	f003 ff59 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 80010bc:	4b67      	ldr	r3, [pc, #412]	; (800125c <operator_start+0x1f8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c4:	db5c      	blt.n	8001180 <operator_start+0x11c>
				{
					t1ms_counter = 0;
 80010c6:	4b65      	ldr	r3, [pc, #404]	; (800125c <operator_start+0x1f8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
					time_num--;
 80010cc:	4b62      	ldr	r3, [pc, #392]	; (8001258 <operator_start+0x1f4>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b60      	ldr	r3, [pc, #384]	; (8001258 <operator_start+0x1f4>)
 80010d6:	701a      	strb	r2, [r3, #0]
					k++;
 80010d8:	4b63      	ldr	r3, [pc, #396]	; (8001268 <operator_start+0x204>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b61      	ldr	r3, [pc, #388]	; (8001268 <operator_start+0x204>)
 80010e2:	701a      	strb	r2, [r3, #0]
					k%=2;
 80010e4:	4b60      	ldr	r3, [pc, #384]	; (8001268 <operator_start+0x204>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <operator_start+0x204>)
 80010f0:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 80010f2:	4b59      	ldr	r3, [pc, #356]	; (8001258 <operator_start+0x1f4>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d128      	bne.n	800114c <operator_start+0xe8>
					{
						lcd_command(CLEAR_DISPLAY);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f001 fb4c 	bl	8002798 <lcd_command>
						time_num=0;
 8001100:	4b55      	ldr	r3, [pc, #340]	; (8001258 <operator_start+0x1f4>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001106:	2100      	movs	r1, #0
 8001108:	2001      	movs	r0, #1
 800110a:	f001 fbdb 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 800110e:	4b52      	ldr	r3, [pc, #328]	; (8001258 <operator_start+0x1f4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4955      	ldr	r1, [pc, #340]	; (800126c <operator_start+0x208>)
 8001116:	4856      	ldr	r0, [pc, #344]	; (8001270 <operator_start+0x20c>)
 8001118:	f008 ff1e 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 800111c:	4854      	ldr	r0, [pc, #336]	; (8001270 <operator_start+0x20c>)
 800111e:	f001 fbbc 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001122:	2100      	movs	r1, #0
 8001124:	484a      	ldr	r0, [pc, #296]	; (8001250 <operator_start+0x1ec>)
 8001126:	f005 ff85 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 800112a:	2100      	movs	r1, #0
 800112c:	2000      	movs	r0, #0
 800112e:	f001 fbc9 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8001132:	4850      	ldr	r0, [pc, #320]	; (8001274 <operator_start+0x210>)
 8001134:	f001 fbb1 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001138:	2100      	movs	r1, #0
 800113a:	2001      	movs	r0, #1
 800113c:	f001 fbc2 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 8001140:	484d      	ldr	r0, [pc, #308]	; (8001278 <operator_start+0x214>)
 8001142:	f001 fbaa 	bl	800289a <lcd_string>
						buzzer_main();
 8001146:	f001 fa09 	bl	800255c <buzzer_main>
 800114a:	e019      	b.n	8001180 <operator_start+0x11c>
					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 800114c:	2001      	movs	r0, #1
 800114e:	f001 fb23 	bl	8002798 <lcd_command>
						spin_motor();
 8001152:	f001 f995 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f001 fbb3 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 800115e:	4847      	ldr	r0, [pc, #284]	; (800127c <operator_start+0x218>)
 8001160:	f001 fb9b 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001164:	2100      	movs	r1, #0
 8001166:	2001      	movs	r0, #1
 8001168:	f001 fbac 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <operator_start+0x1f4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	493e      	ldr	r1, [pc, #248]	; (800126c <operator_start+0x208>)
 8001174:	483e      	ldr	r0, [pc, #248]	; (8001270 <operator_start+0x20c>)
 8001176:	f008 feef 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 800117a:	483d      	ldr	r0, [pc, #244]	; (8001270 <operator_start+0x20c>)
 800117c:	f001 fb8d 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 2)
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <operator_start+0x1f0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b02      	cmp	r3, #2
 8001186:	f040 8095 	bne.w	80012b4 <operator_start+0x250>
			{
				if (!time_num)
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <operator_start+0x1f4>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f001 813c 	beq.w	800240c <operator_start+0x13a8>
					return;
				if (t1ms_counter % 50 == 0)
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <operator_start+0x1f8>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <operator_start+0x1fc>)
 800119a:	fb83 1302 	smull	r1, r3, r3, r2
 800119e:	1119      	asrs	r1, r3, #4
 80011a0:	17d3      	asrs	r3, r2, #31
 80011a2:	1acb      	subs	r3, r1, r3
 80011a4:	2132      	movs	r1, #50	; 0x32
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <operator_start+0x154>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80011b0:	2104      	movs	r1, #4
 80011b2:	482c      	ldr	r0, [pc, #176]	; (8001264 <operator_start+0x200>)
 80011b4:	f003 fedb 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <operator_start+0x1f8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c0:	db78      	blt.n	80012b4 <operator_start+0x250>
				{
					t1ms_counter = 0;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <operator_start+0x1f8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
					time_num--;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <operator_start+0x1f4>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <operator_start+0x1f4>)
 80011d2:	701a      	strb	r2, [r3, #0]
					k++;
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <operator_start+0x204>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <operator_start+0x204>)
 80011de:	701a      	strb	r2, [r3, #0]
					k%=2;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <operator_start+0x204>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <operator_start+0x204>)
 80011ec:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <operator_start+0x1f4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d144      	bne.n	8001280 <operator_start+0x21c>
					{
						lcd_command(CLEAR_DISPLAY);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f001 face 	bl	8002798 <lcd_command>
						time_num=0;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <operator_start+0x1f4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001202:	2100      	movs	r1, #0
 8001204:	2001      	movs	r0, #1
 8001206:	f001 fb5d 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <operator_start+0x1f4>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4916      	ldr	r1, [pc, #88]	; (800126c <operator_start+0x208>)
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <operator_start+0x20c>)
 8001214:	f008 fea0 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001218:	4815      	ldr	r0, [pc, #84]	; (8001270 <operator_start+0x20c>)
 800121a:	f001 fb3e 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800121e:	2100      	movs	r1, #0
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <operator_start+0x1ec>)
 8001222:	f005 ff07 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8001226:	2100      	movs	r1, #0
 8001228:	2000      	movs	r0, #0
 800122a:	f001 fb4b 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <operator_start+0x210>)
 8001230:	f001 fb33 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001234:	2100      	movs	r1, #0
 8001236:	2001      	movs	r0, #1
 8001238:	f001 fb44 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <operator_start+0x214>)
 800123e:	f001 fb2c 	bl	800289a <lcd_string>
 8001242:	e037      	b.n	80012b4 <operator_start+0x250>
 8001244:	200001ed 	.word	0x200001ed
 8001248:	200001ee 	.word	0x200001ee
 800124c:	200001f8 	.word	0x200001f8
 8001250:	20000540 	.word	0x20000540
 8001254:	200001ef 	.word	0x200001ef
 8001258:	200001f0 	.word	0x200001f0
 800125c:	20000c00 	.word	0x20000c00
 8001260:	51eb851f 	.word	0x51eb851f
 8001264:	40021000 	.word	0x40021000
 8001268:	200001f1 	.word	0x200001f1
 800126c:	0800b2e4 	.word	0x0800b2e4
 8001270:	20000200 	.word	0x20000200
 8001274:	0800b2ec 	.word	0x0800b2ec
 8001278:	0800b244 	.word	0x0800b244
 800127c:	0800b2f4 	.word	0x0800b2f4

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 fa89 	bl	8002798 <lcd_command>
						spin_motor();
 8001286:	f001 f8fb 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 800128a:	2100      	movs	r1, #0
 800128c:	2000      	movs	r0, #0
 800128e:	f001 fb19 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001292:	4877      	ldr	r0, [pc, #476]	; (8001470 <operator_start+0x40c>)
 8001294:	f001 fb01 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001298:	2100      	movs	r1, #0
 800129a:	2001      	movs	r0, #1
 800129c:	f001 fb12 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80012a0:	4b74      	ldr	r3, [pc, #464]	; (8001474 <operator_start+0x410>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4974      	ldr	r1, [pc, #464]	; (8001478 <operator_start+0x414>)
 80012a8:	4874      	ldr	r0, [pc, #464]	; (800147c <operator_start+0x418>)
 80012aa:	f008 fe55 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80012ae:	4873      	ldr	r0, [pc, #460]	; (800147c <operator_start+0x418>)
 80012b0:	f001 faf3 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 0)
 80012b4:	4b72      	ldr	r3, [pc, #456]	; (8001480 <operator_start+0x41c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d176      	bne.n	80013aa <operator_start+0x346>
			{
				if (!time_num)
 80012bc:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <operator_start+0x410>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f001 80a5 	beq.w	8002410 <operator_start+0x13ac>
					return;
				if (t1ms_counter % 50 == 0)
 80012c6:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <operator_start+0x420>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b6f      	ldr	r3, [pc, #444]	; (8001488 <operator_start+0x424>)
 80012cc:	fb83 1302 	smull	r1, r3, r3, r2
 80012d0:	1119      	asrs	r1, r3, #4
 80012d2:	17d3      	asrs	r3, r2, #31
 80012d4:	1acb      	subs	r3, r1, r3
 80012d6:	2132      	movs	r1, #50	; 0x32
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <operator_start+0x286>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80012e2:	2104      	movs	r1, #4
 80012e4:	4869      	ldr	r0, [pc, #420]	; (800148c <operator_start+0x428>)
 80012e6:	f003 fe42 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 80012ea:	4b66      	ldr	r3, [pc, #408]	; (8001484 <operator_start+0x420>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f2:	db5a      	blt.n	80013aa <operator_start+0x346>
				{
					t1ms_counter = 0;
 80012f4:	4b63      	ldr	r3, [pc, #396]	; (8001484 <operator_start+0x420>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
					time_num--;
 80012fa:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <operator_start+0x410>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	3b01      	subs	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <operator_start+0x410>)
 8001304:	701a      	strb	r2, [r3, #0]
					k++;
 8001306:	4b62      	ldr	r3, [pc, #392]	; (8001490 <operator_start+0x42c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b60      	ldr	r3, [pc, #384]	; (8001490 <operator_start+0x42c>)
 8001310:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001312:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <operator_start+0x42c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <operator_start+0x42c>)
 800131e:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001320:	4b54      	ldr	r3, [pc, #336]	; (8001474 <operator_start+0x410>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d126      	bne.n	8001376 <operator_start+0x312>
					{
						lcd_command(CLEAR_DISPLAY);
 8001328:	2001      	movs	r0, #1
 800132a:	f001 fa35 	bl	8002798 <lcd_command>
						time_num=0;
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <operator_start+0x410>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001334:	2100      	movs	r1, #0
 8001336:	2001      	movs	r0, #1
 8001338:	f001 fac4 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 800133c:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <operator_start+0x410>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	494d      	ldr	r1, [pc, #308]	; (8001478 <operator_start+0x414>)
 8001344:	484d      	ldr	r0, [pc, #308]	; (800147c <operator_start+0x418>)
 8001346:	f008 fe07 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 800134a:	484c      	ldr	r0, [pc, #304]	; (800147c <operator_start+0x418>)
 800134c:	f001 faa5 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001350:	2100      	movs	r1, #0
 8001352:	4850      	ldr	r0, [pc, #320]	; (8001494 <operator_start+0x430>)
 8001354:	f005 fe6e 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8001358:	2100      	movs	r1, #0
 800135a:	2000      	movs	r0, #0
 800135c:	f001 fab2 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8001360:	484d      	ldr	r0, [pc, #308]	; (8001498 <operator_start+0x434>)
 8001362:	f001 fa9a 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001366:	2100      	movs	r1, #0
 8001368:	2001      	movs	r0, #1
 800136a:	f001 faab 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 800136e:	484b      	ldr	r0, [pc, #300]	; (800149c <operator_start+0x438>)
 8001370:	f001 fa93 	bl	800289a <lcd_string>
 8001374:	e019      	b.n	80013aa <operator_start+0x346>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 8001376:	2001      	movs	r0, #1
 8001378:	f001 fa0e 	bl	8002798 <lcd_command>
						spin_motor();
 800137c:	f001 f880 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 8001380:	2100      	movs	r1, #0
 8001382:	2000      	movs	r0, #0
 8001384:	f001 fa9e 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001388:	4839      	ldr	r0, [pc, #228]	; (8001470 <operator_start+0x40c>)
 800138a:	f001 fa86 	bl	800289a <lcd_string>
						move_cursor(1,0);
 800138e:	2100      	movs	r1, #0
 8001390:	2001      	movs	r0, #1
 8001392:	f001 fa97 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <operator_start+0x410>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	4936      	ldr	r1, [pc, #216]	; (8001478 <operator_start+0x414>)
 800139e:	4837      	ldr	r0, [pc, #220]	; (800147c <operator_start+0x418>)
 80013a0:	f008 fdda 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80013a4:	4835      	ldr	r0, [pc, #212]	; (800147c <operator_start+0x418>)
 80013a6:	f001 fa78 	bl	800289a <lcd_string>
					}
				}
			}
		}

		if (power_sel == 2)
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <operator_start+0x43c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	f040 8092 	bne.w	80014d8 <operator_start+0x474>
		{
			if (!time_num)
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <operator_start+0x410>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f001 802b 	beq.w	8002414 <operator_start+0x13b0>
				return;
			if (t1ms_counter % 50 == 0)
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <operator_start+0x420>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b31      	ldr	r3, [pc, #196]	; (8001488 <operator_start+0x424>)
 80013c4:	fb83 1302 	smull	r1, r3, r3, r2
 80013c8:	1119      	asrs	r1, r3, #4
 80013ca:	17d3      	asrs	r3, r2, #31
 80013cc:	1acb      	subs	r3, r1, r3
 80013ce:	2132      	movs	r1, #50	; 0x32
 80013d0:	fb01 f303 	mul.w	r3, r1, r3
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <operator_start+0x37e>
			{
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80013da:	2104      	movs	r1, #4
 80013dc:	482b      	ldr	r0, [pc, #172]	; (800148c <operator_start+0x428>)
 80013de:	f003 fdc6 	bl	8004f6e <HAL_GPIO_TogglePin>
			}
			if (t1ms_counter >= 1000)
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <operator_start+0x420>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ea:	db75      	blt.n	80014d8 <operator_start+0x474>
			{
				t1ms_counter = 0;
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <operator_start+0x420>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
				time_num--;
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <operator_start+0x410>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <operator_start+0x410>)
 80013fc:	701a      	strb	r2, [r3, #0]
				k++;
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <operator_start+0x42c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <operator_start+0x42c>)
 8001408:	701a      	strb	r2, [r3, #0]
				k%=2;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <operator_start+0x42c>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <operator_start+0x42c>)
 8001416:	701a      	strb	r2, [r3, #0]

				if(time_num <= 0)
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <operator_start+0x410>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d141      	bne.n	80014a4 <operator_start+0x440>
				{
					lcd_command(CLEAR_DISPLAY);
 8001420:	2001      	movs	r0, #1
 8001422:	f001 f9b9 	bl	8002798 <lcd_command>
					time_num=0;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <operator_start+0x410>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

					move_cursor(1,0);
 800142c:	2100      	movs	r1, #0
 800142e:	2001      	movs	r0, #1
 8001430:	f001 fa48 	bl	80028c4 <move_cursor>
					sprintf(time__num, "%02d", time_num);
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <operator_start+0x410>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	490f      	ldr	r1, [pc, #60]	; (8001478 <operator_start+0x414>)
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <operator_start+0x418>)
 800143e:	f008 fd8b 	bl	8009f58 <siprintf>
					lcd_string(time__num);
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <operator_start+0x418>)
 8001444:	f001 fa29 	bl	800289a <lcd_string>

					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001448:	2100      	movs	r1, #0
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <operator_start+0x430>)
 800144c:	f005 fdf2 	bl	8007034 <HAL_TIM_PWM_Stop>
					move_cursor(0,0);
 8001450:	2100      	movs	r1, #0
 8001452:	2000      	movs	r0, #0
 8001454:	f001 fa36 	bl	80028c4 <move_cursor>
					lcd_string("clear!!");
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <operator_start+0x434>)
 800145a:	f001 fa1e 	bl	800289a <lcd_string>
					move_cursor(1,0);
 800145e:	2100      	movs	r1, #0
 8001460:	2001      	movs	r0, #1
 8001462:	f001 fa2f 	bl	80028c4 <move_cursor>
					lcd_string("PRESS BUTTON0");
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <operator_start+0x438>)
 8001468:	f001 fa17 	bl	800289a <lcd_string>
 800146c:	e034      	b.n	80014d8 <operator_start+0x474>
 800146e:	bf00      	nop
 8001470:	0800b2f4 	.word	0x0800b2f4
 8001474:	200001f0 	.word	0x200001f0
 8001478:	0800b2e4 	.word	0x0800b2e4
 800147c:	20000200 	.word	0x20000200
 8001480:	200001ef 	.word	0x200001ef
 8001484:	20000c00 	.word	0x20000c00
 8001488:	51eb851f 	.word	0x51eb851f
 800148c:	40021000 	.word	0x40021000
 8001490:	200001f1 	.word	0x200001f1
 8001494:	20000540 	.word	0x20000540
 8001498:	0800b2ec 	.word	0x0800b2ec
 800149c:	0800b244 	.word	0x0800b244
 80014a0:	200001ee 	.word	0x200001ee

				}

				else
				{
					lcd_command(CLEAR_DISPLAY);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 f977 	bl	8002798 <lcd_command>
					spin_motor();
 80014aa:	f000 ffe9 	bl	8002480 <spin_motor>
					move_cursor(0,0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 fa07 	bl	80028c4 <move_cursor>
					lcd_string("  washing!!");
 80014b6:	4877      	ldr	r0, [pc, #476]	; (8001694 <operator_start+0x630>)
 80014b8:	f001 f9ef 	bl	800289a <lcd_string>
					move_cursor(1,0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2001      	movs	r0, #1
 80014c0:	f001 fa00 	bl	80028c4 <move_cursor>
					sprintf(time__num, "%02d", time_num);
 80014c4:	4b74      	ldr	r3, [pc, #464]	; (8001698 <operator_start+0x634>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4974      	ldr	r1, [pc, #464]	; (800169c <operator_start+0x638>)
 80014cc:	4874      	ldr	r0, [pc, #464]	; (80016a0 <operator_start+0x63c>)
 80014ce:	f008 fd43 	bl	8009f58 <siprintf>
					lcd_string(time__num);
 80014d2:	4873      	ldr	r0, [pc, #460]	; (80016a0 <operator_start+0x63c>)
 80014d4:	f001 f9e1 	bl	800289a <lcd_string>
				}
			}
		}

			if (time_sel == 2)
 80014d8:	4b72      	ldr	r3, [pc, #456]	; (80016a4 <operator_start+0x640>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d176      	bne.n	80015ce <operator_start+0x56a>
			{
				if (!time_num)
 80014e0:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <operator_start+0x634>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8797 	beq.w	8002418 <operator_start+0x13b4>
					return;
				if (t1ms_counter % 50 == 0)
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <operator_start+0x644>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <operator_start+0x648>)
 80014f0:	fb83 1302 	smull	r1, r3, r3, r2
 80014f4:	1119      	asrs	r1, r3, #4
 80014f6:	17d3      	asrs	r3, r2, #31
 80014f8:	1acb      	subs	r3, r1, r3
 80014fa:	2132      	movs	r1, #50	; 0x32
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <operator_start+0x4aa>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8001506:	2104      	movs	r1, #4
 8001508:	4869      	ldr	r0, [pc, #420]	; (80016b0 <operator_start+0x64c>)
 800150a:	f003 fd30 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 800150e:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <operator_start+0x644>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001516:	db5a      	blt.n	80015ce <operator_start+0x56a>
				{
					t1ms_counter = 0;
 8001518:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <operator_start+0x644>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
					time_num--;
 800151e:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <operator_start+0x634>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3b01      	subs	r3, #1
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <operator_start+0x634>)
 8001528:	701a      	strb	r2, [r3, #0]
					k++;
 800152a:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <operator_start+0x650>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b60      	ldr	r3, [pc, #384]	; (80016b4 <operator_start+0x650>)
 8001534:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <operator_start+0x650>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <operator_start+0x650>)
 8001542:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001544:	4b54      	ldr	r3, [pc, #336]	; (8001698 <operator_start+0x634>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d126      	bne.n	800159a <operator_start+0x536>
					{
						lcd_command(CLEAR_DISPLAY);
 800154c:	2001      	movs	r0, #1
 800154e:	f001 f923 	bl	8002798 <lcd_command>
						time_num=0;
 8001552:	4b51      	ldr	r3, [pc, #324]	; (8001698 <operator_start+0x634>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001558:	2100      	movs	r1, #0
 800155a:	2001      	movs	r0, #1
 800155c:	f001 f9b2 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <operator_start+0x634>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	494d      	ldr	r1, [pc, #308]	; (800169c <operator_start+0x638>)
 8001568:	484d      	ldr	r0, [pc, #308]	; (80016a0 <operator_start+0x63c>)
 800156a:	f008 fcf5 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 800156e:	484c      	ldr	r0, [pc, #304]	; (80016a0 <operator_start+0x63c>)
 8001570:	f001 f993 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001574:	2100      	movs	r1, #0
 8001576:	4850      	ldr	r0, [pc, #320]	; (80016b8 <operator_start+0x654>)
 8001578:	f005 fd5c 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 800157c:	2100      	movs	r1, #0
 800157e:	2000      	movs	r0, #0
 8001580:	f001 f9a0 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8001584:	484d      	ldr	r0, [pc, #308]	; (80016bc <operator_start+0x658>)
 8001586:	f001 f988 	bl	800289a <lcd_string>
						move_cursor(1,0);
 800158a:	2100      	movs	r1, #0
 800158c:	2001      	movs	r0, #1
 800158e:	f001 f999 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 8001592:	484b      	ldr	r0, [pc, #300]	; (80016c0 <operator_start+0x65c>)
 8001594:	f001 f981 	bl	800289a <lcd_string>
 8001598:	e019      	b.n	80015ce <operator_start+0x56a>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 800159a:	2001      	movs	r0, #1
 800159c:	f001 f8fc 	bl	8002798 <lcd_command>
						spin_motor();
 80015a0:	f000 ff6e 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 80015a4:	2100      	movs	r1, #0
 80015a6:	2000      	movs	r0, #0
 80015a8:	f001 f98c 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 80015ac:	4839      	ldr	r0, [pc, #228]	; (8001694 <operator_start+0x630>)
 80015ae:	f001 f974 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80015b2:	2100      	movs	r1, #0
 80015b4:	2001      	movs	r0, #1
 80015b6:	f001 f985 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <operator_start+0x634>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4936      	ldr	r1, [pc, #216]	; (800169c <operator_start+0x638>)
 80015c2:	4837      	ldr	r0, [pc, #220]	; (80016a0 <operator_start+0x63c>)
 80015c4:	f008 fcc8 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80015c8:	4835      	ldr	r0, [pc, #212]	; (80016a0 <operator_start+0x63c>)
 80015ca:	f001 f966 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 0)
 80015ce:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <operator_start+0x640>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 8090 	bne.w	80016f8 <operator_start+0x694>
			{
				if (!time_num)
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <operator_start+0x634>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 871d 	beq.w	800241c <operator_start+0x13b8>
					return;
				if (t1ms_counter % 50 == 0)
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <operator_start+0x644>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <operator_start+0x648>)
 80015e8:	fb83 1302 	smull	r1, r3, r3, r2
 80015ec:	1119      	asrs	r1, r3, #4
 80015ee:	17d3      	asrs	r3, r2, #31
 80015f0:	1acb      	subs	r3, r1, r3
 80015f2:	2132      	movs	r1, #50	; 0x32
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d103      	bne.n	8001606 <operator_start+0x5a2>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80015fe:	2104      	movs	r1, #4
 8001600:	482b      	ldr	r0, [pc, #172]	; (80016b0 <operator_start+0x64c>)
 8001602:	f003 fcb4 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <operator_start+0x644>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800160e:	db73      	blt.n	80016f8 <operator_start+0x694>
				{
					t1ms_counter = 0;
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <operator_start+0x644>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
					time_num--;
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <operator_start+0x634>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3b01      	subs	r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <operator_start+0x634>)
 8001620:	701a      	strb	r2, [r3, #0]
					k++;
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <operator_start+0x650>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <operator_start+0x650>)
 800162c:	701a      	strb	r2, [r3, #0]
					k%=2;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <operator_start+0x650>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <operator_start+0x650>)
 800163a:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <operator_start+0x634>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d13f      	bne.n	80016c4 <operator_start+0x660>
					{
						lcd_command(CLEAR_DISPLAY);
 8001644:	2001      	movs	r0, #1
 8001646:	f001 f8a7 	bl	8002798 <lcd_command>
						time_num=0;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <operator_start+0x634>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001650:	2100      	movs	r1, #0
 8001652:	2001      	movs	r0, #1
 8001654:	f001 f936 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <operator_start+0x634>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	490f      	ldr	r1, [pc, #60]	; (800169c <operator_start+0x638>)
 8001660:	480f      	ldr	r0, [pc, #60]	; (80016a0 <operator_start+0x63c>)
 8001662:	f008 fc79 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001666:	480e      	ldr	r0, [pc, #56]	; (80016a0 <operator_start+0x63c>)
 8001668:	f001 f917 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800166c:	2100      	movs	r1, #0
 800166e:	4812      	ldr	r0, [pc, #72]	; (80016b8 <operator_start+0x654>)
 8001670:	f005 fce0 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8001674:	2100      	movs	r1, #0
 8001676:	2000      	movs	r0, #0
 8001678:	f001 f924 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <operator_start+0x658>)
 800167e:	f001 f90c 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001682:	2100      	movs	r1, #0
 8001684:	2001      	movs	r0, #1
 8001686:	f001 f91d 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <operator_start+0x65c>)
 800168c:	f001 f905 	bl	800289a <lcd_string>
 8001690:	e032      	b.n	80016f8 <operator_start+0x694>
 8001692:	bf00      	nop
 8001694:	0800b2f4 	.word	0x0800b2f4
 8001698:	200001f0 	.word	0x200001f0
 800169c:	0800b2e4 	.word	0x0800b2e4
 80016a0:	20000200 	.word	0x20000200
 80016a4:	200001ef 	.word	0x200001ef
 80016a8:	20000c00 	.word	0x20000c00
 80016ac:	51eb851f 	.word	0x51eb851f
 80016b0:	40021000 	.word	0x40021000
 80016b4:	200001f1 	.word	0x200001f1
 80016b8:	20000540 	.word	0x20000540
 80016bc:	0800b2ec 	.word	0x0800b2ec
 80016c0:	0800b244 	.word	0x0800b244

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f001 f867 	bl	8002798 <lcd_command>
						spin_motor();
 80016ca:	f000 fed9 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f001 f8f7 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 80016d6:	487c      	ldr	r0, [pc, #496]	; (80018c8 <operator_start+0x864>)
 80016d8:	f001 f8df 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80016dc:	2100      	movs	r1, #0
 80016de:	2001      	movs	r0, #1
 80016e0:	f001 f8f0 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80016e4:	4b79      	ldr	r3, [pc, #484]	; (80018cc <operator_start+0x868>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4979      	ldr	r1, [pc, #484]	; (80018d0 <operator_start+0x86c>)
 80016ec:	4879      	ldr	r0, [pc, #484]	; (80018d4 <operator_start+0x870>)
 80016ee:	f008 fc33 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80016f2:	4878      	ldr	r0, [pc, #480]	; (80018d4 <operator_start+0x870>)
 80016f4:	f001 f8d1 	bl	800289a <lcd_string>
					}
				}
			}
		}

		if (power_sel == 0)
 80016f8:	4b77      	ldr	r3, [pc, #476]	; (80018d8 <operator_start+0x874>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f040 8194 	bne.w	8001a2a <operator_start+0x9c6>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, power_level);
 8001702:	4b76      	ldr	r3, [pc, #472]	; (80018dc <operator_start+0x878>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <operator_start+0x87c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	635a      	str	r2, [r3, #52]	; 0x34

			if (time_sel == 1)
 800170c:	4b75      	ldr	r3, [pc, #468]	; (80018e4 <operator_start+0x880>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d176      	bne.n	8001802 <operator_start+0x79e>
			{
				if (!time_num)
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <operator_start+0x868>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8681 	beq.w	8002420 <operator_start+0x13bc>
					return;
				if (t1ms_counter % 50 == 0)
 800171e:	4b72      	ldr	r3, [pc, #456]	; (80018e8 <operator_start+0x884>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b72      	ldr	r3, [pc, #456]	; (80018ec <operator_start+0x888>)
 8001724:	fb83 1302 	smull	r1, r3, r3, r2
 8001728:	1119      	asrs	r1, r3, #4
 800172a:	17d3      	asrs	r3, r2, #31
 800172c:	1acb      	subs	r3, r1, r3
 800172e:	2132      	movs	r1, #50	; 0x32
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <operator_start+0x6de>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 800173a:	2104      	movs	r1, #4
 800173c:	486c      	ldr	r0, [pc, #432]	; (80018f0 <operator_start+0x88c>)
 800173e:	f003 fc16 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8001742:	4b69      	ldr	r3, [pc, #420]	; (80018e8 <operator_start+0x884>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800174a:	db5a      	blt.n	8001802 <operator_start+0x79e>
				{
					t1ms_counter = 0;
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <operator_start+0x884>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
					time_num--;
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <operator_start+0x868>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	3b01      	subs	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <operator_start+0x868>)
 800175c:	701a      	strb	r2, [r3, #0]
					k++;
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <operator_start+0x890>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <operator_start+0x890>)
 8001768:	701a      	strb	r2, [r3, #0]
					k%=2;
 800176a:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <operator_start+0x890>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <operator_start+0x890>)
 8001776:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001778:	4b54      	ldr	r3, [pc, #336]	; (80018cc <operator_start+0x868>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d126      	bne.n	80017ce <operator_start+0x76a>
					{
						lcd_command(CLEAR_DISPLAY);
 8001780:	2001      	movs	r0, #1
 8001782:	f001 f809 	bl	8002798 <lcd_command>
						time_num=0;
 8001786:	4b51      	ldr	r3, [pc, #324]	; (80018cc <operator_start+0x868>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 800178c:	2100      	movs	r1, #0
 800178e:	2001      	movs	r0, #1
 8001790:	f001 f898 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <operator_start+0x868>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	494d      	ldr	r1, [pc, #308]	; (80018d0 <operator_start+0x86c>)
 800179c:	484d      	ldr	r0, [pc, #308]	; (80018d4 <operator_start+0x870>)
 800179e:	f008 fbdb 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80017a2:	484c      	ldr	r0, [pc, #304]	; (80018d4 <operator_start+0x870>)
 80017a4:	f001 f879 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80017a8:	2100      	movs	r1, #0
 80017aa:	484d      	ldr	r0, [pc, #308]	; (80018e0 <operator_start+0x87c>)
 80017ac:	f005 fc42 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f001 f886 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 80017b8:	484f      	ldr	r0, [pc, #316]	; (80018f8 <operator_start+0x894>)
 80017ba:	f001 f86e 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80017be:	2100      	movs	r1, #0
 80017c0:	2001      	movs	r0, #1
 80017c2:	f001 f87f 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 80017c6:	484d      	ldr	r0, [pc, #308]	; (80018fc <operator_start+0x898>)
 80017c8:	f001 f867 	bl	800289a <lcd_string>
 80017cc:	e019      	b.n	8001802 <operator_start+0x79e>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f000 ffe2 	bl	8002798 <lcd_command>
						spin_motor();
 80017d4:	f000 fe54 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 80017d8:	2100      	movs	r1, #0
 80017da:	2000      	movs	r0, #0
 80017dc:	f001 f872 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 80017e0:	4839      	ldr	r0, [pc, #228]	; (80018c8 <operator_start+0x864>)
 80017e2:	f001 f85a 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80017e6:	2100      	movs	r1, #0
 80017e8:	2001      	movs	r0, #1
 80017ea:	f001 f86b 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <operator_start+0x868>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4936      	ldr	r1, [pc, #216]	; (80018d0 <operator_start+0x86c>)
 80017f6:	4837      	ldr	r0, [pc, #220]	; (80018d4 <operator_start+0x870>)
 80017f8:	f008 fbae 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80017fc:	4835      	ldr	r0, [pc, #212]	; (80018d4 <operator_start+0x870>)
 80017fe:	f001 f84c 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 2)
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <operator_start+0x880>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b02      	cmp	r3, #2
 8001808:	f040 8094 	bne.w	8001934 <operator_start+0x8d0>
			{
				if (!time_num)
 800180c:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <operator_start+0x868>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8607 	beq.w	8002424 <operator_start+0x13c0>
					return;
				if (t1ms_counter % 50 == 0)
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <operator_start+0x884>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <operator_start+0x888>)
 800181c:	fb83 1302 	smull	r1, r3, r3, r2
 8001820:	1119      	asrs	r1, r3, #4
 8001822:	17d3      	asrs	r3, r2, #31
 8001824:	1acb      	subs	r3, r1, r3
 8001826:	2132      	movs	r1, #50	; 0x32
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <operator_start+0x7d6>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8001832:	2104      	movs	r1, #4
 8001834:	482e      	ldr	r0, [pc, #184]	; (80018f0 <operator_start+0x88c>)
 8001836:	f003 fb9a 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <operator_start+0x884>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001842:	db77      	blt.n	8001934 <operator_start+0x8d0>
				{
					t1ms_counter = 0;
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <operator_start+0x884>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
					time_num--;
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <operator_start+0x868>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3b01      	subs	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <operator_start+0x868>)
 8001854:	701a      	strb	r2, [r3, #0]
					k++;
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <operator_start+0x890>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <operator_start+0x890>)
 8001860:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <operator_start+0x890>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <operator_start+0x890>)
 800186e:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <operator_start+0x868>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d143      	bne.n	8001900 <operator_start+0x89c>
					{
						lcd_command(CLEAR_DISPLAY);
 8001878:	2001      	movs	r0, #1
 800187a:	f000 ff8d 	bl	8002798 <lcd_command>
						time_num=0;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <operator_start+0x868>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001884:	2100      	movs	r1, #0
 8001886:	2001      	movs	r0, #1
 8001888:	f001 f81c 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <operator_start+0x868>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	490f      	ldr	r1, [pc, #60]	; (80018d0 <operator_start+0x86c>)
 8001894:	480f      	ldr	r0, [pc, #60]	; (80018d4 <operator_start+0x870>)
 8001896:	f008 fb5f 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 800189a:	480e      	ldr	r0, [pc, #56]	; (80018d4 <operator_start+0x870>)
 800189c:	f000 fffd 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80018a0:	2100      	movs	r1, #0
 80018a2:	480f      	ldr	r0, [pc, #60]	; (80018e0 <operator_start+0x87c>)
 80018a4:	f005 fbc6 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 80018a8:	2100      	movs	r1, #0
 80018aa:	2000      	movs	r0, #0
 80018ac:	f001 f80a 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 80018b0:	4811      	ldr	r0, [pc, #68]	; (80018f8 <operator_start+0x894>)
 80018b2:	f000 fff2 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80018b6:	2100      	movs	r1, #0
 80018b8:	2001      	movs	r0, #1
 80018ba:	f001 f803 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 80018be:	480f      	ldr	r0, [pc, #60]	; (80018fc <operator_start+0x898>)
 80018c0:	f000 ffeb 	bl	800289a <lcd_string>
 80018c4:	e036      	b.n	8001934 <operator_start+0x8d0>
 80018c6:	bf00      	nop
 80018c8:	0800b2f4 	.word	0x0800b2f4
 80018cc:	200001f0 	.word	0x200001f0
 80018d0:	0800b2e4 	.word	0x0800b2e4
 80018d4:	20000200 	.word	0x20000200
 80018d8:	200001ee 	.word	0x200001ee
 80018dc:	200001f8 	.word	0x200001f8
 80018e0:	20000540 	.word	0x20000540
 80018e4:	200001ef 	.word	0x200001ef
 80018e8:	20000c00 	.word	0x20000c00
 80018ec:	51eb851f 	.word	0x51eb851f
 80018f0:	40021000 	.word	0x40021000
 80018f4:	200001f1 	.word	0x200001f1
 80018f8:	0800b2ec 	.word	0x0800b2ec
 80018fc:	0800b244 	.word	0x0800b244

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 8001900:	2001      	movs	r0, #1
 8001902:	f000 ff49 	bl	8002798 <lcd_command>
						spin_motor();
 8001906:	f000 fdbb 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 800190a:	2100      	movs	r1, #0
 800190c:	2000      	movs	r0, #0
 800190e:	f000 ffd9 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001912:	487e      	ldr	r0, [pc, #504]	; (8001b0c <operator_start+0xaa8>)
 8001914:	f000 ffc1 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001918:	2100      	movs	r1, #0
 800191a:	2001      	movs	r0, #1
 800191c:	f000 ffd2 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001920:	4b7b      	ldr	r3, [pc, #492]	; (8001b10 <operator_start+0xaac>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	497b      	ldr	r1, [pc, #492]	; (8001b14 <operator_start+0xab0>)
 8001928:	487b      	ldr	r0, [pc, #492]	; (8001b18 <operator_start+0xab4>)
 800192a:	f008 fb15 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 800192e:	487a      	ldr	r0, [pc, #488]	; (8001b18 <operator_start+0xab4>)
 8001930:	f000 ffb3 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 0)
 8001934:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <operator_start+0xab8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d176      	bne.n	8001a2a <operator_start+0x9c6>
			{
				if (!time_num)
 800193c:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <operator_start+0xaac>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8571 	beq.w	8002428 <operator_start+0x13c4>
					return;
				if (t1ms_counter % 50 == 0)
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <operator_start+0xabc>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <operator_start+0xac0>)
 800194c:	fb83 1302 	smull	r1, r3, r3, r2
 8001950:	1119      	asrs	r1, r3, #4
 8001952:	17d3      	asrs	r3, r2, #31
 8001954:	1acb      	subs	r3, r1, r3
 8001956:	2132      	movs	r1, #50	; 0x32
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d103      	bne.n	800196a <operator_start+0x906>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8001962:	2104      	movs	r1, #4
 8001964:	4870      	ldr	r0, [pc, #448]	; (8001b28 <operator_start+0xac4>)
 8001966:	f003 fb02 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 800196a:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <operator_start+0xabc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	db5a      	blt.n	8001a2a <operator_start+0x9c6>
				{
					t1ms_counter = 0;
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <operator_start+0xabc>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
					time_num--;
 800197a:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <operator_start+0xaac>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	3b01      	subs	r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <operator_start+0xaac>)
 8001984:	701a      	strb	r2, [r3, #0]
					k++;
 8001986:	4b69      	ldr	r3, [pc, #420]	; (8001b2c <operator_start+0xac8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <operator_start+0xac8>)
 8001990:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001992:	4b66      	ldr	r3, [pc, #408]	; (8001b2c <operator_start+0xac8>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <operator_start+0xac8>)
 800199e:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 80019a0:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <operator_start+0xaac>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d126      	bne.n	80019f6 <operator_start+0x992>
					{
						lcd_command(CLEAR_DISPLAY);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f000 fef5 	bl	8002798 <lcd_command>
						time_num=0;
 80019ae:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <operator_start+0xaac>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 80019b4:	2100      	movs	r1, #0
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 ff84 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80019bc:	4b54      	ldr	r3, [pc, #336]	; (8001b10 <operator_start+0xaac>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4954      	ldr	r1, [pc, #336]	; (8001b14 <operator_start+0xab0>)
 80019c4:	4854      	ldr	r0, [pc, #336]	; (8001b18 <operator_start+0xab4>)
 80019c6:	f008 fac7 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80019ca:	4853      	ldr	r0, [pc, #332]	; (8001b18 <operator_start+0xab4>)
 80019cc:	f000 ff65 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80019d0:	2100      	movs	r1, #0
 80019d2:	4857      	ldr	r0, [pc, #348]	; (8001b30 <operator_start+0xacc>)
 80019d4:	f005 fb2e 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 80019d8:	2100      	movs	r1, #0
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 ff72 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 80019e0:	4854      	ldr	r0, [pc, #336]	; (8001b34 <operator_start+0xad0>)
 80019e2:	f000 ff5a 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80019e6:	2100      	movs	r1, #0
 80019e8:	2001      	movs	r0, #1
 80019ea:	f000 ff6b 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 80019ee:	4852      	ldr	r0, [pc, #328]	; (8001b38 <operator_start+0xad4>)
 80019f0:	f000 ff53 	bl	800289a <lcd_string>
 80019f4:	e019      	b.n	8001a2a <operator_start+0x9c6>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f000 fece 	bl	8002798 <lcd_command>
						spin_motor();
 80019fc:	f000 fd40 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 8001a00:	2100      	movs	r1, #0
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 ff5e 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001a08:	4840      	ldr	r0, [pc, #256]	; (8001b0c <operator_start+0xaa8>)
 8001a0a:	f000 ff46 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2001      	movs	r0, #1
 8001a12:	f000 ff57 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001a16:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <operator_start+0xaac>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	493d      	ldr	r1, [pc, #244]	; (8001b14 <operator_start+0xab0>)
 8001a1e:	483e      	ldr	r0, [pc, #248]	; (8001b18 <operator_start+0xab4>)
 8001a20:	f008 fa9a 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001a24:	483c      	ldr	r0, [pc, #240]	; (8001b18 <operator_start+0xab4>)
 8001a26:	f000 ff38 	bl	800289a <lcd_string>
				}
			}
		}


	if (wash_dry_sel == 0)
 8001a2a:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <operator_start+0xad8>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 850d 	bne.w	800244e <operator_start+0x13ea>
	{
		if (power_sel == 1)
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <operator_start+0xadc>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	f040 81af 	bne.w	8001d9c <operator_start+0xd38>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, power_level);
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <operator_start+0xae0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <operator_start+0xacc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34

			if (time_sel == 1)
 8001a48:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <operator_start+0xab8>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	f040 8095 	bne.w	8001b7c <operator_start+0xb18>
			{
				if (!time_num)
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <operator_start+0xaac>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 84e8 	beq.w	800242c <operator_start+0x13c8>
					return;
				if (t1ms_counter % 50 == 0)
 8001a5c:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <operator_start+0xabc>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <operator_start+0xac0>)
 8001a62:	fb83 1302 	smull	r1, r3, r3, r2
 8001a66:	1119      	asrs	r1, r3, #4
 8001a68:	17d3      	asrs	r3, r2, #31
 8001a6a:	1acb      	subs	r3, r1, r3
 8001a6c:	2132      	movs	r1, #50	; 0x32
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <operator_start+0xa1c>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8001a78:	2110      	movs	r1, #16
 8001a7a:	482b      	ldr	r0, [pc, #172]	; (8001b28 <operator_start+0xac4>)
 8001a7c:	f003 fa77 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <operator_start+0xabc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a88:	db78      	blt.n	8001b7c <operator_start+0xb18>
				{
					t1ms_counter = 0;
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <operator_start+0xabc>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
					time_num--;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <operator_start+0xaac>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <operator_start+0xaac>)
 8001a9a:	701a      	strb	r2, [r3, #0]
					k++;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <operator_start+0xac8>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <operator_start+0xac8>)
 8001aa6:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <operator_start+0xac8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <operator_start+0xac8>)
 8001ab4:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <operator_start+0xaac>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d144      	bne.n	8001b48 <operator_start+0xae4>
					{
						lcd_command(CLEAR_DISPLAY);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f000 fe6a 	bl	8002798 <lcd_command>
						time_num=0;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <operator_start+0xaac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001aca:	2100      	movs	r1, #0
 8001acc:	2001      	movs	r0, #1
 8001ace:	f000 fef9 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <operator_start+0xaac>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	490e      	ldr	r1, [pc, #56]	; (8001b14 <operator_start+0xab0>)
 8001ada:	480f      	ldr	r0, [pc, #60]	; (8001b18 <operator_start+0xab4>)
 8001adc:	f008 fa3c 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <operator_start+0xab4>)
 8001ae2:	f000 feda 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <operator_start+0xacc>)
 8001aea:	f005 faa3 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8001aee:	2100      	movs	r1, #0
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 fee7 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8001af6:	480f      	ldr	r0, [pc, #60]	; (8001b34 <operator_start+0xad0>)
 8001af8:	f000 fecf 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001afc:	2100      	movs	r1, #0
 8001afe:	2001      	movs	r0, #1
 8001b00:	f000 fee0 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <operator_start+0xad4>)
 8001b06:	f000 fec8 	bl	800289a <lcd_string>
 8001b0a:	e037      	b.n	8001b7c <operator_start+0xb18>
 8001b0c:	0800b2f4 	.word	0x0800b2f4
 8001b10:	200001f0 	.word	0x200001f0
 8001b14:	0800b2e4 	.word	0x0800b2e4
 8001b18:	20000200 	.word	0x20000200
 8001b1c:	200001ef 	.word	0x200001ef
 8001b20:	20000c00 	.word	0x20000c00
 8001b24:	51eb851f 	.word	0x51eb851f
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	200001f1 	.word	0x200001f1
 8001b30:	20000540 	.word	0x20000540
 8001b34:	0800b2ec 	.word	0x0800b2ec
 8001b38:	0800b244 	.word	0x0800b244
 8001b3c:	200001ed 	.word	0x200001ed
 8001b40:	200001ee 	.word	0x200001ee
 8001b44:	200001f8 	.word	0x200001f8

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f000 fe25 	bl	8002798 <lcd_command>
						spin_motor();
 8001b4e:	f000 fc97 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 8001b52:	2100      	movs	r1, #0
 8001b54:	2000      	movs	r0, #0
 8001b56:	f000 feb5 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001b5a:	4877      	ldr	r0, [pc, #476]	; (8001d38 <operator_start+0xcd4>)
 8001b5c:	f000 fe9d 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001b60:	2100      	movs	r1, #0
 8001b62:	2001      	movs	r0, #1
 8001b64:	f000 feae 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001b68:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <operator_start+0xcd8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4974      	ldr	r1, [pc, #464]	; (8001d40 <operator_start+0xcdc>)
 8001b70:	4874      	ldr	r0, [pc, #464]	; (8001d44 <operator_start+0xce0>)
 8001b72:	f008 f9f1 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001b76:	4873      	ldr	r0, [pc, #460]	; (8001d44 <operator_start+0xce0>)
 8001b78:	f000 fe8f 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 2)
 8001b7c:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <operator_start+0xce4>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d176      	bne.n	8001c72 <operator_start+0xc0e>
			{
				if (!time_num)
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <operator_start+0xcd8>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8451 	beq.w	8002430 <operator_start+0x13cc>
					return;
				if (t1ms_counter % 50 == 0)
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <operator_start+0xce8>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b6f      	ldr	r3, [pc, #444]	; (8001d50 <operator_start+0xcec>)
 8001b94:	fb83 1302 	smull	r1, r3, r3, r2
 8001b98:	1119      	asrs	r1, r3, #4
 8001b9a:	17d3      	asrs	r3, r2, #31
 8001b9c:	1acb      	subs	r3, r1, r3
 8001b9e:	2132      	movs	r1, #50	; 0x32
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <operator_start+0xb4e>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8001baa:	2110      	movs	r1, #16
 8001bac:	4869      	ldr	r0, [pc, #420]	; (8001d54 <operator_start+0xcf0>)
 8001bae:	f003 f9de 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8001bb2:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <operator_start+0xce8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bba:	db5a      	blt.n	8001c72 <operator_start+0xc0e>
				{
					t1ms_counter = 0;
 8001bbc:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <operator_start+0xce8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
					time_num--;
 8001bc2:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <operator_start+0xcd8>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <operator_start+0xcd8>)
 8001bcc:	701a      	strb	r2, [r3, #0]
					k++;
 8001bce:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <operator_start+0xcf4>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b60      	ldr	r3, [pc, #384]	; (8001d58 <operator_start+0xcf4>)
 8001bd8:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001bda:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <operator_start+0xcf4>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <operator_start+0xcf4>)
 8001be6:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001be8:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <operator_start+0xcd8>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d126      	bne.n	8001c3e <operator_start+0xbda>
					{
						lcd_command(CLEAR_DISPLAY);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f000 fdd1 	bl	8002798 <lcd_command>
						time_num=0;
 8001bf6:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <operator_start+0xcd8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f000 fe60 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001c04:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <operator_start+0xcd8>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	494d      	ldr	r1, [pc, #308]	; (8001d40 <operator_start+0xcdc>)
 8001c0c:	484d      	ldr	r0, [pc, #308]	; (8001d44 <operator_start+0xce0>)
 8001c0e:	f008 f9a3 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001c12:	484c      	ldr	r0, [pc, #304]	; (8001d44 <operator_start+0xce0>)
 8001c14:	f000 fe41 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4850      	ldr	r0, [pc, #320]	; (8001d5c <operator_start+0xcf8>)
 8001c1c:	f005 fa0a 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8001c20:	2100      	movs	r1, #0
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 fe4e 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8001c28:	484d      	ldr	r0, [pc, #308]	; (8001d60 <operator_start+0xcfc>)
 8001c2a:	f000 fe36 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2001      	movs	r0, #1
 8001c32:	f000 fe47 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 8001c36:	484b      	ldr	r0, [pc, #300]	; (8001d64 <operator_start+0xd00>)
 8001c38:	f000 fe2f 	bl	800289a <lcd_string>
 8001c3c:	e019      	b.n	8001c72 <operator_start+0xc0e>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 fdaa 	bl	8002798 <lcd_command>
						spin_motor();
 8001c44:	f000 fc1c 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 fe3a 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001c50:	4839      	ldr	r0, [pc, #228]	; (8001d38 <operator_start+0xcd4>)
 8001c52:	f000 fe22 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 fe33 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <operator_start+0xcd8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4936      	ldr	r1, [pc, #216]	; (8001d40 <operator_start+0xcdc>)
 8001c66:	4837      	ldr	r0, [pc, #220]	; (8001d44 <operator_start+0xce0>)
 8001c68:	f008 f976 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001c6c:	4835      	ldr	r0, [pc, #212]	; (8001d44 <operator_start+0xce0>)
 8001c6e:	f000 fe14 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 0)
 8001c72:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <operator_start+0xce4>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 8090 	bne.w	8001d9c <operator_start+0xd38>
			{
				if (!time_num)
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <operator_start+0xcd8>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 83d7 	beq.w	8002434 <operator_start+0x13d0>
					return;
				if (t1ms_counter % 50 == 0)
 8001c86:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <operator_start+0xce8>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <operator_start+0xcec>)
 8001c8c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c90:	1119      	asrs	r1, r3, #4
 8001c92:	17d3      	asrs	r3, r2, #31
 8001c94:	1acb      	subs	r3, r1, r3
 8001c96:	2132      	movs	r1, #50	; 0x32
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <operator_start+0xc46>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	482b      	ldr	r0, [pc, #172]	; (8001d54 <operator_start+0xcf0>)
 8001ca6:	f003 f962 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <operator_start+0xce8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb2:	db73      	blt.n	8001d9c <operator_start+0xd38>
				{
					t1ms_counter = 0;
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <operator_start+0xce8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
					time_num--;
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <operator_start+0xcd8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <operator_start+0xcd8>)
 8001cc4:	701a      	strb	r2, [r3, #0]
					k++;
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <operator_start+0xcf4>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <operator_start+0xcf4>)
 8001cd0:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <operator_start+0xcf4>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <operator_start+0xcf4>)
 8001cde:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <operator_start+0xcd8>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d13f      	bne.n	8001d68 <operator_start+0xd04>
					{
						lcd_command(CLEAR_DISPLAY);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f000 fd55 	bl	8002798 <lcd_command>
						time_num=0;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <operator_start+0xcd8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 fde4 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <operator_start+0xcd8>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	490f      	ldr	r1, [pc, #60]	; (8001d40 <operator_start+0xcdc>)
 8001d04:	480f      	ldr	r0, [pc, #60]	; (8001d44 <operator_start+0xce0>)
 8001d06:	f008 f927 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001d0a:	480e      	ldr	r0, [pc, #56]	; (8001d44 <operator_start+0xce0>)
 8001d0c:	f000 fdc5 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001d10:	2100      	movs	r1, #0
 8001d12:	4812      	ldr	r0, [pc, #72]	; (8001d5c <operator_start+0xcf8>)
 8001d14:	f005 f98e 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f000 fdd2 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <operator_start+0xcfc>)
 8001d22:	f000 fdba 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001d26:	2100      	movs	r1, #0
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f000 fdcb 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <operator_start+0xd00>)
 8001d30:	f000 fdb3 	bl	800289a <lcd_string>
 8001d34:	e032      	b.n	8001d9c <operator_start+0xd38>
 8001d36:	bf00      	nop
 8001d38:	0800b2f4 	.word	0x0800b2f4
 8001d3c:	200001f0 	.word	0x200001f0
 8001d40:	0800b2e4 	.word	0x0800b2e4
 8001d44:	20000200 	.word	0x20000200
 8001d48:	200001ef 	.word	0x200001ef
 8001d4c:	20000c00 	.word	0x20000c00
 8001d50:	51eb851f 	.word	0x51eb851f
 8001d54:	40021000 	.word	0x40021000
 8001d58:	200001f1 	.word	0x200001f1
 8001d5c:	20000540 	.word	0x20000540
 8001d60:	0800b2ec 	.word	0x0800b2ec
 8001d64:	0800b244 	.word	0x0800b244

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f000 fd15 	bl	8002798 <lcd_command>
						spin_motor();
 8001d6e:	f000 fb87 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 8001d72:	2100      	movs	r1, #0
 8001d74:	2000      	movs	r0, #0
 8001d76:	f000 fda5 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001d7a:	487d      	ldr	r0, [pc, #500]	; (8001f70 <operator_start+0xf0c>)
 8001d7c:	f000 fd8d 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001d80:	2100      	movs	r1, #0
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 fd9e 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001d88:	4b7a      	ldr	r3, [pc, #488]	; (8001f74 <operator_start+0xf10>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	497a      	ldr	r1, [pc, #488]	; (8001f78 <operator_start+0xf14>)
 8001d90:	487a      	ldr	r0, [pc, #488]	; (8001f7c <operator_start+0xf18>)
 8001d92:	f008 f8e1 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001d96:	4879      	ldr	r0, [pc, #484]	; (8001f7c <operator_start+0xf18>)
 8001d98:	f000 fd7f 	bl	800289a <lcd_string>
					}
				}
			}
		}

		if (power_sel == 2)
 8001d9c:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <operator_start+0xf1c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	f040 8196 	bne.w	80020d2 <operator_start+0x106e>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, power_level);
 8001da6:	4b77      	ldr	r3, [pc, #476]	; (8001f84 <operator_start+0xf20>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b77      	ldr	r3, [pc, #476]	; (8001f88 <operator_start+0xf24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34

			if (time_sel == 1)
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <operator_start+0xf28>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d176      	bne.n	8001ea6 <operator_start+0xe42>
			{
				if (!time_num)
 8001db8:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <operator_start+0xf10>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 833b 	beq.w	8002438 <operator_start+0x13d4>
					return;
				if (t1ms_counter % 50 == 0)
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <operator_start+0xf2c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <operator_start+0xf30>)
 8001dc8:	fb83 1302 	smull	r1, r3, r3, r2
 8001dcc:	1119      	asrs	r1, r3, #4
 8001dce:	17d3      	asrs	r3, r2, #31
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	2132      	movs	r1, #50	; 0x32
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <operator_start+0xd82>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8001dde:	2110      	movs	r1, #16
 8001de0:	486d      	ldr	r0, [pc, #436]	; (8001f98 <operator_start+0xf34>)
 8001de2:	f003 f8c4 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8001de6:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <operator_start+0xf2c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dee:	db5a      	blt.n	8001ea6 <operator_start+0xe42>
				{
					t1ms_counter = 0;
 8001df0:	4b67      	ldr	r3, [pc, #412]	; (8001f90 <operator_start+0xf2c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
					time_num--;
 8001df6:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <operator_start+0xf10>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <operator_start+0xf10>)
 8001e00:	701a      	strb	r2, [r3, #0]
					k++;
 8001e02:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <operator_start+0xf38>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <operator_start+0xf38>)
 8001e0c:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <operator_start+0xf38>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b60      	ldr	r3, [pc, #384]	; (8001f9c <operator_start+0xf38>)
 8001e1a:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001e1c:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <operator_start+0xf10>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d126      	bne.n	8001e72 <operator_start+0xe0e>
					{
						lcd_command(CLEAR_DISPLAY);
 8001e24:	2001      	movs	r0, #1
 8001e26:	f000 fcb7 	bl	8002798 <lcd_command>
						time_num=0;
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <operator_start+0xf10>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001e30:	2100      	movs	r1, #0
 8001e32:	2001      	movs	r0, #1
 8001e34:	f000 fd46 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001e38:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <operator_start+0xf10>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	494e      	ldr	r1, [pc, #312]	; (8001f78 <operator_start+0xf14>)
 8001e40:	484e      	ldr	r0, [pc, #312]	; (8001f7c <operator_start+0xf18>)
 8001e42:	f008 f889 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001e46:	484d      	ldr	r0, [pc, #308]	; (8001f7c <operator_start+0xf18>)
 8001e48:	f000 fd27 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	484e      	ldr	r0, [pc, #312]	; (8001f88 <operator_start+0xf24>)
 8001e50:	f005 f8f0 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8001e54:	2100      	movs	r1, #0
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 fd34 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8001e5c:	4850      	ldr	r0, [pc, #320]	; (8001fa0 <operator_start+0xf3c>)
 8001e5e:	f000 fd1c 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001e62:	2100      	movs	r1, #0
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 fd2d 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 8001e6a:	484e      	ldr	r0, [pc, #312]	; (8001fa4 <operator_start+0xf40>)
 8001e6c:	f000 fd15 	bl	800289a <lcd_string>
 8001e70:	e019      	b.n	8001ea6 <operator_start+0xe42>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 8001e72:	2001      	movs	r0, #1
 8001e74:	f000 fc90 	bl	8002798 <lcd_command>
						spin_motor();
 8001e78:	f000 fb02 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f000 fd20 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001e84:	483a      	ldr	r0, [pc, #232]	; (8001f70 <operator_start+0xf0c>)
 8001e86:	f000 fd08 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f000 fd19 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <operator_start+0xf10>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4937      	ldr	r1, [pc, #220]	; (8001f78 <operator_start+0xf14>)
 8001e9a:	4838      	ldr	r0, [pc, #224]	; (8001f7c <operator_start+0xf18>)
 8001e9c:	f008 f85c 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001ea0:	4836      	ldr	r0, [pc, #216]	; (8001f7c <operator_start+0xf18>)
 8001ea2:	f000 fcfa 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 2)
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <operator_start+0xf28>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	f040 8096 	bne.w	8001fdc <operator_start+0xf78>
			{
				if (!time_num)
 8001eb0:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <operator_start+0xf10>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 82c1 	beq.w	800243c <operator_start+0x13d8>
					return;
				if (t1ms_counter % 50 == 0)
 8001eba:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <operator_start+0xf2c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <operator_start+0xf30>)
 8001ec0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ec4:	1119      	asrs	r1, r3, #4
 8001ec6:	17d3      	asrs	r3, r2, #31
 8001ec8:	1acb      	subs	r3, r1, r3
 8001eca:	2132      	movs	r1, #50	; 0x32
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <operator_start+0xe7a>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	482f      	ldr	r0, [pc, #188]	; (8001f98 <operator_start+0xf34>)
 8001eda:	f003 f848 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <operator_start+0xf2c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee6:	db79      	blt.n	8001fdc <operator_start+0xf78>
				{
					t1ms_counter = 0;
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <operator_start+0xf2c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
					time_num--;
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <operator_start+0xf10>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <operator_start+0xf10>)
 8001ef8:	701a      	strb	r2, [r3, #0]
					k++;
 8001efa:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <operator_start+0xf38>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <operator_start+0xf38>)
 8001f04:	701a      	strb	r2, [r3, #0]
					k%=2;
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <operator_start+0xf38>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <operator_start+0xf38>)
 8001f12:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <operator_start+0xf10>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d145      	bne.n	8001fa8 <operator_start+0xf44>
					{
						lcd_command(CLEAR_DISPLAY);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f000 fc3b 	bl	8002798 <lcd_command>
						time_num=0;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <operator_start+0xf10>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f000 fcca 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <operator_start+0xf10>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4910      	ldr	r1, [pc, #64]	; (8001f78 <operator_start+0xf14>)
 8001f38:	4810      	ldr	r0, [pc, #64]	; (8001f7c <operator_start+0xf18>)
 8001f3a:	f008 f80d 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001f3e:	480f      	ldr	r0, [pc, #60]	; (8001f7c <operator_start+0xf18>)
 8001f40:	f000 fcab 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001f44:	2100      	movs	r1, #0
 8001f46:	4810      	ldr	r0, [pc, #64]	; (8001f88 <operator_start+0xf24>)
 8001f48:	f005 f874 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 fcb8 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8001f54:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <operator_start+0xf3c>)
 8001f56:	f000 fca0 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f000 fcb1 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 8001f62:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <operator_start+0xf40>)
 8001f64:	f000 fc99 	bl	800289a <lcd_string>
						buzzer_main();
 8001f68:	f000 faf8 	bl	800255c <buzzer_main>
 8001f6c:	e036      	b.n	8001fdc <operator_start+0xf78>
 8001f6e:	bf00      	nop
 8001f70:	0800b2f4 	.word	0x0800b2f4
 8001f74:	200001f0 	.word	0x200001f0
 8001f78:	0800b2e4 	.word	0x0800b2e4
 8001f7c:	20000200 	.word	0x20000200
 8001f80:	200001ee 	.word	0x200001ee
 8001f84:	200001f8 	.word	0x200001f8
 8001f88:	20000540 	.word	0x20000540
 8001f8c:	200001ef 	.word	0x200001ef
 8001f90:	20000c00 	.word	0x20000c00
 8001f94:	51eb851f 	.word	0x51eb851f
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	200001f1 	.word	0x200001f1
 8001fa0:	0800b2ec 	.word	0x0800b2ec
 8001fa4:	0800b244 	.word	0x0800b244

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f000 fbf5 	bl	8002798 <lcd_command>
						spin_motor();
 8001fae:	f000 fa67 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f000 fc85 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 8001fba:	487c      	ldr	r0, [pc, #496]	; (80021ac <operator_start+0x1148>)
 8001fbc:	f000 fc6d 	bl	800289a <lcd_string>
						move_cursor(1,0);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f000 fc7e 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8001fc8:	4b79      	ldr	r3, [pc, #484]	; (80021b0 <operator_start+0x114c>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4979      	ldr	r1, [pc, #484]	; (80021b4 <operator_start+0x1150>)
 8001fd0:	4879      	ldr	r0, [pc, #484]	; (80021b8 <operator_start+0x1154>)
 8001fd2:	f007 ffc1 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8001fd6:	4878      	ldr	r0, [pc, #480]	; (80021b8 <operator_start+0x1154>)
 8001fd8:	f000 fc5f 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 0)
 8001fdc:	4b77      	ldr	r3, [pc, #476]	; (80021bc <operator_start+0x1158>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d176      	bne.n	80020d2 <operator_start+0x106e>
			{
				if (!time_num)
 8001fe4:	4b72      	ldr	r3, [pc, #456]	; (80021b0 <operator_start+0x114c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8229 	beq.w	8002440 <operator_start+0x13dc>
					return;
				if (t1ms_counter % 50 == 0)
 8001fee:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <operator_start+0x115c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b74      	ldr	r3, [pc, #464]	; (80021c4 <operator_start+0x1160>)
 8001ff4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ff8:	1119      	asrs	r1, r3, #4
 8001ffa:	17d3      	asrs	r3, r2, #31
 8001ffc:	1acb      	subs	r3, r1, r3
 8001ffe:	2132      	movs	r1, #50	; 0x32
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <operator_start+0xfae>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800200a:	2110      	movs	r1, #16
 800200c:	486e      	ldr	r0, [pc, #440]	; (80021c8 <operator_start+0x1164>)
 800200e:	f002 ffae 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8002012:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <operator_start+0x115c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800201a:	db5a      	blt.n	80020d2 <operator_start+0x106e>
				{
					t1ms_counter = 0;
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <operator_start+0x115c>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
					time_num--;
 8002022:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <operator_start+0x114c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3b01      	subs	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <operator_start+0x114c>)
 800202c:	701a      	strb	r2, [r3, #0]
					k++;
 800202e:	4b67      	ldr	r3, [pc, #412]	; (80021cc <operator_start+0x1168>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <operator_start+0x1168>)
 8002038:	701a      	strb	r2, [r3, #0]
					k%=2;
 800203a:	4b64      	ldr	r3, [pc, #400]	; (80021cc <operator_start+0x1168>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b61      	ldr	r3, [pc, #388]	; (80021cc <operator_start+0x1168>)
 8002046:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8002048:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <operator_start+0x114c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d126      	bne.n	800209e <operator_start+0x103a>
					{
						lcd_command(CLEAR_DISPLAY);
 8002050:	2001      	movs	r0, #1
 8002052:	f000 fba1 	bl	8002798 <lcd_command>
						time_num=0;
 8002056:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <operator_start+0x114c>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 800205c:	2100      	movs	r1, #0
 800205e:	2001      	movs	r0, #1
 8002060:	f000 fc30 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8002064:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <operator_start+0x114c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4952      	ldr	r1, [pc, #328]	; (80021b4 <operator_start+0x1150>)
 800206c:	4852      	ldr	r0, [pc, #328]	; (80021b8 <operator_start+0x1154>)
 800206e:	f007 ff73 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8002072:	4851      	ldr	r0, [pc, #324]	; (80021b8 <operator_start+0x1154>)
 8002074:	f000 fc11 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002078:	2100      	movs	r1, #0
 800207a:	4855      	ldr	r0, [pc, #340]	; (80021d0 <operator_start+0x116c>)
 800207c:	f004 ffda 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 8002080:	2100      	movs	r1, #0
 8002082:	2000      	movs	r0, #0
 8002084:	f000 fc1e 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8002088:	4852      	ldr	r0, [pc, #328]	; (80021d4 <operator_start+0x1170>)
 800208a:	f000 fc06 	bl	800289a <lcd_string>
						move_cursor(1,0);
 800208e:	2100      	movs	r1, #0
 8002090:	2001      	movs	r0, #1
 8002092:	f000 fc17 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 8002096:	4850      	ldr	r0, [pc, #320]	; (80021d8 <operator_start+0x1174>)
 8002098:	f000 fbff 	bl	800289a <lcd_string>
 800209c:	e019      	b.n	80020d2 <operator_start+0x106e>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 800209e:	2001      	movs	r0, #1
 80020a0:	f000 fb7a 	bl	8002798 <lcd_command>
						spin_motor();
 80020a4:	f000 f9ec 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 80020a8:	2100      	movs	r1, #0
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 fc0a 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 80020b0:	483e      	ldr	r0, [pc, #248]	; (80021ac <operator_start+0x1148>)
 80020b2:	f000 fbf2 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80020b6:	2100      	movs	r1, #0
 80020b8:	2001      	movs	r0, #1
 80020ba:	f000 fc03 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80020be:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <operator_start+0x114c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	493b      	ldr	r1, [pc, #236]	; (80021b4 <operator_start+0x1150>)
 80020c6:	483c      	ldr	r0, [pc, #240]	; (80021b8 <operator_start+0x1154>)
 80020c8:	f007 ff46 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80020cc:	483a      	ldr	r0, [pc, #232]	; (80021b8 <operator_start+0x1154>)
 80020ce:	f000 fbe4 	bl	800289a <lcd_string>
					}
				}
			}
		}

		if (power_sel == 0)
 80020d2:	4b42      	ldr	r3, [pc, #264]	; (80021dc <operator_start+0x1178>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 81b9 	bne.w	800244e <operator_start+0x13ea>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, power_level);
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <operator_start+0x117c>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <operator_start+0x116c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34

			if (time_sel == 1)
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <operator_start+0x1158>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	f040 8094 	bne.w	8002218 <operator_start+0x11b4>
			{
				if (!time_num)
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <operator_start+0x114c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 81a5 	beq.w	8002444 <operator_start+0x13e0>
					return;
				if (t1ms_counter % 50 == 0)
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <operator_start+0x115c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <operator_start+0x1160>)
 8002100:	fb83 1302 	smull	r1, r3, r3, r2
 8002104:	1119      	asrs	r1, r3, #4
 8002106:	17d3      	asrs	r3, r2, #31
 8002108:	1acb      	subs	r3, r1, r3
 800210a:	2132      	movs	r1, #50	; 0x32
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <operator_start+0x10ba>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8002116:	2110      	movs	r1, #16
 8002118:	482b      	ldr	r0, [pc, #172]	; (80021c8 <operator_start+0x1164>)
 800211a:	f002 ff28 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <operator_start+0x115c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002126:	db77      	blt.n	8002218 <operator_start+0x11b4>
				{
					t1ms_counter = 0;
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <operator_start+0x115c>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
					time_num--;
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <operator_start+0x114c>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <operator_start+0x114c>)
 8002138:	701a      	strb	r2, [r3, #0]
					k++;
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <operator_start+0x1168>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	3301      	adds	r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <operator_start+0x1168>)
 8002144:	701a      	strb	r2, [r3, #0]
					k%=2;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <operator_start+0x1168>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <operator_start+0x1168>)
 8002152:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <operator_start+0x114c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d143      	bne.n	80021e4 <operator_start+0x1180>
					{
						lcd_command(CLEAR_DISPLAY);
 800215c:	2001      	movs	r0, #1
 800215e:	f000 fb1b 	bl	8002798 <lcd_command>
						time_num=0;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <operator_start+0x114c>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8002168:	2100      	movs	r1, #0
 800216a:	2001      	movs	r0, #1
 800216c:	f000 fbaa 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <operator_start+0x114c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	490f      	ldr	r1, [pc, #60]	; (80021b4 <operator_start+0x1150>)
 8002178:	480f      	ldr	r0, [pc, #60]	; (80021b8 <operator_start+0x1154>)
 800217a:	f007 feed 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 800217e:	480e      	ldr	r0, [pc, #56]	; (80021b8 <operator_start+0x1154>)
 8002180:	f000 fb8b 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002184:	2100      	movs	r1, #0
 8002186:	4812      	ldr	r0, [pc, #72]	; (80021d0 <operator_start+0x116c>)
 8002188:	f004 ff54 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 800218c:	2100      	movs	r1, #0
 800218e:	2000      	movs	r0, #0
 8002190:	f000 fb98 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 8002194:	480f      	ldr	r0, [pc, #60]	; (80021d4 <operator_start+0x1170>)
 8002196:	f000 fb80 	bl	800289a <lcd_string>
						move_cursor(1,0);
 800219a:	2100      	movs	r1, #0
 800219c:	2001      	movs	r0, #1
 800219e:	f000 fb91 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <operator_start+0x1174>)
 80021a4:	f000 fb79 	bl	800289a <lcd_string>
 80021a8:	e036      	b.n	8002218 <operator_start+0x11b4>
 80021aa:	bf00      	nop
 80021ac:	0800b2f4 	.word	0x0800b2f4
 80021b0:	200001f0 	.word	0x200001f0
 80021b4:	0800b2e4 	.word	0x0800b2e4
 80021b8:	20000200 	.word	0x20000200
 80021bc:	200001ef 	.word	0x200001ef
 80021c0:	20000c00 	.word	0x20000c00
 80021c4:	51eb851f 	.word	0x51eb851f
 80021c8:	40021000 	.word	0x40021000
 80021cc:	200001f1 	.word	0x200001f1
 80021d0:	20000540 	.word	0x20000540
 80021d4:	0800b2ec 	.word	0x0800b2ec
 80021d8:	0800b244 	.word	0x0800b244
 80021dc:	200001ee 	.word	0x200001ee
 80021e0:	200001f8 	.word	0x200001f8

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 fad7 	bl	8002798 <lcd_command>
						spin_motor();
 80021ea:	f000 f949 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 80021ee:	2100      	movs	r1, #0
 80021f0:	2000      	movs	r0, #0
 80021f2:	f000 fb67 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 80021f6:	4896      	ldr	r0, [pc, #600]	; (8002450 <operator_start+0x13ec>)
 80021f8:	f000 fb4f 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80021fc:	2100      	movs	r1, #0
 80021fe:	2001      	movs	r0, #1
 8002200:	f000 fb60 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8002204:	4b93      	ldr	r3, [pc, #588]	; (8002454 <operator_start+0x13f0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4993      	ldr	r1, [pc, #588]	; (8002458 <operator_start+0x13f4>)
 800220c:	4893      	ldr	r0, [pc, #588]	; (800245c <operator_start+0x13f8>)
 800220e:	f007 fea3 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8002212:	4892      	ldr	r0, [pc, #584]	; (800245c <operator_start+0x13f8>)
 8002214:	f000 fb41 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 2)
 8002218:	4b91      	ldr	r3, [pc, #580]	; (8002460 <operator_start+0x13fc>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d176      	bne.n	800230e <operator_start+0x12aa>
			{
				if (!time_num)
 8002220:	4b8c      	ldr	r3, [pc, #560]	; (8002454 <operator_start+0x13f0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 810f 	beq.w	8002448 <operator_start+0x13e4>
					return;
				if (t1ms_counter % 50 == 0)
 800222a:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <operator_start+0x1400>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b8e      	ldr	r3, [pc, #568]	; (8002468 <operator_start+0x1404>)
 8002230:	fb83 1302 	smull	r1, r3, r3, r2
 8002234:	1119      	asrs	r1, r3, #4
 8002236:	17d3      	asrs	r3, r2, #31
 8002238:	1acb      	subs	r3, r1, r3
 800223a:	2132      	movs	r1, #50	; 0x32
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d103      	bne.n	800224e <operator_start+0x11ea>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8002246:	2110      	movs	r1, #16
 8002248:	4888      	ldr	r0, [pc, #544]	; (800246c <operator_start+0x1408>)
 800224a:	f002 fe90 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 800224e:	4b85      	ldr	r3, [pc, #532]	; (8002464 <operator_start+0x1400>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002256:	db5a      	blt.n	800230e <operator_start+0x12aa>
				{
					t1ms_counter = 0;
 8002258:	4b82      	ldr	r3, [pc, #520]	; (8002464 <operator_start+0x1400>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
					time_num--;
 800225e:	4b7d      	ldr	r3, [pc, #500]	; (8002454 <operator_start+0x13f0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	3b01      	subs	r3, #1
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <operator_start+0x13f0>)
 8002268:	701a      	strb	r2, [r3, #0]
					k++;
 800226a:	4b81      	ldr	r3, [pc, #516]	; (8002470 <operator_start+0x140c>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b7f      	ldr	r3, [pc, #508]	; (8002470 <operator_start+0x140c>)
 8002274:	701a      	strb	r2, [r3, #0]
					k%=2;
 8002276:	4b7e      	ldr	r3, [pc, #504]	; (8002470 <operator_start+0x140c>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <operator_start+0x140c>)
 8002282:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 8002284:	4b73      	ldr	r3, [pc, #460]	; (8002454 <operator_start+0x13f0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d126      	bne.n	80022da <operator_start+0x1276>
					{
						lcd_command(CLEAR_DISPLAY);
 800228c:	2001      	movs	r0, #1
 800228e:	f000 fa83 	bl	8002798 <lcd_command>
						time_num=0;
 8002292:	4b70      	ldr	r3, [pc, #448]	; (8002454 <operator_start+0x13f0>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8002298:	2100      	movs	r1, #0
 800229a:	2001      	movs	r0, #1
 800229c:	f000 fb12 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80022a0:	4b6c      	ldr	r3, [pc, #432]	; (8002454 <operator_start+0x13f0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	496c      	ldr	r1, [pc, #432]	; (8002458 <operator_start+0x13f4>)
 80022a8:	486c      	ldr	r0, [pc, #432]	; (800245c <operator_start+0x13f8>)
 80022aa:	f007 fe55 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80022ae:	486b      	ldr	r0, [pc, #428]	; (800245c <operator_start+0x13f8>)
 80022b0:	f000 faf3 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80022b4:	2100      	movs	r1, #0
 80022b6:	486f      	ldr	r0, [pc, #444]	; (8002474 <operator_start+0x1410>)
 80022b8:	f004 febc 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 80022bc:	2100      	movs	r1, #0
 80022be:	2000      	movs	r0, #0
 80022c0:	f000 fb00 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 80022c4:	486c      	ldr	r0, [pc, #432]	; (8002478 <operator_start+0x1414>)
 80022c6:	f000 fae8 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80022ca:	2100      	movs	r1, #0
 80022cc:	2001      	movs	r0, #1
 80022ce:	f000 faf9 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 80022d2:	486a      	ldr	r0, [pc, #424]	; (800247c <operator_start+0x1418>)
 80022d4:	f000 fae1 	bl	800289a <lcd_string>
 80022d8:	e019      	b.n	800230e <operator_start+0x12aa>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 fa5c 	bl	8002798 <lcd_command>
						spin_motor();
 80022e0:	f000 f8ce 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 80022e4:	2100      	movs	r1, #0
 80022e6:	2000      	movs	r0, #0
 80022e8:	f000 faec 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 80022ec:	4858      	ldr	r0, [pc, #352]	; (8002450 <operator_start+0x13ec>)
 80022ee:	f000 fad4 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80022f2:	2100      	movs	r1, #0
 80022f4:	2001      	movs	r0, #1
 80022f6:	f000 fae5 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80022fa:	4b56      	ldr	r3, [pc, #344]	; (8002454 <operator_start+0x13f0>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	4955      	ldr	r1, [pc, #340]	; (8002458 <operator_start+0x13f4>)
 8002302:	4856      	ldr	r0, [pc, #344]	; (800245c <operator_start+0x13f8>)
 8002304:	f007 fe28 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8002308:	4854      	ldr	r0, [pc, #336]	; (800245c <operator_start+0x13f8>)
 800230a:	f000 fac6 	bl	800289a <lcd_string>
					}
				}
			}

			if (time_sel == 0)
 800230e:	4b54      	ldr	r3, [pc, #336]	; (8002460 <operator_start+0x13fc>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 809b 	bne.w	800244e <operator_start+0x13ea>
			{
				if (!time_num)
 8002318:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <operator_start+0x13f0>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8095 	beq.w	800244c <operator_start+0x13e8>
					return;
				if (t1ms_counter % 50 == 0)
 8002322:	4b50      	ldr	r3, [pc, #320]	; (8002464 <operator_start+0x1400>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b50      	ldr	r3, [pc, #320]	; (8002468 <operator_start+0x1404>)
 8002328:	fb83 1302 	smull	r1, r3, r3, r2
 800232c:	1119      	asrs	r1, r3, #4
 800232e:	17d3      	asrs	r3, r2, #31
 8002330:	1acb      	subs	r3, r1, r3
 8002332:	2132      	movs	r1, #50	; 0x32
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <operator_start+0x12e2>
				{
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800233e:	2110      	movs	r1, #16
 8002340:	484a      	ldr	r0, [pc, #296]	; (800246c <operator_start+0x1408>)
 8002342:	f002 fe14 	bl	8004f6e <HAL_GPIO_TogglePin>
				}
				if (t1ms_counter >= 1000)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <operator_start+0x1400>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800234e:	db7e      	blt.n	800244e <operator_start+0x13ea>
				{
					t1ms_counter = 0;
 8002350:	4b44      	ldr	r3, [pc, #272]	; (8002464 <operator_start+0x1400>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
					time_num--;
 8002356:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <operator_start+0x13f0>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	3b01      	subs	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <operator_start+0x13f0>)
 8002360:	701a      	strb	r2, [r3, #0]
					k++;
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <operator_start+0x140c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <operator_start+0x140c>)
 800236c:	701a      	strb	r2, [r3, #0]
					k%=2;
 800236e:	4b40      	ldr	r3, [pc, #256]	; (8002470 <operator_start+0x140c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <operator_start+0x140c>)
 800237a:	701a      	strb	r2, [r3, #0]

					if(time_num <= 0)
 800237c:	4b35      	ldr	r3, [pc, #212]	; (8002454 <operator_start+0x13f0>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d126      	bne.n	80023d2 <operator_start+0x136e>
					{
						lcd_command(CLEAR_DISPLAY);
 8002384:	2001      	movs	r0, #1
 8002386:	f000 fa07 	bl	8002798 <lcd_command>
						time_num=0;
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <operator_start+0x13f0>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]

						move_cursor(1,0);
 8002390:	2100      	movs	r1, #0
 8002392:	2001      	movs	r0, #1
 8002394:	f000 fa96 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <operator_start+0x13f0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	492e      	ldr	r1, [pc, #184]	; (8002458 <operator_start+0x13f4>)
 80023a0:	482e      	ldr	r0, [pc, #184]	; (800245c <operator_start+0x13f8>)
 80023a2:	f007 fdd9 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 80023a6:	482d      	ldr	r0, [pc, #180]	; (800245c <operator_start+0x13f8>)
 80023a8:	f000 fa77 	bl	800289a <lcd_string>

						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80023ac:	2100      	movs	r1, #0
 80023ae:	4831      	ldr	r0, [pc, #196]	; (8002474 <operator_start+0x1410>)
 80023b0:	f004 fe40 	bl	8007034 <HAL_TIM_PWM_Stop>
						move_cursor(0,0);
 80023b4:	2100      	movs	r1, #0
 80023b6:	2000      	movs	r0, #0
 80023b8:	f000 fa84 	bl	80028c4 <move_cursor>
						lcd_string("clear!!");
 80023bc:	482e      	ldr	r0, [pc, #184]	; (8002478 <operator_start+0x1414>)
 80023be:	f000 fa6c 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80023c2:	2100      	movs	r1, #0
 80023c4:	2001      	movs	r0, #1
 80023c6:	f000 fa7d 	bl	80028c4 <move_cursor>
						lcd_string("PRESS BUTTON0");
 80023ca:	482c      	ldr	r0, [pc, #176]	; (800247c <operator_start+0x1418>)
 80023cc:	f000 fa65 	bl	800289a <lcd_string>
 80023d0:	e03d      	b.n	800244e <operator_start+0x13ea>

					}

					else
					{
						lcd_command(CLEAR_DISPLAY);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 f9e0 	bl	8002798 <lcd_command>
						spin_motor();
 80023d8:	f000 f852 	bl	8002480 <spin_motor>
						move_cursor(0,0);
 80023dc:	2100      	movs	r1, #0
 80023de:	2000      	movs	r0, #0
 80023e0:	f000 fa70 	bl	80028c4 <move_cursor>
						lcd_string("  washing!!");
 80023e4:	481a      	ldr	r0, [pc, #104]	; (8002450 <operator_start+0x13ec>)
 80023e6:	f000 fa58 	bl	800289a <lcd_string>
						move_cursor(1,0);
 80023ea:	2100      	movs	r1, #0
 80023ec:	2001      	movs	r0, #1
 80023ee:	f000 fa69 	bl	80028c4 <move_cursor>
						sprintf(time__num, "%02d", time_num);
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <operator_start+0x13f0>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4917      	ldr	r1, [pc, #92]	; (8002458 <operator_start+0x13f4>)
 80023fa:	4818      	ldr	r0, [pc, #96]	; (800245c <operator_start+0x13f8>)
 80023fc:	f007 fdac 	bl	8009f58 <siprintf>
						lcd_string(time__num);
 8002400:	4816      	ldr	r0, [pc, #88]	; (800245c <operator_start+0x13f8>)
 8002402:	f000 fa4a 	bl	800289a <lcd_string>
 8002406:	e022      	b.n	800244e <operator_start+0x13ea>
					return;
 8002408:	bf00      	nop
 800240a:	e020      	b.n	800244e <operator_start+0x13ea>
					return;
 800240c:	bf00      	nop
 800240e:	e01e      	b.n	800244e <operator_start+0x13ea>
					return;
 8002410:	bf00      	nop
 8002412:	e01c      	b.n	800244e <operator_start+0x13ea>
				return;
 8002414:	bf00      	nop
 8002416:	e01a      	b.n	800244e <operator_start+0x13ea>
					return;
 8002418:	bf00      	nop
 800241a:	e018      	b.n	800244e <operator_start+0x13ea>
					return;
 800241c:	bf00      	nop
 800241e:	e016      	b.n	800244e <operator_start+0x13ea>
					return;
 8002420:	bf00      	nop
 8002422:	e014      	b.n	800244e <operator_start+0x13ea>
					return;
 8002424:	bf00      	nop
 8002426:	e012      	b.n	800244e <operator_start+0x13ea>
					return;
 8002428:	bf00      	nop
 800242a:	e010      	b.n	800244e <operator_start+0x13ea>
					return;
 800242c:	bf00      	nop
 800242e:	e00e      	b.n	800244e <operator_start+0x13ea>
					return;
 8002430:	bf00      	nop
 8002432:	e00c      	b.n	800244e <operator_start+0x13ea>
					return;
 8002434:	bf00      	nop
 8002436:	e00a      	b.n	800244e <operator_start+0x13ea>
					return;
 8002438:	bf00      	nop
 800243a:	e008      	b.n	800244e <operator_start+0x13ea>
					return;
 800243c:	bf00      	nop
 800243e:	e006      	b.n	800244e <operator_start+0x13ea>
					return;
 8002440:	bf00      	nop
 8002442:	e004      	b.n	800244e <operator_start+0x13ea>
					return;
 8002444:	bf00      	nop
 8002446:	e002      	b.n	800244e <operator_start+0x13ea>
					return;
 8002448:	bf00      	nop
 800244a:	e000      	b.n	800244e <operator_start+0x13ea>
					return;
 800244c:	bf00      	nop
					}
				}
			}
		}
	}
}
 800244e:	bd80      	pop	{r7, pc}
 8002450:	0800b2f4 	.word	0x0800b2f4
 8002454:	200001f0 	.word	0x200001f0
 8002458:	0800b2e4 	.word	0x0800b2e4
 800245c:	20000200 	.word	0x20000200
 8002460:	200001ef 	.word	0x200001ef
 8002464:	20000c00 	.word	0x20000c00
 8002468:	51eb851f 	.word	0x51eb851f
 800246c:	40021000 	.word	0x40021000
 8002470:	200001f1 	.word	0x200001f1
 8002474:	20000540 	.word	0x20000540
 8002478:	0800b2ec 	.word	0x0800b2ec
 800247c:	0800b244 	.word	0x0800b244

08002480 <spin_motor>:
	move_cursor(1, 0);
	lcd_string("PRESS BUTTON0");
}

void spin_motor(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	if (k == 0)
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <spin_motor+0x4c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10c      	bne.n	80024a6 <spin_motor+0x26>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800248c:	2201      	movs	r2, #1
 800248e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002492:	480f      	ldr	r0, [pc, #60]	; (80024d0 <spin_motor+0x50>)
 8002494:	f002 fd52 	bl	8004f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800249e:	480c      	ldr	r0, [pc, #48]	; (80024d0 <spin_motor+0x50>)
 80024a0:	f002 fd4c 	bl	8004f3c <HAL_GPIO_WritePin>
	else if (k == 1)
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
	}
}
 80024a4:	e00f      	b.n	80024c6 <spin_motor+0x46>
	else if (k == 1)
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <spin_motor+0x4c>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10b      	bne.n	80024c6 <spin_motor+0x46>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b4:	4806      	ldr	r0, [pc, #24]	; (80024d0 <spin_motor+0x50>)
 80024b6:	f002 fd41 	bl	8004f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80024ba:	2201      	movs	r2, #1
 80024bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c0:	4803      	ldr	r0, [pc, #12]	; (80024d0 <spin_motor+0x50>)
 80024c2:	f002 fd3b 	bl	8004f3c <HAL_GPIO_WritePin>
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200001f1 	.word	0x200001f1
 80024d0:	40021000 	.word	0x40021000

080024d4 <get_button>:
	}
}
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1)을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	4619      	mov	r1, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f002 fd0f 	bl	8004f0c <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <get_button+0x40>
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <get_button+0x68>)
 80024fc:	5cd3      	ldrb	r3, [r2, r3]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 8002502:	2050      	movs	r0, #80	; 0x50
 8002504:	f001 fe66 	bl	80041d4 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;  // 현재의 버튼 상태를 저장
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	4a0c      	ldr	r2, [pc, #48]	; (800253c <get_button+0x68>)
 800250c:	2100      	movs	r1, #0
 800250e:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise 상태로 인정
 8002510:	2301      	movs	r3, #1
 8002512:	e00e      	b.n	8002532 <get_button+0x5e>
	}

	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10a      	bne.n	8002530 <get_button+0x5c>
 800251a:	787b      	ldrb	r3, [r7, #1]
 800251c:	4a07      	ldr	r2, [pc, #28]	; (800253c <get_button+0x68>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <get_button+0x5c>
	{	// 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태이면
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화하고
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <get_button+0x68>)
 8002528:	2101      	movs	r1, #1
 800252a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;  // 3. 버튼을 1번 눌렀다 뗀 것으로 인정한다.
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <get_button+0x5e>
		HAL_Delay(30);
	}
	return BUTTON_RELEASE;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000

08002540 <noTone>:
};

 unsigned int duration[] = {1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2};

 void noTone()
 {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
     htim5.Instance->CCR1=0;
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <noTone+0x18>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
     HAL_Delay(50);
 800254c:	2032      	movs	r0, #50	; 0x32
 800254e:	f001 fe41 	bl	80041d4 <HAL_Delay>
 }
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000588 	.word	0x20000588

0800255c <buzzer_main>:

void buzzer_main()
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
   int divide_freq = 1600000;
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <buzzer_main+0x100>)
 8002564:	607b      	str	r3, [r7, #4]

  while (1)
  {

	// 학교 종이 땡땡땡
    for (int i=0; i < 24; i++)
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	e026      	b.n	80025ba <buzzer_main+0x5e>
    {
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / school_bell[i]);
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4a3c      	ldr	r2, [pc, #240]	; (8002660 <buzzer_main+0x104>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <buzzer_main+0x108>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fbb1 f2f2 	udiv	r2, r1, r2
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4937      	ldr	r1, [pc, #220]	; (8002660 <buzzer_main+0x104>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4a35      	ldr	r2, [pc, #212]	; (8002664 <buzzer_main+0x108>)
 8002590:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / school_bell[i] / 2);
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4932      	ldr	r1, [pc, #200]	; (8002660 <buzzer_main+0x104>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800259c:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a0:	4b30      	ldr	r3, [pc, #192]	; (8002664 <buzzer_main+0x108>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0852      	lsrs	r2, r2, #1
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 80025a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025ac:	f001 fe12 	bl	80041d4 <HAL_Delay>
		noTone();  /* note 소리 내고 50ms 끊어주기 */
 80025b0:	f7ff ffc6 	bl	8002540 <noTone>
    for (int i=0; i < 24; i++)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3301      	adds	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b17      	cmp	r3, #23
 80025be:	ddd5      	ble.n	800256c <buzzer_main+0x10>
    }

    /* 음악 끝나고 3초 후 시작*/
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4) ;
 80025c0:	210c      	movs	r1, #12
 80025c2:	4828      	ldr	r0, [pc, #160]	; (8002664 <buzzer_main+0x108>)
 80025c4:	f004 fd36 	bl	8007034 <HAL_TIM_PWM_Stop>
    HAL_Delay(3000);
 80025c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025cc:	f001 fe02 	bl	80041d4 <HAL_Delay>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4) ;
 80025d0:	210c      	movs	r1, #12
 80025d2:	4824      	ldr	r0, [pc, #144]	; (8002664 <buzzer_main+0x108>)
 80025d4:	f004 fc66 	bl	8006ea4 <HAL_TIM_PWM_Start>

    // happy birthday to you
    for (int i=0; i < 25; i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	e02d      	b.n	800263a <buzzer_main+0xde>
    {
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / happy_birthday[i]);
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4a21      	ldr	r2, [pc, #132]	; (8002668 <buzzer_main+0x10c>)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <buzzer_main+0x108>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fbb1 f2f2 	udiv	r2, r1, r2
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	491c      	ldr	r1, [pc, #112]	; (8002668 <buzzer_main+0x10c>)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <buzzer_main+0x108>)
 8002602:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / happy_birthday[i] / 2);
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4918      	ldr	r1, [pc, #96]	; (8002668 <buzzer_main+0x10c>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800260e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <buzzer_main+0x108>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0852      	lsrs	r2, r2, #1
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(300*duration[i]);
 800261a:	4a14      	ldr	r2, [pc, #80]	; (800266c <buzzer_main+0x110>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f001 fdd2 	bl	80041d4 <HAL_Delay>
		noTone();
 8002630:	f7ff ff86 	bl	8002540 <noTone>
    for (int i=0; i < 25; i++)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	3301      	adds	r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b18      	cmp	r3, #24
 800263e:	ddce      	ble.n	80025de <buzzer_main+0x82>
    }

    /* 음악 끝나고 3초 후 시작 */
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4) ;
 8002640:	210c      	movs	r1, #12
 8002642:	4808      	ldr	r0, [pc, #32]	; (8002664 <buzzer_main+0x108>)
 8002644:	f004 fcf6 	bl	8007034 <HAL_TIM_PWM_Stop>
    HAL_Delay(3000);
 8002648:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800264c:	f001 fdc2 	bl	80041d4 <HAL_Delay>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4) ;
 8002650:	210c      	movs	r1, #12
 8002652:	4804      	ldr	r0, [pc, #16]	; (8002664 <buzzer_main+0x108>)
 8002654:	f004 fc26 	bl	8006ea4 <HAL_TIM_PWM_Start>
    for (int i=0; i < 24; i++)
 8002658:	e785      	b.n	8002566 <buzzer_main+0xa>
 800265a:	bf00      	nop
 800265c:	00186a00 	.word	0x00186a00
 8002660:	20000008 	.word	0x20000008
 8002664:	20000588 	.word	0x20000588
 8002668:	20000068 	.word	0x20000068
 800266c:	200000cc 	.word	0x200000cc

08002670 <FND_update>:
#endif
	}
}

void FND_update(unsigned int value)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	FND[0] = FND_font[value % 10];
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <FND_update+0x5c>)
 800267c:	fba3 2301 	umull	r2, r3, r3, r1
 8002680:	08da      	lsrs	r2, r3, #3
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	1aca      	subs	r2, r1, r3
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <FND_update+0x60>)
 800268e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <FND_update+0x64>)
 8002696:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[value / 10 % 10];
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <FND_update+0x5c>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	08d9      	lsrs	r1, r3, #3
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <FND_update+0x5c>)
 80026a4:	fba3 2301 	umull	r2, r3, r3, r1
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	1aca      	subs	r2, r1, r3
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <FND_update+0x60>)
 80026b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <FND_update+0x64>)
 80026be:	805a      	strh	r2, [r3, #2]
//	FND[2] = FND_font[value / 100 % 10];
//	FND[3] = FND_font[value / 1000 % 10];

	return;
 80026c0:	bf00      	nop
}
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	cccccccd 	.word	0xcccccccd
 80026d0:	20000138 	.word	0x20000138
 80026d4:	20000208 	.word	0x20000208

080026d8 <FND4digit_off>:
	return;
}


void FND4digit_off(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
#if 1 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80026dc:	2200      	movs	r2, #0
 80026de:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80026e2:	4808      	ldr	r0, [pc, #32]	; (8002704 <FND4digit_off+0x2c>)
 80026e4:	f002 fc2a 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <FND4digit_off+0x30>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2201      	movs	r2, #1
 80026f6:	4619      	mov	r1, r3
 80026f8:	4804      	ldr	r0, [pc, #16]	; (800270c <FND4digit_off+0x34>)
 80026fa:	f002 fc1f 	bl	8004f3c <HAL_GPIO_WritePin>
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
#endif
	return;
 80026fe:	bf00      	nop
}
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40020800 	.word	0x40020800
 8002708:	20000138 	.word	0x20000138
 800270c:	40020400 	.word	0x40020400

08002710 <fnd4digit_sec_clock>:
#endif
	return;
}

void fnd4digit_sec_clock(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	static unsigned int msec=0;    // ms counter
	static int i=0;     // FND position indicator



	FND_update(time_num);
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <fnd4digit_sec_clock+0x6c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ffa9 	bl	8002670 <FND_update>

#if 1   // SYSTICK interrupt 방식
		if (fnd1ms_counter >= 2)   // 2ms reached
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <fnd4digit_sec_clock+0x70>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	dd28      	ble.n	8002778 <fnd4digit_sec_clock+0x68>
		{
			fnd1ms_counter=0;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <fnd4digit_sec_clock+0x70>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

			FND4digit_off();
 800272c:	f7ff ffd4 	bl	80026d8 <FND4digit_off>
#if 1 // common 애노우드  WCN4-
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_SET);
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <fnd4digit_sec_clock+0x74>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <fnd4digit_sec_clock+0x78>)
 8002736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800273a:	2201      	movs	r2, #1
 800273c:	4619      	mov	r1, r3
 800273e:	4813      	ldr	r0, [pc, #76]	; (800278c <fnd4digit_sec_clock+0x7c>)
 8002740:	f002 fbfc 	bl	8004f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_RESET);
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <fnd4digit_sec_clock+0x74>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a11      	ldr	r2, [pc, #68]	; (8002790 <fnd4digit_sec_clock+0x80>)
 800274a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800274e:	2200      	movs	r2, #0
 8002750:	4619      	mov	r1, r3
 8002752:	4810      	ldr	r0, [pc, #64]	; (8002794 <fnd4digit_sec_clock+0x84>)
 8002754:	f002 fbf2 	bl	8004f3c <HAL_GPIO_WritePin>
#else // common 캐소우드 CL5642AH30
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
#endif
			i++;   // 다음 display할 FND를 가리킨다.
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <fnd4digit_sec_clock+0x74>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <fnd4digit_sec_clock+0x74>)
 8002760:	6013      	str	r3, [r2, #0]
			i %= 4;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <fnd4digit_sec_clock+0x74>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	425a      	negs	r2, r3
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	bf58      	it	pl
 8002772:	4253      	negpl	r3, r2
 8002774:	4a03      	ldr	r2, [pc, #12]	; (8002784 <fnd4digit_sec_clock+0x74>)
 8002776:	6013      	str	r3, [r2, #0]
			HAL_Delay(2);
		}

#endif

}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200001f0 	.word	0x200001f0
 8002780:	20000c04 	.word	0x20000c04
 8002784:	20000210 	.word	0x20000210
 8002788:	20000130 	.word	0x20000130
 800278c:	40020800 	.word	0x40020800
 8002790:	20000208 	.word	0x20000208
 8002794:	40020400 	.word	0x40020400

08002798 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f023 030f 	bic.w	r3, r3, #15
 80027a8:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	f043 030c 	orr.w	r3, r3, #12
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	f043 030c 	orr.w	r3, r3, #12
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80027d8:	bf00      	nop
 80027da:	f107 0208 	add.w	r2, r7, #8
 80027de:	2364      	movs	r3, #100	; 0x64
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2304      	movs	r3, #4
 80027e4:	214e      	movs	r1, #78	; 0x4e
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <lcd_command+0x64>)
 80027e8:	f002 fd20 	bl	800522c <HAL_I2C_Master_Transmit>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f3      	bne.n	80027da <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80027f2:	bf00      	nop
}
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	2000043c 	.word	0x2000043c

08002800 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af02      	add	r7, sp, #8
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f023 030f 	bic.w	r3, r3, #15
 8002810:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	f043 030d 	orr.w	r3, r3, #13
 800281e:	b2db      	uxtb	r3, r3
 8002820:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	f043 0309 	orr.w	r3, r3, #9
 8002828:	b2db      	uxtb	r3, r3
 800282a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f043 030d 	orr.w	r3, r3, #13
 8002832:	b2db      	uxtb	r3, r3
 8002834:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	f043 0309 	orr.w	r3, r3, #9
 800283c:	b2db      	uxtb	r3, r3
 800283e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8002840:	bf00      	nop
 8002842:	f107 0208 	add.w	r2, r7, #8
 8002846:	2364      	movs	r3, #100	; 0x64
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2304      	movs	r3, #4
 800284c:	214e      	movs	r1, #78	; 0x4e
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <lcd_data+0x64>)
 8002850:	f002 fcec 	bl	800522c <HAL_I2C_Master_Transmit>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f3      	bne.n	8002842 <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800285a:	bf00      	nop
}
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2000043c 	.word	0x2000043c

08002868 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 800286c:	2033      	movs	r0, #51	; 0x33
 800286e:	f7ff ff93 	bl	8002798 <lcd_command>
	lcd_command(0x32);
 8002872:	2032      	movs	r0, #50	; 0x32
 8002874:	f7ff ff90 	bl	8002798 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8002878:	2028      	movs	r0, #40	; 0x28
 800287a:	f7ff ff8d 	bl	8002798 <lcd_command>
	lcd_command(DISPLAY_ON);
 800287e:	200c      	movs	r0, #12
 8002880:	f7ff ff8a 	bl	8002798 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8002884:	2006      	movs	r0, #6
 8002886:	f7ff ff87 	bl	8002798 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 800288a:	2001      	movs	r0, #1
 800288c:	f7ff ff84 	bl	8002798 <lcd_command>
	HAL_Delay(2);
 8002890:	2002      	movs	r0, #2
 8002892:	f001 fc9f 	bl	80041d4 <HAL_Delay>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}

0800289a <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
	while(*str)
 80028a2:	e006      	b.n	80028b2 <lcd_string+0x18>
	{
		lcd_data(*str++);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ffa7 	bl	8002800 <lcd_data>
	while(*str)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f4      	bne.n	80028a4 <lcd_string+0xa>
	}
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	460a      	mov	r2, r1
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	019b      	lsls	r3, r3, #6
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	79bb      	ldrb	r3, [r7, #6]
 80028dc:	4313      	orrs	r3, r2
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff56 	bl	8002798 <lcd_command>
	return;
 80028ec:	bf00      	nop
}
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_SYSTICK_Handler>:
extern volatile int ultrasonic_on=1;

volatile int fnd1ms_counter = 0;  // fnd1ms

void HAL_SYSTICK_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
	t1ms_counter++; // 1ms timer
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <HAL_SYSTICK_Handler+0x24>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a06      	ldr	r2, [pc, #24]	; (8002918 <HAL_SYSTICK_Handler+0x24>)
 8002900:	6013      	str	r3, [r2, #0]
	fnd1ms_counter++;
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_SYSTICK_Handler+0x28>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_SYSTICK_Handler+0x28>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000c00 	.word	0x20000c00
 800291c:	20000c04 	.word	0x20000c04

08002920 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8002928:	1d39      	adds	r1, r7, #4
 800292a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292e:	2201      	movs	r2, #1
 8002930:	4803      	ldr	r0, [pc, #12]	; (8002940 <__io_putchar+0x20>)
 8002932:	f005 ff24 	bl	800877e <HAL_UART_Transmit>

  return ch;
 8002936:	687b      	ldr	r3, [r7, #4]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000660 	.word	0x20000660

08002944 <HAL_TIM_PeriodElapsedCallback>:
//----------  printf end ----------
// move from Driver/STM32F4xx HAL_Driver/stm32f4xx_hal_time.c to here
//enter here every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d109      	bne.n	800296a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++; //10ms timer counter
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800295e:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++; // ultrasonic trigger timer
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	4a06      	ldr	r2, [pc, #24]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002968:	6013      	str	r3, [r2, #0]
	}

}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40014400 	.word	0x40014400
 800297c:	20000bf8 	.word	0x20000bf8
 8002980:	20000bfc 	.word	0x20000bfc

08002984 <delay_us>:

void delay_us(unsigned long us)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0); // tim11 clear
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <delay_us+0x2c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2200      	movs	r2, #0
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8002994:	bf00      	nop
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <delay_us+0x2c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d8f9      	bhi.n	8002996 <delay_us+0x12>
		;
}
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	20000618 	.word	0x20000618

080029b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029b8:	f001 fb9a 	bl	80040f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029bc:	f000 f85e 	bl	8002a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029c0:	f000 fbf8 	bl	80031b4 <MX_GPIO_Init>
  MX_ETH_Init();
 80029c4:	f000 f8c6 	bl	8002b54 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80029c8:	f000 fb72 	bl	80030b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80029cc:	f000 fbc4 	bl	8003158 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80029d0:	f000 fb98 	bl	8003104 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80029d4:	f000 fb24 	bl	8003020 <MX_TIM10_Init>
  MX_TIM11_Init();
 80029d8:	f000 fb46 	bl	8003068 <MX_TIM11_Init>
  MX_TIM3_Init();
 80029dc:	f000 f9fc 	bl	8002dd8 <MX_TIM3_Init>
  MX_I2C1_Init();
 80029e0:	f000 f906 	bl	8002bf0 <MX_I2C1_Init>
  MX_TIM4_Init();
 80029e4:	f000 fa4c 	bl	8002e80 <MX_TIM4_Init>
  MX_TIM2_Init();
 80029e8:	f000 f99c 	bl	8002d24 <MX_TIM2_Init>
  MX_RTC_Init();
 80029ec:	f000 f940 	bl	8002c70 <MX_RTC_Init>
  MX_TIM5_Init();
 80029f0:	f000 fabc 	bl	8002f6c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1); // assign to RX INT
 80029f4:	2201      	movs	r2, #1
 80029f6:	4916      	ldr	r1, [pc, #88]	; (8002a50 <main+0x9c>)
 80029f8:	4816      	ldr	r0, [pc, #88]	; (8002a54 <main+0xa0>)
 80029fa:	f005 ff52 	bl	80088a2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // for BT assign to RX INT
 80029fe:	2201      	movs	r2, #1
 8002a00:	4915      	ldr	r1, [pc, #84]	; (8002a58 <main+0xa4>)
 8002a02:	4816      	ldr	r0, [pc, #88]	; (8002a5c <main+0xa8>)
 8002a04:	f005 ff4d 	bl	80088a2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);  // ADD_YGPARK_1011
 8002a08:	4815      	ldr	r0, [pc, #84]	; (8002a60 <main+0xac>)
 8002a0a:	f004 f98b 	bl	8006d24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);  // ADD_YGPARK_1011
 8002a0e:	4815      	ldr	r0, [pc, #84]	; (8002a64 <main+0xb0>)
 8002a10:	f004 f988 	bl	8006d24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);  //  for count pulse(rising edge & falling edge)
 8002a14:	2100      	movs	r1, #0
 8002a16:	4814      	ldr	r0, [pc, #80]	; (8002a68 <main+0xb4>)
 8002a18:	f004 fce2 	bl	80073e0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // for DC motor PWM control
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4813      	ldr	r0, [pc, #76]	; (8002a6c <main+0xb8>)
 8002a20:	f004 fb78 	bl	8007114 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);  // for DC servo motor PWM control
 8002a24:	2100      	movs	r1, #0
 8002a26:	4812      	ldr	r0, [pc, #72]	; (8002a70 <main+0xbc>)
 8002a28:	f004 fa3c 	bl	8006ea4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4); //PIEZO Buzzer
 8002a2c:	210c      	movs	r1, #12
 8002a2e:	4811      	ldr	r0, [pc, #68]	; (8002a74 <main+0xc0>)
 8002a30:	f004 fa38 	bl	8006ea4 <HAL_TIM_PWM_Start>


//  DHT11_Init();
  i2c_lcd_init();
 8002a34:	f7ff ff18 	bl	8002868 <i2c_lcd_init>
  FND4digit_off();
 8002a38:	f7ff fe4e 	bl	80026d8 <FND4digit_off>
  // DHT11_main();
  // i2c_lcd_main();
  // servo_motor_test_main();
  //buzzer_main();
//  fnd4digit_main();
printf("start !!!!\n");
 8002a3c:	480e      	ldr	r0, [pc, #56]	; (8002a78 <main+0xc4>)
 8002a3e:	f007 fa83 	bl	8009f48 <puts>
  while (1)
  {
//	  DHT11_processing();
//	  pc_command_processing();
//	  bt_command_processing();
	  ultrasonic_processing();
 8002a42:	f001 faa1 	bl	8003f88 <ultrasonic_processing>
//	  lcd_display_mode_select();
//	  set_time_button_ui();
//	  printf("9298\n");
//	  HAL_Delay(100);

	  mode_select();
 8002a46:	f7fe f99b 	bl	8000d80 <mode_select>
	fnd4digit_sec_clock();
 8002a4a:	f7ff fe61 	bl	8002710 <fnd4digit_sec_clock>
	  ultrasonic_processing();
 8002a4e:	e7f8      	b.n	8002a42 <main+0x8e>
 8002a50:	20000bf4 	.word	0x20000bf4
 8002a54:	20000660 	.word	0x20000660
 8002a58:	20000bf5 	.word	0x20000bf5
 8002a5c:	200006a4 	.word	0x200006a4
 8002a60:	200005d0 	.word	0x200005d0
 8002a64:	20000618 	.word	0x20000618
 8002a68:	200004f8 	.word	0x200004f8
 8002a6c:	20000540 	.word	0x20000540
 8002a70:	200004b0 	.word	0x200004b0
 8002a74:	20000588 	.word	0x20000588
 8002a78:	0800b30c 	.word	0x0800b30c

08002a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b094      	sub	sp, #80	; 0x50
 8002a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	2230      	movs	r2, #48	; 0x30
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f007 f9ce 	bl	8009e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <SystemClock_Config+0xd0>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4a28      	ldr	r2, [pc, #160]	; (8002b4c <SystemClock_Config+0xd0>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <SystemClock_Config+0xd0>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <SystemClock_Config+0xd4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <SystemClock_Config+0xd4>)
 8002ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <SystemClock_Config+0xd4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ad8:	2309      	movs	r3, #9
 8002ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002adc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002af0:	2304      	movs	r3, #4
 8002af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002af4:	23a8      	movs	r3, #168	; 0xa8
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002af8:	2302      	movs	r3, #2
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002afc:	2307      	movs	r3, #7
 8002afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b00:	f107 0320 	add.w	r3, r7, #32
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 f831 	bl	8005b6c <HAL_RCC_OscConfig>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002b10:	f000 fc94 	bl	800343c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b14:	230f      	movs	r3, #15
 8002b16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	2105      	movs	r1, #5
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 fa92 	bl	800605c <HAL_RCC_ClockConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002b3e:	f000 fc7d 	bl	800343c <Error_Handler>
  }
}
 8002b42:	bf00      	nop
 8002b44:	3750      	adds	r7, #80	; 0x50
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40007000 	.word	0x40007000

08002b54 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <MX_ETH_Init+0x84>)
 8002b5a:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <MX_ETH_Init+0x88>)
 8002b5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <MX_ETH_Init+0x8c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <MX_ETH_Init+0x8c>)
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <MX_ETH_Init+0x8c>)
 8002b6c:	22e1      	movs	r2, #225	; 0xe1
 8002b6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <MX_ETH_Init+0x8c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_ETH_Init+0x8c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <MX_ETH_Init+0x8c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <MX_ETH_Init+0x84>)
 8002b84:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <MX_ETH_Init+0x8c>)
 8002b86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <MX_ETH_Init+0x84>)
 8002b8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b8e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <MX_ETH_Init+0x84>)
 8002b92:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <MX_ETH_Init+0x90>)
 8002b94:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <MX_ETH_Init+0x84>)
 8002b98:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <MX_ETH_Init+0x94>)
 8002b9a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_ETH_Init+0x84>)
 8002b9e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002ba2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002ba4:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <MX_ETH_Init+0x84>)
 8002ba6:	f001 fcdd 	bl	8004564 <HAL_ETH_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002bb0:	f000 fc44 	bl	800343c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002bb4:	2238      	movs	r2, #56	; 0x38
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	480c      	ldr	r0, [pc, #48]	; (8002bec <MX_ETH_Init+0x98>)
 8002bba:	f007 f937 	bl	8009e2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <MX_ETH_Init+0x98>)
 8002bc0:	2221      	movs	r2, #33	; 0x21
 8002bc2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <MX_ETH_Init+0x98>)
 8002bc6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8002bca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <MX_ETH_Init+0x98>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000038c 	.word	0x2000038c
 8002bdc:	40028000 	.word	0x40028000
 8002be0:	20000c08 	.word	0x20000c08
 8002be4:	200002ec 	.word	0x200002ec
 8002be8:	2000024c 	.word	0x2000024c
 8002bec:	20000214 	.word	0x20000214

08002bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <MX_I2C1_Init+0x78>)
 8002bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <MX_I2C1_Init+0x7c>)
 8002bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c2e:	f002 f9b9 	bl	8004fa4 <HAL_I2C_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c38:	f000 fc00 	bl	800343c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c40:	f002 fdfb 	bl	800583a <HAL_I2CEx_ConfigAnalogFilter>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002c4a:	f000 fbf7 	bl	800343c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <MX_I2C1_Init+0x74>)
 8002c52:	f002 fe2e 	bl	80058b2 <HAL_I2CEx_ConfigDigitalFilter>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002c5c:	f000 fbee 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000043c 	.word	0x2000043c
 8002c68:	40005400 	.word	0x40005400
 8002c6c:	000186a0 	.word	0x000186a0

08002c70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002c84:	2300      	movs	r3, #0
 8002c86:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <MX_RTC_Init+0xac>)
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <MX_RTC_Init+0xb0>)
 8002c8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <MX_RTC_Init+0xac>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <MX_RTC_Init+0xac>)
 8002c96:	227f      	movs	r2, #127	; 0x7f
 8002c98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <MX_RTC_Init+0xac>)
 8002c9c:	22ff      	movs	r2, #255	; 0xff
 8002c9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <MX_RTC_Init+0xac>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <MX_RTC_Init+0xac>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <MX_RTC_Init+0xac>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cb2:	481a      	ldr	r0, [pc, #104]	; (8002d1c <MX_RTC_Init+0xac>)
 8002cb4:	f003 fdb2 	bl	800681c <HAL_RTC_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002cbe:	f000 fbbd 	bl	800343c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x6;
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480f      	ldr	r0, [pc, #60]	; (8002d1c <MX_RTC_Init+0xac>)
 8002cde:	f003 fe13 	bl	8006908 <HAL_RTC_SetTime>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002ce8:	f000 fba8 	bl	800343c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002cec:	2301      	movs	r3, #1
 8002cee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8002cf4:	2316      	movs	r3, #22
 8002cf6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8002cf8:	2323      	movs	r3, #35	; 0x23
 8002cfa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002cfc:	463b      	mov	r3, r7
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4619      	mov	r1, r3
 8002d02:	4806      	ldr	r0, [pc, #24]	; (8002d1c <MX_RTC_Init+0xac>)
 8002d04:	f003 fe9a 	bl	8006a3c <HAL_RTC_SetDate>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002d0e:	f000 fb95 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000490 	.word	0x20000490
 8002d20:	40002800 	.word	0x40002800

08002d24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2a:	f107 0320 	add.w	r3, r7, #32
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	615a      	str	r2, [r3, #20]
 8002d44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002d50:	f240 628f 	movw	r2, #1679	; 0x68f
 8002d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002d5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d70:	4818      	ldr	r0, [pc, #96]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002d72:	f004 f847 	bl	8006e04 <HAL_TIM_PWM_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002d7c:	f000 fb5e 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d88:	f107 0320 	add.w	r3, r7, #32
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4811      	ldr	r0, [pc, #68]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002d90:	f005 fc18 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002d9a:	f000 fb4f 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d9e:	2360      	movs	r3, #96	; 0x60
 8002da0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002da2:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002da6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	2200      	movs	r2, #0
 8002db4:	4619      	mov	r1, r3
 8002db6:	4807      	ldr	r0, [pc, #28]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002db8:	f004 fdde 	bl	8007978 <HAL_TIM_PWM_ConfigChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002dc2:	f000 fb3b 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002dc6:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <MX_TIM2_Init+0xb0>)
 8002dc8:	f000 fd8e 	bl	80038e8 <HAL_TIM_MspPostInit>

}
 8002dcc:	bf00      	nop
 8002dce:	3728      	adds	r7, #40	; 0x28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200004b0 	.word	0x200004b0

08002dd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dde:	f107 0310 	add.w	r3, r7, #16
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002de8:	463b      	mov	r3, r7
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002df6:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <MX_TIM3_Init+0xa4>)
 8002df8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002dfc:	2253      	movs	r2, #83	; 0x53
 8002dfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002e1a:	4817      	ldr	r0, [pc, #92]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002e1c:	f004 fa90 	bl	8007340 <HAL_TIM_IC_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e26:	f000 fb09 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	4619      	mov	r1, r3
 8002e38:	480f      	ldr	r0, [pc, #60]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002e3a:	f005 fbc3 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e44:	f000 fafa 	bl	800343c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002e48:	230a      	movs	r3, #10
 8002e4a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e58:	463b      	mov	r3, r7
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4806      	ldr	r0, [pc, #24]	; (8002e78 <MX_TIM3_Init+0xa0>)
 8002e60:	f004 fcee 	bl	8007840 <HAL_TIM_IC_ConfigChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002e6a:	f000 fae7 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200004f8 	.word	0x200004f8
 8002e7c:	40000400 	.word	0x40000400

08002e80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	; 0x38
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e94:	f107 0320 	add.w	r3, r7, #32
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
 8002eac:	615a      	str	r2, [r3, #20]
 8002eae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002eb2:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <MX_TIM4_Init+0xe8>)
 8002eb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002eb8:	f240 3247 	movw	r2, #839	; 0x347
 8002ebc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002ec6:	2263      	movs	r2, #99	; 0x63
 8002ec8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ed6:	4823      	ldr	r0, [pc, #140]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002ed8:	f003 fed5 	bl	8006c86 <HAL_TIM_Base_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002ee2:	f000 faab 	bl	800343c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	481c      	ldr	r0, [pc, #112]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002ef4:	f004 fe02 	bl	8007afc <HAL_TIM_ConfigClockSource>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002efe:	f000 fa9d 	bl	800343c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f02:	4818      	ldr	r0, [pc, #96]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002f04:	f003 ff7e 	bl	8006e04 <HAL_TIM_PWM_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002f0e:	f000 fa95 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f1a:	f107 0320 	add.w	r3, r7, #32
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4810      	ldr	r0, [pc, #64]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002f22:	f005 fb4f 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002f2c:	f000 fa86 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f30:	2360      	movs	r3, #96	; 0x60
 8002f32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 60-1;
 8002f34:	233b      	movs	r3, #59	; 0x3b
 8002f36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2200      	movs	r2, #0
 8002f44:	4619      	mov	r1, r3
 8002f46:	4807      	ldr	r0, [pc, #28]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002f48:	f004 fd16 	bl	8007978 <HAL_TIM_PWM_ConfigChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002f52:	f000 fa73 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f56:	4803      	ldr	r0, [pc, #12]	; (8002f64 <MX_TIM4_Init+0xe4>)
 8002f58:	f000 fcc6 	bl	80038e8 <HAL_TIM_MspPostInit>

}
 8002f5c:	bf00      	nop
 8002f5e:	3738      	adds	r7, #56	; 0x38
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000540 	.word	0x20000540
 8002f68:	40000800 	.word	0x40000800

08002f6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f72:	f107 0320 	add.w	r3, r7, #32
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
 8002f88:	611a      	str	r2, [r3, #16]
 8002f8a:	615a      	str	r2, [r3, #20]
 8002f8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f8e:	4b22      	ldr	r3, [pc, #136]	; (8003018 <MX_TIM5_Init+0xac>)
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <MX_TIM5_Init+0xb0>)
 8002f92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8002f94:	4b20      	ldr	r3, [pc, #128]	; (8003018 <MX_TIM5_Init+0xac>)
 8002f96:	2233      	movs	r2, #51	; 0x33
 8002f98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <MX_TIM5_Init+0xac>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <MX_TIM5_Init+0xac>)
 8002fa2:	f240 128f 	movw	r2, #399	; 0x18f
 8002fa6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <MX_TIM5_Init+0xac>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fae:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <MX_TIM5_Init+0xac>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002fb4:	4818      	ldr	r0, [pc, #96]	; (8003018 <MX_TIM5_Init+0xac>)
 8002fb6:	f003 ff25 	bl	8006e04 <HAL_TIM_PWM_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002fc0:	f000 fa3c 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fcc:	f107 0320 	add.w	r3, r7, #32
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4811      	ldr	r0, [pc, #68]	; (8003018 <MX_TIM5_Init+0xac>)
 8002fd4:	f005 faf6 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002fde:	f000 fa2d 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fe2:	2360      	movs	r3, #96	; 0x60
 8002fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	220c      	movs	r2, #12
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <MX_TIM5_Init+0xac>)
 8002ffa:	f004 fcbd 	bl	8007978 <HAL_TIM_PWM_ConfigChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003004:	f000 fa1a 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003008:	4803      	ldr	r0, [pc, #12]	; (8003018 <MX_TIM5_Init+0xac>)
 800300a:	f000 fc6d 	bl	80038e8 <HAL_TIM_MspPostInit>

}
 800300e:	bf00      	nop
 8003010:	3728      	adds	r7, #40	; 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000588 	.word	0x20000588
 800301c:	40000c00 	.word	0x40000c00

08003020 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <MX_TIM10_Init+0x40>)
 8003026:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <MX_TIM10_Init+0x44>)
 8003028:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <MX_TIM10_Init+0x40>)
 800302c:	22a7      	movs	r2, #167	; 0xa7
 800302e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <MX_TIM10_Init+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <MX_TIM10_Init+0x40>)
 8003038:	f242 720f 	movw	r2, #9999	; 0x270f
 800303c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <MX_TIM10_Init+0x40>)
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <MX_TIM10_Init+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800304a:	4805      	ldr	r0, [pc, #20]	; (8003060 <MX_TIM10_Init+0x40>)
 800304c:	f003 fe1b 	bl	8006c86 <HAL_TIM_Base_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003056:	f000 f9f1 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200005d0 	.word	0x200005d0
 8003064:	40014400 	.word	0x40014400

08003068 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <MX_TIM11_Init+0x40>)
 800306e:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <MX_TIM11_Init+0x44>)
 8003070:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <MX_TIM11_Init+0x40>)
 8003074:	22a7      	movs	r2, #167	; 0xa7
 8003076:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <MX_TIM11_Init+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <MX_TIM11_Init+0x40>)
 8003080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003084:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <MX_TIM11_Init+0x40>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <MX_TIM11_Init+0x40>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_TIM11_Init+0x40>)
 8003094:	f003 fdf7 	bl	8006c86 <HAL_TIM_Base_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800309e:	f000 f9cd 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000618 	.word	0x20000618
 80030ac:	40014800 	.word	0x40014800

080030b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <MX_USART3_UART_Init+0x50>)
 80030b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030d6:	220c      	movs	r2, #12
 80030d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <MX_USART3_UART_Init+0x4c>)
 80030e8:	f005 fafc 	bl	80086e4 <HAL_UART_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80030f2:	f000 f9a3 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000660 	.word	0x20000660
 8003100:	40004800 	.word	0x40004800

08003104 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <MX_USART6_UART_Init+0x50>)
 800310c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 8003110:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003114:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 800312a:	220c      	movs	r2, #12
 800312c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_USART6_UART_Init+0x4c>)
 800313c:	f005 fad2 	bl	80086e4 <HAL_UART_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003146:	f000 f979 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200006a4 	.word	0x200006a4
 8003154:	40011400 	.word	0x40011400

08003158 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800315e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003162:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003166:	2204      	movs	r2, #4
 8003168:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800316c:	2202      	movs	r2, #2
 800316e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003178:	2202      	movs	r2, #2
 800317a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800317e:	2201      	movs	r2, #1
 8003180:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003184:	2200      	movs	r2, #0
 8003186:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800318a:	2200      	movs	r2, #0
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003190:	2201      	movs	r2, #1
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800319a:	4805      	ldr	r0, [pc, #20]	; (80031b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800319c:	f002 fbc8 	bl	8005930 <HAL_PCD_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031a6:	f000 f949 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200006e8 	.word	0x200006e8

080031b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08e      	sub	sp, #56	; 0x38
 80031b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	60da      	str	r2, [r3, #12]
 80031c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
 80031ce:	4b93      	ldr	r3, [pc, #588]	; (800341c <MX_GPIO_Init+0x268>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a92      	ldr	r2, [pc, #584]	; (800341c <MX_GPIO_Init+0x268>)
 80031d4:	f043 0310 	orr.w	r3, r3, #16
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b90      	ldr	r3, [pc, #576]	; (800341c <MX_GPIO_Init+0x268>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	623b      	str	r3, [r7, #32]
 80031e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	4b8c      	ldr	r3, [pc, #560]	; (800341c <MX_GPIO_Init+0x268>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a8b      	ldr	r2, [pc, #556]	; (800341c <MX_GPIO_Init+0x268>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b89      	ldr	r3, [pc, #548]	; (800341c <MX_GPIO_Init+0x268>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	4b85      	ldr	r3, [pc, #532]	; (800341c <MX_GPIO_Init+0x268>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a84      	ldr	r2, [pc, #528]	; (800341c <MX_GPIO_Init+0x268>)
 800320c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b82      	ldr	r3, [pc, #520]	; (800341c <MX_GPIO_Init+0x268>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	4b7e      	ldr	r3, [pc, #504]	; (800341c <MX_GPIO_Init+0x268>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a7d      	ldr	r2, [pc, #500]	; (800341c <MX_GPIO_Init+0x268>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b7b      	ldr	r3, [pc, #492]	; (800341c <MX_GPIO_Init+0x268>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	4b77      	ldr	r3, [pc, #476]	; (800341c <MX_GPIO_Init+0x268>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a76      	ldr	r2, [pc, #472]	; (800341c <MX_GPIO_Init+0x268>)
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b74      	ldr	r3, [pc, #464]	; (800341c <MX_GPIO_Init+0x268>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b70      	ldr	r3, [pc, #448]	; (800341c <MX_GPIO_Init+0x268>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a6f      	ldr	r2, [pc, #444]	; (800341c <MX_GPIO_Init+0x268>)
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b6d      	ldr	r3, [pc, #436]	; (800341c <MX_GPIO_Init+0x268>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	4b69      	ldr	r3, [pc, #420]	; (800341c <MX_GPIO_Init+0x268>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a68      	ldr	r2, [pc, #416]	; (800341c <MX_GPIO_Init+0x268>)
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b66      	ldr	r3, [pc, #408]	; (800341c <MX_GPIO_Init+0x268>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	4b62      	ldr	r3, [pc, #392]	; (800341c <MX_GPIO_Init+0x268>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a61      	ldr	r2, [pc, #388]	; (800341c <MX_GPIO_Init+0x268>)
 8003298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <MX_GPIO_Init+0x268>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WM_LED1_Pin|WM_LED2_Pin|IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin
 80032aa:	2200      	movs	r2, #0
 80032ac:	f242 3114 	movw	r1, #8980	; 0x2314
 80032b0:	485b      	ldr	r0, [pc, #364]	; (8003420 <MX_GPIO_Init+0x26c>)
 80032b2:	f001 fe43 	bl	8004f3c <HAL_GPIO_WritePin>
                          |DCMOTOR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2101      	movs	r1, #1
 80032ba:	485a      	ldr	r0, [pc, #360]	; (8003424 <MX_GPIO_Init+0x270>)
 80032bc:	f001 fe3e 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80032c0:	2200      	movs	r2, #0
 80032c2:	f644 41ff 	movw	r1, #19711	; 0x4cff
 80032c6:	4858      	ldr	r0, [pc, #352]	; (8003428 <MX_GPIO_Init+0x274>)
 80032c8:	f001 fe38 	bl	8004f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 80032cc:	2200      	movs	r2, #0
 80032ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032d2:	4856      	ldr	r0, [pc, #344]	; (800342c <MX_GPIO_Init+0x278>)
 80032d4:	f001 fe32 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80032d8:	2200      	movs	r2, #0
 80032da:	2140      	movs	r1, #64	; 0x40
 80032dc:	4854      	ldr	r0, [pc, #336]	; (8003430 <MX_GPIO_Init+0x27c>)
 80032de:	f001 fe2d 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80032e2:	2200      	movs	r2, #0
 80032e4:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80032e8:	4852      	ldr	r0, [pc, #328]	; (8003434 <MX_GPIO_Init+0x280>)
 80032ea:	f001 fe27 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80032ee:	2200      	movs	r2, #0
 80032f0:	21ff      	movs	r1, #255	; 0xff
 80032f2:	4851      	ldr	r0, [pc, #324]	; (8003438 <MX_GPIO_Init+0x284>)
 80032f4:	f001 fe22 	bl	8004f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : WM_LED1_Pin WM_LED2_Pin IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin
                           DCMOTOR_LED_Pin */
  GPIO_InitStruct.Pin = WM_LED1_Pin|WM_LED2_Pin|IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin
 80032f8:	f242 3314 	movw	r3, #8980	; 0x2314
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMOTOR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fe:	2301      	movs	r3, #1
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003306:	2300      	movs	r3, #0
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800330a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330e:	4619      	mov	r1, r3
 8003310:	4843      	ldr	r0, [pc, #268]	; (8003420 <MX_GPIO_Init+0x26c>)
 8003312:	f001 fc4f 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800331c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332a:	4619      	mov	r1, r3
 800332c:	4841      	ldr	r0, [pc, #260]	; (8003434 <MX_GPIO_Init+0x280>)
 800332e:	f001 fc41 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8003332:	2301      	movs	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003336:	2301      	movs	r3, #1
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8003342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003346:	4619      	mov	r1, r3
 8003348:	4836      	ldr	r0, [pc, #216]	; (8003424 <MX_GPIO_Init+0x270>)
 800334a:	f001 fc33 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 PB2 PB10
                           PB11 LD3_Pin PB3 PB4
                           PB5 PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800334e:	f644 43ff 	movw	r3, #19711	; 0x4cff
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003354:	2301      	movs	r3, #1
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	2300      	movs	r3, #0
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003364:	4619      	mov	r1, r3
 8003366:	4830      	ldr	r0, [pc, #192]	; (8003428 <MX_GPIO_Init+0x274>)
 8003368:	f001 fc24 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 800336c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003372:	2301      	movs	r3, #1
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800337e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003382:	4619      	mov	r1, r3
 8003384:	4829      	ldr	r0, [pc, #164]	; (800342c <MX_GPIO_Init+0x278>)
 8003386:	f001 fc15 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 800338a:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003390:	2300      	movs	r3, #0
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339c:	4619      	mov	r1, r3
 800339e:	4820      	ldr	r0, [pc, #128]	; (8003420 <MX_GPIO_Init+0x26c>)
 80033a0:	f001 fc08 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80033a4:	2340      	movs	r3, #64	; 0x40
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	2300      	movs	r3, #0
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80033b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b8:	4619      	mov	r1, r3
 80033ba:	481d      	ldr	r0, [pc, #116]	; (8003430 <MX_GPIO_Init+0x27c>)
 80033bc:	f001 fbfa 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d0:	4619      	mov	r1, r3
 80033d2:	4817      	ldr	r0, [pc, #92]	; (8003430 <MX_GPIO_Init+0x27c>)
 80033d4:	f001 fbee 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80033d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033de:	2301      	movs	r3, #1
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ee:	4619      	mov	r1, r3
 80033f0:	4810      	ldr	r0, [pc, #64]	; (8003434 <MX_GPIO_Init+0x280>)
 80033f2:	f001 fbdf 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80033f6:	23ff      	movs	r3, #255	; 0xff
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340a:	4619      	mov	r1, r3
 800340c:	480a      	ldr	r0, [pc, #40]	; (8003438 <MX_GPIO_Init+0x284>)
 800340e:	f001 fbd1 	bl	8004bb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003412:	bf00      	nop
 8003414:	3738      	adds	r7, #56	; 0x38
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40021000 	.word	0x40021000
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800
 8003434:	40020800 	.word	0x40020800
 8003438:	40020c00 	.word	0x40020c00

0800343c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003440:	b672      	cpsid	i
}
 8003442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003444:	e7fe      	b.n	8003444 <Error_Handler+0x8>
	...

08003448 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_MspInit+0x4c>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_MspInit+0x4c>)
 8003458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800345c:	6453      	str	r3, [r2, #68]	; 0x44
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_MspInit+0x4c>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_MspInit+0x4c>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_MspInit+0x4c>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_MspInit+0x4c>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800

08003498 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08e      	sub	sp, #56	; 0x38
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a55      	ldr	r2, [pc, #340]	; (800360c <HAL_ETH_MspInit+0x174>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	f040 80a4 	bne.w	8003604 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80034bc:	2300      	movs	r3, #0
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	4b53      	ldr	r3, [pc, #332]	; (8003610 <HAL_ETH_MspInit+0x178>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	4a52      	ldr	r2, [pc, #328]	; (8003610 <HAL_ETH_MspInit+0x178>)
 80034c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034ca:	6313      	str	r3, [r2, #48]	; 0x30
 80034cc:	4b50      	ldr	r3, [pc, #320]	; (8003610 <HAL_ETH_MspInit+0x178>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_ETH_MspInit+0x178>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <HAL_ETH_MspInit+0x178>)
 80034e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034e6:	6313      	str	r3, [r2, #48]	; 0x30
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_ETH_MspInit+0x178>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	4b45      	ldr	r3, [pc, #276]	; (8003610 <HAL_ETH_MspInit+0x178>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	4a44      	ldr	r2, [pc, #272]	; (8003610 <HAL_ETH_MspInit+0x178>)
 80034fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003502:	6313      	str	r3, [r2, #48]	; 0x30
 8003504:	4b42      	ldr	r3, [pc, #264]	; (8003610 <HAL_ETH_MspInit+0x178>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <HAL_ETH_MspInit+0x178>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a3d      	ldr	r2, [pc, #244]	; (8003610 <HAL_ETH_MspInit+0x178>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_ETH_MspInit+0x178>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	4b37      	ldr	r3, [pc, #220]	; (8003610 <HAL_ETH_MspInit+0x178>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4a36      	ldr	r2, [pc, #216]	; (8003610 <HAL_ETH_MspInit+0x178>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6313      	str	r3, [r2, #48]	; 0x30
 800353c:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_ETH_MspInit+0x178>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <HAL_ETH_MspInit+0x178>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <HAL_ETH_MspInit+0x178>)
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	6313      	str	r3, [r2, #48]	; 0x30
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_ETH_MspInit+0x178>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	4b29      	ldr	r3, [pc, #164]	; (8003610 <HAL_ETH_MspInit+0x178>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a28      	ldr	r2, [pc, #160]	; (8003610 <HAL_ETH_MspInit+0x178>)
 800356e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003572:	6313      	str	r3, [r2, #48]	; 0x30
 8003574:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_ETH_MspInit+0x178>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003580:	2332      	movs	r3, #50	; 0x32
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003590:	230b      	movs	r3, #11
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003598:	4619      	mov	r1, r3
 800359a:	481e      	ldr	r0, [pc, #120]	; (8003614 <HAL_ETH_MspInit+0x17c>)
 800359c:	f001 fb0a 	bl	8004bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80035a0:	2386      	movs	r3, #134	; 0x86
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ac:	2303      	movs	r3, #3
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035b0:	230b      	movs	r3, #11
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b8:	4619      	mov	r1, r3
 80035ba:	4817      	ldr	r0, [pc, #92]	; (8003618 <HAL_ETH_MspInit+0x180>)
 80035bc:	f001 fafa 	bl	8004bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80035c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035d2:	230b      	movs	r3, #11
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80035d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035da:	4619      	mov	r1, r3
 80035dc:	480f      	ldr	r0, [pc, #60]	; (800361c <HAL_ETH_MspInit+0x184>)
 80035de:	f001 fae9 	bl	8004bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80035e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	2302      	movs	r3, #2
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f0:	2303      	movs	r3, #3
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035f4:	230b      	movs	r3, #11
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fc:	4619      	mov	r1, r3
 80035fe:	4808      	ldr	r0, [pc, #32]	; (8003620 <HAL_ETH_MspInit+0x188>)
 8003600:	f001 fad8 	bl	8004bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003604:	bf00      	nop
 8003606:	3738      	adds	r7, #56	; 0x38
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40028000 	.word	0x40028000
 8003610:	40023800 	.word	0x40023800
 8003614:	40020800 	.word	0x40020800
 8003618:	40020000 	.word	0x40020000
 800361c:	40020400 	.word	0x40020400
 8003620:	40021800 	.word	0x40021800

08003624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_I2C_MspInit+0x84>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d12c      	bne.n	80036a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <HAL_I2C_MspInit+0x88>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_I2C_MspInit+0x88>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_I2C_MspInit+0x88>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003662:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003668:	2312      	movs	r3, #18
 800366a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003670:	2303      	movs	r3, #3
 8003672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003674:	2304      	movs	r3, #4
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	4619      	mov	r1, r3
 800367e:	480c      	ldr	r0, [pc, #48]	; (80036b0 <HAL_I2C_MspInit+0x8c>)
 8003680:	f001 fa98 	bl	8004bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_I2C_MspInit+0x88>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	4a07      	ldr	r2, [pc, #28]	; (80036ac <HAL_I2C_MspInit+0x88>)
 800368e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003692:	6413      	str	r3, [r2, #64]	; 0x40
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_I2C_MspInit+0x88>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036a0:	bf00      	nop
 80036a2:	3728      	adds	r7, #40	; 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40005400 	.word	0x40005400
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40020400 	.word	0x40020400

080036b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08e      	sub	sp, #56	; 0x38
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036bc:	f107 0308 	add.w	r3, r7, #8
 80036c0:	2230      	movs	r2, #48	; 0x30
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f006 fbb1 	bl	8009e2c <memset>
  if(hrtc->Instance==RTC)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <HAL_RTC_MspInit+0x4c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d111      	bne.n	80036f8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036d4:	2320      	movs	r3, #32
 80036d6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80036d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036dc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 feda 	bl	800649c <HAL_RCCEx_PeriphCLKConfig>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80036ee:	f7ff fea5 	bl	800343c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <HAL_RTC_MspInit+0x50>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036f8:	bf00      	nop
 80036fa:	3738      	adds	r7, #56	; 0x38
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40002800 	.word	0x40002800
 8003704:	42470e3c 	.word	0x42470e3c

08003708 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_TIM_PWM_MspInit+0x70>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <HAL_TIM_PWM_MspInit+0x70>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HAL_TIM_PWM_MspInit+0x70>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003736:	e01a      	b.n	800376e <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM5)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_TIM_PWM_MspInit+0x74>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d115      	bne.n	800376e <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_TIM_PWM_MspInit+0x70>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <HAL_TIM_PWM_MspInit+0x70>)
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_TIM_PWM_MspInit+0x70>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	2100      	movs	r1, #0
 8003762:	2032      	movs	r0, #50	; 0x32
 8003764:	f000 fe35 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003768:	2032      	movs	r0, #50	; 0x32
 800376a:	f000 fe4e 	bl	800440a <HAL_NVIC_EnableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	40000c00 	.word	0x40000c00

08003780 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_TIM_IC_MspInit+0x94>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d133      	bne.n	800380a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_TIM_IC_MspInit+0x98>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIM_IC_MspInit+0x98>)
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_TIM_IC_MspInit+0x98>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_TIM_IC_MspInit+0x98>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_TIM_IC_MspInit+0x98>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_TIM_IC_MspInit+0x98>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80037da:	2340      	movs	r3, #64	; 0x40
 80037dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ea:	2302      	movs	r3, #2
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80037ee:	f107 0314 	add.w	r3, r7, #20
 80037f2:	4619      	mov	r1, r3
 80037f4:	4809      	ldr	r0, [pc, #36]	; (800381c <HAL_TIM_IC_MspInit+0x9c>)
 80037f6:	f001 f9dd 	bl	8004bb4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	201d      	movs	r0, #29
 8003800:	f000 fde7 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003804:	201d      	movs	r0, #29
 8003806:	f000 fe00 	bl	800440a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40000400 	.word	0x40000400
 8003818:	40023800 	.word	0x40023800
 800381c:	40020000 	.word	0x40020000

08003820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <HAL_TIM_Base_MspInit+0xb8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d116      	bne.n	8003860 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a28      	ldr	r2, [pc, #160]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	2100      	movs	r1, #0
 8003852:	201e      	movs	r0, #30
 8003854:	f000 fdbd 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003858:	201e      	movs	r0, #30
 800385a:	f000 fdd6 	bl	800440a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800385e:	e036      	b.n	80038ce <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <HAL_TIM_Base_MspInit+0xc0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d116      	bne.n	8003898 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 8003874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003878:	6453      	str	r3, [r2, #68]	; 0x44
 800387a:	4b18      	ldr	r3, [pc, #96]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	2019      	movs	r0, #25
 800388c:	f000 fda1 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003890:	2019      	movs	r0, #25
 8003892:	f000 fdba 	bl	800440a <HAL_NVIC_EnableIRQ>
}
 8003896:	e01a      	b.n	80038ce <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <HAL_TIM_Base_MspInit+0xc4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d115      	bne.n	80038ce <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 80038ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_TIM_Base_MspInit+0xbc>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	201a      	movs	r0, #26
 80038c4:	f000 fd85 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80038c8:	201a      	movs	r0, #26
 80038ca:	f000 fd9e 	bl	800440a <HAL_NVIC_EnableIRQ>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800

080038e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d11e      	bne.n	8003948 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8003926:	2320      	movs	r3, #32
 8003928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392a:	2302      	movs	r3, #2
 800392c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003936:	2301      	movs	r3, #1
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	4619      	mov	r1, r3
 8003940:	4828      	ldr	r0, [pc, #160]	; (80039e4 <HAL_TIM_MspPostInit+0xfc>)
 8003942:	f001 f937 	bl	8004bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003946:	e047      	b.n	80039d8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <HAL_TIM_MspPostInit+0x100>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d11f      	bne.n	8003992 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a21      	ldr	r2, [pc, #132]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800396e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397c:	2300      	movs	r3, #0
 800397e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003980:	2302      	movs	r3, #2
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	4619      	mov	r1, r3
 800398a:	4818      	ldr	r0, [pc, #96]	; (80039ec <HAL_TIM_MspPostInit+0x104>)
 800398c:	f001 f912 	bl	8004bb4 <HAL_GPIO_Init>
}
 8003990:	e022      	b.n	80039d8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <HAL_TIM_MspPostInit+0x108>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d11d      	bne.n	80039d8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6313      	str	r3, [r2, #48]	; 0x30
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_TIM_MspPostInit+0xf8>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039b8:	2308      	movs	r3, #8
 80039ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	2300      	movs	r3, #0
 80039c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80039c8:	2302      	movs	r3, #2
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	4619      	mov	r1, r3
 80039d2:	4804      	ldr	r0, [pc, #16]	; (80039e4 <HAL_TIM_MspPostInit+0xfc>)
 80039d4:	f001 f8ee 	bl	8004bb4 <HAL_GPIO_Init>
}
 80039d8:	bf00      	nop
 80039da:	3728      	adds	r7, #40	; 0x28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40000800 	.word	0x40000800
 80039ec:	40020c00 	.word	0x40020c00
 80039f0:	40000c00 	.word	0x40000c00

080039f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08c      	sub	sp, #48	; 0x30
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 031c 	add.w	r3, r7, #28
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3a      	ldr	r2, [pc, #232]	; (8003afc <HAL_UART_MspInit+0x108>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d135      	bne.n	8003a82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a38      	ldr	r2, [pc, #224]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a3c:	f043 0308 	orr.w	r3, r3, #8
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a60:	2307      	movs	r3, #7
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4826      	ldr	r0, [pc, #152]	; (8003b04 <HAL_UART_MspInit+0x110>)
 8003a6c:	f001 f8a2 	bl	8004bb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a70:	2200      	movs	r2, #0
 8003a72:	2100      	movs	r1, #0
 8003a74:	2027      	movs	r0, #39	; 0x27
 8003a76:	f000 fcac 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a7a:	2027      	movs	r0, #39	; 0x27
 8003a7c:	f000 fcc5 	bl	800440a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a80:	e038      	b.n	8003af4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <HAL_UART_MspInit+0x114>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d133      	bne.n	8003af4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a96:	f043 0320 	orr.w	r3, r3, #32
 8003a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003ab2:	f043 0304 	orr.w	r3, r3, #4
 8003ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_UART_MspInit+0x10c>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ac4:	23c0      	movs	r3, #192	; 0xc0
 8003ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad8:	f107 031c 	add.w	r3, r7, #28
 8003adc:	4619      	mov	r1, r3
 8003ade:	480b      	ldr	r0, [pc, #44]	; (8003b0c <HAL_UART_MspInit+0x118>)
 8003ae0:	f001 f868 	bl	8004bb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2047      	movs	r0, #71	; 0x47
 8003aea:	f000 fc72 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003aee:	2047      	movs	r0, #71	; 0x47
 8003af0:	f000 fc8b 	bl	800440a <HAL_NVIC_EnableIRQ>
}
 8003af4:	bf00      	nop
 8003af6:	3730      	adds	r7, #48	; 0x30
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40004800 	.word	0x40004800
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40020c00 	.word	0x40020c00
 8003b08:	40011400 	.word	0x40011400
 8003b0c:	40020800 	.word	0x40020800

08003b10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b30:	d13f      	bne.n	8003bb2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <HAL_PCD_MspInit+0xac>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <HAL_PCD_MspInit+0xac>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <HAL_PCD_MspInit+0xac>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003b4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b60:	230a      	movs	r3, #10
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4815      	ldr	r0, [pc, #84]	; (8003bc0 <HAL_PCD_MspInit+0xb0>)
 8003b6c:	f001 f822 	bl	8004bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003b7e:	f107 0314 	add.w	r3, r7, #20
 8003b82:	4619      	mov	r1, r3
 8003b84:	480e      	ldr	r0, [pc, #56]	; (8003bc0 <HAL_PCD_MspInit+0xb0>)
 8003b86:	f001 f815 	bl	8004bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_PCD_MspInit+0xac>)
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	4a0b      	ldr	r2, [pc, #44]	; (8003bbc <HAL_PCD_MspInit+0xac>)
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	6353      	str	r3, [r2, #52]	; 0x34
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_PCD_MspInit+0xac>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <HAL_PCD_MspInit+0xac>)
 8003ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_PCD_MspInit+0xac>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003bb2:	bf00      	nop
 8003bb4:	3728      	adds	r7, #40	; 0x28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020000 	.word	0x40020000

08003bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc8:	e7fe      	b.n	8003bc8 <NMI_Handler+0x4>

08003bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bce:	e7fe      	b.n	8003bce <HardFault_Handler+0x4>

08003bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd4:	e7fe      	b.n	8003bd4 <MemManage_Handler+0x4>

08003bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bda:	e7fe      	b.n	8003bda <BusFault_Handler+0x4>

08003bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be0:	e7fe      	b.n	8003be0 <UsageFault_Handler+0x4>

08003be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c10:	f000 fac0 	bl	8004194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_YGPARK_231006
 8003c14:	f7fe fe6e 	bl	80028f4 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c22:	f003 fd05 	bl	8007630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200005d0 	.word	0x200005d0

08003c30 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003c36:	f003 fcfb 	bl	8007630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000618 	.word	0x20000618

08003c44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <TIM3_IRQHandler+0x10>)
 8003c4a:	f003 fcf1 	bl	8007630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200004f8 	.word	0x200004f8

08003c58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <TIM4_IRQHandler+0x10>)
 8003c5e:	f003 fce7 	bl	8007630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000540 	.word	0x20000540

08003c6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <USART3_IRQHandler+0x10>)
 8003c72:	f004 fe47 	bl	8008904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000660 	.word	0x20000660

08003c80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003c84:	4802      	ldr	r0, [pc, #8]	; (8003c90 <TIM5_IRQHandler+0x10>)
 8003c86:	f003 fcd3 	bl	8007630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000588 	.word	0x20000588

08003c94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c98:	4802      	ldr	r0, [pc, #8]	; (8003ca4 <USART6_IRQHandler+0x10>)
 8003c9a:	f004 fe33 	bl	8008904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200006a4 	.word	0x200006a4

08003ca8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e00a      	b.n	8003cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cba:	f3af 8000 	nop.w
 8003cbe:	4601      	mov	r1, r0
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	60ba      	str	r2, [r7, #8]
 8003cc6:	b2ca      	uxtb	r2, r1
 8003cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	dbf0      	blt.n	8003cba <_read+0x12>
  }

  return len;
 8003cd8:	687b      	ldr	r3, [r7, #4]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	e009      	b.n	8003d08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	60ba      	str	r2, [r7, #8]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fe0f 	bl	8002920 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3301      	adds	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dbf1      	blt.n	8003cf4 <_write+0x12>
  }
  return len;
 8003d10:	687b      	ldr	r3, [r7, #4]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_close>:

int _close(int file)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d42:	605a      	str	r2, [r3, #4]
  return 0;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_isatty>:

int _isatty(int file)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d5a:	2301      	movs	r3, #1
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d8c:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <_sbrk+0x5c>)
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <_sbrk+0x60>)
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <_sbrk+0x64>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <_sbrk+0x64>)
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <_sbrk+0x68>)
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <_sbrk+0x64>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d207      	bcs.n	8003dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003db4:	f006 f810 	bl	8009dd8 <__errno>
 8003db8:	4603      	mov	r3, r0
 8003dba:	220c      	movs	r2, #12
 8003dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	e009      	b.n	8003dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <_sbrk+0x64>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <_sbrk+0x64>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <_sbrk+0x64>)
 8003dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20030000 	.word	0x20030000
 8003de4:	00000400 	.word	0x00000400
 8003de8:	20000c10 	.word	0x20000c10
 8003dec:	20000ca0 	.word	0x20000ca0

08003df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <SystemInit+0x20>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <SystemInit+0x20>)
 8003dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <HAL_UART_RxCpltCallback>:
volatile int bt_rx_index = 0; // rx_buff의 save위치
volatile int bt_newline_detect_flag = 0;  //  bt_new line을 만났을때의 indicator 예) ledallon\n


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]


	if(huart == &huart3)  //  comport master와 연결된 uart
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a32      	ldr	r2, [pc, #200]	; (8003ee8 <HAL_UART_RxCpltCallback+0xd4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d12c      	bne.n	8003e7e <HAL_UART_RxCpltCallback+0x6a>
	{
		if(rx_index < COMMAND_LENGTH)  //  현재까지 돌아온 byte가 40byte를 넘지 않으면
 8003e24:	4b31      	ldr	r3, [pc, #196]	; (8003eec <HAL_UART_RxCpltCallback+0xd8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b27      	cmp	r3, #39	; 0x27
 8003e2a:	dc1d      	bgt.n	8003e68 <HAL_UART_RxCpltCallback+0x54>
			{
				if(rx_data == '\n' || rx_data == '\r')
 8003e2c:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <HAL_UART_RxCpltCallback+0xdc>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b0a      	cmp	r3, #10
 8003e32:	d003      	beq.n	8003e3c <HAL_UART_RxCpltCallback+0x28>
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HAL_UART_RxCpltCallback+0xdc>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b0d      	cmp	r3, #13
 8003e3a:	d10b      	bne.n	8003e54 <HAL_UART_RxCpltCallback+0x40>
				{
					rx_buff[rx_index] = 0; // '\0'
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_UART_RxCpltCallback+0xd8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2c      	ldr	r2, [pc, #176]	; (8003ef4 <HAL_UART_RxCpltCallback+0xe0>)
 8003e42:	2100      	movs	r1, #0
 8003e44:	54d1      	strb	r1, [r2, r3]
					newline_detect_flag = 1;
 8003e46:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_UART_RxCpltCallback+0xe4>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
					rx_index = 0;  // 다음 message 저장을 위해서 rx_index값을 0으로 한다.
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <HAL_UART_RxCpltCallback+0xd8>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e00f      	b.n	8003e74 <HAL_UART_RxCpltCallback+0x60>
				}
				else
				{
					rx_buff[rx_index++] = rx_data;
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <HAL_UART_RxCpltCallback+0xd8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	4924      	ldr	r1, [pc, #144]	; (8003eec <HAL_UART_RxCpltCallback+0xd8>)
 8003e5c:	600a      	str	r2, [r1, #0]
 8003e5e:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <HAL_UART_RxCpltCallback+0xdc>)
 8003e60:	7811      	ldrb	r1, [r2, #0]
 8003e62:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_UART_RxCpltCallback+0xe0>)
 8003e64:	54d1      	strb	r1, [r2, r3]
 8003e66:	e005      	b.n	8003e74 <HAL_UART_RxCpltCallback+0x60>
				}

			}
		else
		{
			rx_index = 0;
 8003e68:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_UART_RxCpltCallback+0xd8>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8003e6e:	4823      	ldr	r0, [pc, #140]	; (8003efc <HAL_UART_RxCpltCallback+0xe8>)
 8003e70:	f006 f86a 	bl	8009f48 <puts>
		}
		//주의 : 반드시 HAL_UART Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8003e74:	2201      	movs	r2, #1
 8003e76:	491e      	ldr	r1, [pc, #120]	; (8003ef0 <HAL_UART_RxCpltCallback+0xdc>)
 8003e78:	481b      	ldr	r0, [pc, #108]	; (8003ee8 <HAL_UART_RxCpltCallback+0xd4>)
 8003e7a:	f004 fd12 	bl	80088a2 <HAL_UART_Receive_IT>
	}

	if(huart == &huart6)  //  comport master와 연결된 uart
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_UART_RxCpltCallback+0xec>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d12c      	bne.n	8003ee0 <HAL_UART_RxCpltCallback+0xcc>
		{
			if(bt_rx_index < COMMAND_LENGTH)  //  현재까지 돌아온 byte가 40byte를 넘지 않으면
 8003e86:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <HAL_UART_RxCpltCallback+0xf0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b27      	cmp	r3, #39	; 0x27
 8003e8c:	dc1d      	bgt.n	8003eca <HAL_UART_RxCpltCallback+0xb6>
				{
					if(bt_rx_data == '\n' || bt_rx_data == '\r')
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <HAL_UART_RxCpltCallback+0xf4>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b0a      	cmp	r3, #10
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_RxCpltCallback+0x8a>
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_UART_RxCpltCallback+0xf4>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b0d      	cmp	r3, #13
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_UART_RxCpltCallback+0xa2>
					{
						bt_rx_buff[bt_rx_index] = 0; // '\0'
 8003e9e:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_UART_RxCpltCallback+0xf0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <HAL_UART_RxCpltCallback+0xf8>)
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	54d1      	strb	r1, [r2, r3]
						bt_newline_detect_flag = 1;
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_UART_RxCpltCallback+0xfc>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
						bt_rx_index = 0;  // 다음 message 저장을 위해서 bt_rx_index값을 0으로 한다.
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_UART_RxCpltCallback+0xf0>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e00f      	b.n	8003ed6 <HAL_UART_RxCpltCallback+0xc2>
					}
					else
					{
						bt_rx_buff[bt_rx_index++] = bt_rx_data;
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_UART_RxCpltCallback+0xf0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	4911      	ldr	r1, [pc, #68]	; (8003f04 <HAL_UART_RxCpltCallback+0xf0>)
 8003ebe:	600a      	str	r2, [r1, #0]
 8003ec0:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <HAL_UART_RxCpltCallback+0xf4>)
 8003ec2:	7811      	ldrb	r1, [r2, #0]
 8003ec4:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <HAL_UART_RxCpltCallback+0xf8>)
 8003ec6:	54d1      	strb	r1, [r2, r3]
 8003ec8:	e005      	b.n	8003ed6 <HAL_UART_RxCpltCallback+0xc2>
					}

				}
			else
			{
				bt_rx_index = 0;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <HAL_UART_RxCpltCallback+0xf0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
				printf("BT Message Overflow !!!!\n");
 8003ed0:	4810      	ldr	r0, [pc, #64]	; (8003f14 <HAL_UART_RxCpltCallback+0x100>)
 8003ed2:	f006 f839 	bl	8009f48 <puts>
			}
			//주의 : 반드시 HAL_UART Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
			HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	490b      	ldr	r1, [pc, #44]	; (8003f08 <HAL_UART_RxCpltCallback+0xf4>)
 8003eda:	4809      	ldr	r0, [pc, #36]	; (8003f00 <HAL_UART_RxCpltCallback+0xec>)
 8003edc:	f004 fce1 	bl	80088a2 <HAL_UART_Receive_IT>
		}

}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000660 	.word	0x20000660
 8003eec:	20000c14 	.word	0x20000c14
 8003ef0:	20000bf4 	.word	0x20000bf4
 8003ef4:	20000c18 	.word	0x20000c18
 8003ef8:	20000c40 	.word	0x20000c40
 8003efc:	0800b318 	.word	0x0800b318
 8003f00:	200006a4 	.word	0x200006a4
 8003f04:	20000c6c 	.word	0x20000c6c
 8003f08:	20000bf5 	.word	0x20000bf5
 8003f0c:	20000c44 	.word	0x20000c44
 8003f10:	20000c70 	.word	0x20000c70
 8003f14:	0800b330 	.word	0x0800b330

08003f18 <HAL_TIM_IC_CaptureCallback>:

volatile uint8_t is_first_capture = 0; //0:상승에지  1.하강에지
volatile int distance; // 거리를 측정한 철스 갯수를 저장하는 변수
volatile int ic_cpt_finish_flag = 0; // 총음파 거리 측정 완료 indicater
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM3)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d11f      	bne.n	8003f6a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if(is_first_capture ==0)  // 상승에지
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0); // clear H/W counter
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1; // 상승에지를 만났다는 flag변수 indicator를 set
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
			ic_cpt_finish_flag = 1;
		}
	}

}
 8003f42:	e012      	b.n	8003f6a <HAL_TIM_IC_CaptureCallback+0x52>
		else if(is_first_capture == 1) // 하강에지
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10d      	bne.n	8003f6a <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture = 0; // 다음 echo 펄수를 vount 파기 위해 변수
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8003f54:	2100      	movs	r1, #0
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f003 fe98 	bl	8007c8c <HAL_TIM_ReadCapturedValue>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_TIM_IC_CaptureCallback+0x64>)
 8003f62:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag = 1;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_TIM_IC_CaptureCallback+0x68>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40000400 	.word	0x40000400
 8003f78:	20000c78 	.word	0x20000c78
 8003f7c:	20000c7c 	.word	0x20000c7c
 8003f80:	20000c80 	.word	0x20000c80
 8003f84:	00000000 	.word	0x00000000

08003f88 <ultrasonic_processing>:
int dis; // 거리를 측정한 펄스 갯수를 저장하는 변수
void ultrasonic_processing(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0

	char lcd_buff[20];

	if(TIM10_10ms_ultrasonic >= 100) // 1초
 8003f8e:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <ultrasonic_processing+0xb8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b63      	cmp	r3, #99	; 0x63
 8003f94:	dd49      	ble.n	800402a <ultrasonic_processing+0xa2>
	{
		TIM10_10ms_ultrasonic = 0;
 8003f96:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <ultrasonic_processing+0xb8>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
		make_trigger();
 8003f9c:	f000 f860 	bl	8004060 <make_trigger>
		if(ic_cpt_finish_flag) // 초음파 측정이 완료 되었으면 if(ic_cpt_finish_flag >= 1)
 8003fa0:	4b28      	ldr	r3, [pc, #160]	; (8004044 <ultrasonic_processing+0xbc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d040      	beq.n	800402a <ultrasonic_processing+0xa2>
		{
			ic_cpt_finish_flag = 0;
 8003fa8:	4b26      	ldr	r3, [pc, #152]	; (8004044 <ultrasonic_processing+0xbc>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
			dis = distance;
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <ultrasonic_processing+0xc0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a26      	ldr	r2, [pc, #152]	; (800404c <ultrasonic_processing+0xc4>)
 8003fb4:	6013      	str	r3, [r2, #0]
			dis = dis * 0.034 / 2;  // 1us가 0.034cm를 이동
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <ultrasonic_processing+0xc4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fc faba 	bl	8000534 <__aeabi_i2d>
 8003fc0:	a31d      	add	r3, pc, #116	; (adr r3, 8004038 <ultrasonic_processing+0xb0>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	f7fc fb1f 	bl	8000608 <__aeabi_dmul>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fda:	f7fc fc3f 	bl	800085c <__aeabi_ddiv>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f7fc fd21 	bl	8000a2c <__aeabi_d2iz>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <ultrasonic_processing+0xc4>)
 8003fee:	6013      	str	r3, [r2, #0]
			//왕복거리를 리턴해 주기 때문에 /2를 해주는 것이다.
			if (lcd_display_mode_flag == 2)
 8003ff0:	4b17      	ldr	r3, [pc, #92]	; (8004050 <ultrasonic_processing+0xc8>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d10e      	bne.n	8004016 <ultrasonic_processing+0x8e>
			{
				sprintf(lcd_buff, "dis: %dcm", dis);
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <ultrasonic_processing+0xc4>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	4915      	ldr	r1, [pc, #84]	; (8004054 <ultrasonic_processing+0xcc>)
 8004000:	4618      	mov	r0, r3
 8004002:	f005 ffa9 	bl	8009f58 <siprintf>
				move_cursor(0,0);
 8004006:	2100      	movs	r1, #0
 8004008:	2000      	movs	r0, #0
 800400a:	f7fe fc5b 	bl	80028c4 <move_cursor>
				lcd_string(lcd_buff);
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fc42 	bl	800289a <lcd_string>
			}
			if(ultra_on)
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <ultrasonic_processing+0xd0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <ultrasonic_processing+0xa2>
			{
				printf("dis: %dcm\n",dis);
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <ultrasonic_processing+0xc4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	480d      	ldr	r0, [pc, #52]	; (800405c <ultrasonic_processing+0xd4>)
 8004026:	f005 ff09 	bl	8009e3c <iprintf>
			}
		}
	}
}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	f3af 8000 	nop.w
 8004038:	b020c49c 	.word	0xb020c49c
 800403c:	3fa16872 	.word	0x3fa16872
 8004040:	20000bfc 	.word	0x20000bfc
 8004044:	20000c80 	.word	0x20000c80
 8004048:	20000c7c 	.word	0x20000c7c
 800404c:	20000c84 	.word	0x20000c84
 8004050:	20000204 	.word	0x20000204
 8004054:	0800b3e8 	.word	0x0800b3e8
 8004058:	20000c74 	.word	0x20000c74
 800405c:	0800b3f4 	.word	0x0800b3f4

08004060 <make_trigger>:

void make_trigger()
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8004064:	2200      	movs	r2, #0
 8004066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800406a:	480b      	ldr	r0, [pc, #44]	; (8004098 <make_trigger+0x38>)
 800406c:	f000 ff66 	bl	8004f3c <HAL_GPIO_WritePin>
	delay_us(2);
 8004070:	2002      	movs	r0, #2
 8004072:	f7fe fc87 	bl	8002984 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 8004076:	2201      	movs	r2, #1
 8004078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800407c:	4806      	ldr	r0, [pc, #24]	; (8004098 <make_trigger+0x38>)
 800407e:	f000 ff5d 	bl	8004f3c <HAL_GPIO_WritePin>
	delay_us(10);
 8004082:	200a      	movs	r0, #10
 8004084:	f7fe fc7e 	bl	8002984 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8004088:	2200      	movs	r2, #0
 800408a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800408e:	4802      	ldr	r0, [pc, #8]	; (8004098 <make_trigger+0x38>)
 8004090:	f000 ff54 	bl	8004f3c <HAL_GPIO_WritePin>
}
 8004094:	bf00      	nop
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40021400 	.word	0x40021400

0800409c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800409c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040a0:	480d      	ldr	r0, [pc, #52]	; (80040d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040a2:	490e      	ldr	r1, [pc, #56]	; (80040dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040a4:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040b8:	4c0b      	ldr	r4, [pc, #44]	; (80040e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040c6:	f7ff fe93 	bl	8003df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ca:	f005 fe8b 	bl	8009de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ce:	f7fe fc71 	bl	80029b4 <main>
  bx  lr    
 80040d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80040d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80040d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040dc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80040e0:	0800b4c0 	.word	0x0800b4c0
  ldr r2, =_sbss
 80040e4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80040e8:	20000c9c 	.word	0x20000c9c

080040ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040ec:	e7fe      	b.n	80040ec <ADC_IRQHandler>
	...

080040f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_Init+0x40>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <HAL_Init+0x40>)
 80040fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_Init+0x40>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <HAL_Init+0x40>)
 8004106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_Init+0x40>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a07      	ldr	r2, [pc, #28]	; (8004130 <HAL_Init+0x40>)
 8004112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004118:	2003      	movs	r0, #3
 800411a:	f000 f94f 	bl	80043bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800411e:	2000      	movs	r0, #0
 8004120:	f000 f808 	bl	8004134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004124:	f7ff f990 	bl	8003448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00

08004134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_InitTick+0x54>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_InitTick+0x58>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	4619      	mov	r1, r3
 8004146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800414a:	fbb3 f3f1 	udiv	r3, r3, r1
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f967 	bl	8004426 <HAL_SYSTICK_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e00e      	b.n	8004180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	d80a      	bhi.n	800417e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004168:	2200      	movs	r2, #0
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	f000 f92f 	bl	80043d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004174:	4a06      	ldr	r2, [pc, #24]	; (8004190 <HAL_InitTick+0x5c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20000160 	.word	0x20000160
 800418c:	20000168 	.word	0x20000168
 8004190:	20000164 	.word	0x20000164

08004194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_IncTick+0x20>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_IncTick+0x24>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <HAL_IncTick+0x24>)
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000168 	.word	0x20000168
 80041b8:	20000c88 	.word	0x20000c88

080041bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return uwTick;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_GetTick+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000c88 	.word	0x20000c88

080041d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041dc:	f7ff ffee 	bl	80041bc <HAL_GetTick>
 80041e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d005      	beq.n	80041fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_Delay+0x44>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041fa:	bf00      	nop
 80041fc:	f7ff ffde 	bl	80041bc <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	429a      	cmp	r2, r3
 800420a:	d8f7      	bhi.n	80041fc <HAL_Delay+0x28>
  {
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000168 	.word	0x20000168

0800421c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <__NVIC_SetPriorityGrouping+0x44>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004238:	4013      	ands	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424e:	4a04      	ldr	r2, [pc, #16]	; (8004260 <__NVIC_SetPriorityGrouping+0x44>)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	60d3      	str	r3, [r2, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <__NVIC_GetPriorityGrouping+0x18>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 0307 	and.w	r3, r3, #7
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	2b00      	cmp	r3, #0
 8004290:	db0b      	blt.n	80042aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	4907      	ldr	r1, [pc, #28]	; (80042b8 <__NVIC_EnableIRQ+0x38>)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2001      	movs	r0, #1
 80042a2:	fa00 f202 	lsl.w	r2, r0, r2
 80042a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000e100 	.word	0xe000e100

080042bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	db0a      	blt.n	80042e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	490c      	ldr	r1, [pc, #48]	; (8004308 <__NVIC_SetPriority+0x4c>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	440b      	add	r3, r1
 80042e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e4:	e00a      	b.n	80042fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	4908      	ldr	r1, [pc, #32]	; (800430c <__NVIC_SetPriority+0x50>)
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	3b04      	subs	r3, #4
 80042f4:	0112      	lsls	r2, r2, #4
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	440b      	add	r3, r1
 80042fa:	761a      	strb	r2, [r3, #24]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000e100 	.word	0xe000e100
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f1c3 0307 	rsb	r3, r3, #7
 800432a:	2b04      	cmp	r3, #4
 800432c:	bf28      	it	cs
 800432e:	2304      	movcs	r3, #4
 8004330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3304      	adds	r3, #4
 8004336:	2b06      	cmp	r3, #6
 8004338:	d902      	bls.n	8004340 <NVIC_EncodePriority+0x30>
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3b03      	subs	r3, #3
 800433e:	e000      	b.n	8004342 <NVIC_EncodePriority+0x32>
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004344:	f04f 32ff 	mov.w	r2, #4294967295
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43da      	mvns	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	401a      	ands	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004358:	f04f 31ff 	mov.w	r1, #4294967295
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	43d9      	mvns	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	4313      	orrs	r3, r2
         );
}
 800436a:	4618      	mov	r0, r3
 800436c:	3724      	adds	r7, #36	; 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004388:	d301      	bcc.n	800438e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800438a:	2301      	movs	r3, #1
 800438c:	e00f      	b.n	80043ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <SysTick_Config+0x40>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3b01      	subs	r3, #1
 8004394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004396:	210f      	movs	r1, #15
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f7ff ff8e 	bl	80042bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <SysTick_Config+0x40>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a6:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <SysTick_Config+0x40>)
 80043a8:	2207      	movs	r2, #7
 80043aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	e000e010 	.word	0xe000e010

080043bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff29 	bl	800421c <__NVIC_SetPriorityGrouping>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043e4:	f7ff ff3e 	bl	8004264 <__NVIC_GetPriorityGrouping>
 80043e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f7ff ff8e 	bl	8004310 <NVIC_EncodePriority>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff5d 	bl	80042bc <__NVIC_SetPriority>
}
 8004402:	bf00      	nop
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	4603      	mov	r3, r0
 8004412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff31 	bl	8004280 <__NVIC_EnableIRQ>
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff ffa2 	bl	8004378 <SysTick_Config>
 8004434:	4603      	mov	r3, r0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7ff feb6 	bl	80041bc <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d008      	beq.n	8004470 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e052      	b.n	8004516 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0216 	bic.w	r2, r2, #22
 800447e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800448e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <HAL_DMA_Abort+0x62>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0208 	bic.w	r2, r2, #8
 80044ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044c0:	e013      	b.n	80044ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044c2:	f7ff fe7b 	bl	80041bc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d90c      	bls.n	80044ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2203      	movs	r2, #3
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e015      	b.n	8004516 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e4      	bne.n	80044c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	223f      	movs	r2, #63	; 0x3f
 80044fe:	409a      	lsls	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d004      	beq.n	800453c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2280      	movs	r2, #128	; 0x80
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e00c      	b.n	8004556 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2205      	movs	r2, #5
 8004540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06c      	b.n	8004650 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2223      	movs	r2, #35	; 0x23
 8004584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fe ff85 	bl	8003498 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	4b31      	ldr	r3, [pc, #196]	; (8004658 <HAL_ETH_Init+0xf4>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	4a30      	ldr	r2, [pc, #192]	; (8004658 <HAL_ETH_Init+0xf4>)
 8004598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800459c:	6453      	str	r3, [r2, #68]	; 0x44
 800459e:	4b2e      	ldr	r3, [pc, #184]	; (8004658 <HAL_ETH_Init+0xf4>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80045aa:	4b2c      	ldr	r3, [pc, #176]	; (800465c <HAL_ETH_Init+0xf8>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4a2b      	ldr	r2, [pc, #172]	; (800465c <HAL_ETH_Init+0xf8>)
 80045b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_ETH_Init+0xf8>)
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4927      	ldr	r1, [pc, #156]	; (800465c <HAL_ETH_Init+0xf8>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <HAL_ETH_Init+0xf8>)
 80045c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045e0:	f7ff fdec 	bl	80041bc <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80045e6:	e011      	b.n	800460c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80045e8:	f7ff fde8 	bl	80041bc <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045f6:	d909      	bls.n	800460c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2204      	movs	r2, #4
 80045fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	22e0      	movs	r2, #224	; 0xe0
 8004604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e021      	b.n	8004650 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e4      	bne.n	80045e8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f958 	bl	80048d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f9ff 	bl	8004a28 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa55 	bl	8004ada <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	461a      	mov	r2, r3
 8004636:	2100      	movs	r1, #0
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f9bd 	bl	80049b8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2210      	movs	r2, #16
 800464a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	40013800 	.word	0x40013800

08004660 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4b51      	ldr	r3, [pc, #324]	; (80047bc <ETH_SetMACConfig+0x15c>)
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	7c1b      	ldrb	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <ETH_SetMACConfig+0x28>
 8004682:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004686:	e000      	b.n	800468a <ETH_SetMACConfig+0x2a>
 8004688:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	7c5b      	ldrb	r3, [r3, #17]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <ETH_SetMACConfig+0x38>
 8004692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004696:	e000      	b.n	800469a <ETH_SetMACConfig+0x3a>
 8004698:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800469a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80046a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	7fdb      	ldrb	r3, [r3, #31]
 80046a6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80046a8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80046ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	7f92      	ldrb	r2, [r2, #30]
 80046b4:	2a00      	cmp	r2, #0
 80046b6:	d102      	bne.n	80046be <ETH_SetMACConfig+0x5e>
 80046b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046bc:	e000      	b.n	80046c0 <ETH_SetMACConfig+0x60>
 80046be:	2200      	movs	r2, #0
                        macconf->Speed |
 80046c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	7f1b      	ldrb	r3, [r3, #28]
 80046c6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80046c8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80046ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	791b      	ldrb	r3, [r3, #4]
 80046d4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80046d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046de:	2a00      	cmp	r2, #0
 80046e0:	d102      	bne.n	80046e8 <ETH_SetMACConfig+0x88>
 80046e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e6:	e000      	b.n	80046ea <ETH_SetMACConfig+0x8a>
 80046e8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80046ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	7bdb      	ldrb	r3, [r3, #15]
 80046f0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80046f2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80046f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004700:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004702:	4313      	orrs	r3, r2
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800471a:	2001      	movs	r0, #1
 800471c:	f7ff fd5a 	bl	80041d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004736:	4013      	ands	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004746:	2a00      	cmp	r2, #0
 8004748:	d101      	bne.n	800474e <ETH_SetMACConfig+0xee>
 800474a:	2280      	movs	r2, #128	; 0x80
 800474c:	e000      	b.n	8004750 <ETH_SetMACConfig+0xf0>
 800474e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004750:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004756:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800475e:	2a01      	cmp	r2, #1
 8004760:	d101      	bne.n	8004766 <ETH_SetMACConfig+0x106>
 8004762:	2208      	movs	r2, #8
 8004764:	e000      	b.n	8004768 <ETH_SetMACConfig+0x108>
 8004766:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004768:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004770:	2a01      	cmp	r2, #1
 8004772:	d101      	bne.n	8004778 <ETH_SetMACConfig+0x118>
 8004774:	2204      	movs	r2, #4
 8004776:	e000      	b.n	800477a <ETH_SetMACConfig+0x11a>
 8004778:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800477a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004782:	2a01      	cmp	r2, #1
 8004784:	d101      	bne.n	800478a <ETH_SetMACConfig+0x12a>
 8004786:	2202      	movs	r2, #2
 8004788:	e000      	b.n	800478c <ETH_SetMACConfig+0x12c>
 800478a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800478c:	4313      	orrs	r3, r2
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047a4:	2001      	movs	r0, #1
 80047a6:	f7ff fd15 	bl	80041d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	619a      	str	r2, [r3, #24]
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	ff20810f 	.word	0xff20810f

080047c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <ETH_SetDMAConfig+0x110>)
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	7b1b      	ldrb	r3, [r3, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <ETH_SetDMAConfig+0x2c>
 80047e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80047ea:	e000      	b.n	80047ee <ETH_SetDMAConfig+0x2e>
 80047ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	7b5b      	ldrb	r3, [r3, #13]
 80047f2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80047f4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	7f52      	ldrb	r2, [r2, #29]
 80047fa:	2a00      	cmp	r2, #0
 80047fc:	d102      	bne.n	8004804 <ETH_SetDMAConfig+0x44>
 80047fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004802:	e000      	b.n	8004806 <ETH_SetDMAConfig+0x46>
 8004804:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004806:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	7b9b      	ldrb	r3, [r3, #14]
 800480c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800480e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004814:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	7f1b      	ldrb	r3, [r3, #28]
 800481a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800481c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	7f9b      	ldrb	r3, [r3, #30]
 8004822:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004824:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800482a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004832:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004834:	4313      	orrs	r3, r2
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004844:	461a      	mov	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004856:	2001      	movs	r0, #1
 8004858:	f7ff fcbc 	bl	80041d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	461a      	mov	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	791b      	ldrb	r3, [r3, #4]
 800486e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004874:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800487a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004880:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004888:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800488a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004892:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004898:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048b4:	2001      	movs	r0, #1
 80048b6:	f7ff fc8d 	bl	80041d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c2:	461a      	mov	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	f8de3f23 	.word	0xf8de3f23

080048d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b0a6      	sub	sp, #152	; 0x98
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80048e8:	2300      	movs	r3, #0
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800490a:	2300      	movs	r3, #0
 800490c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004910:	2300      	movs	r3, #0
 8004912:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004914:	2300      	movs	r3, #0
 8004916:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800491a:	2300      	movs	r3, #0
 800491c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800491e:	2300      	movs	r3, #0
 8004920:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800492a:	2300      	movs	r3, #0
 800492c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800493c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004940:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004942:	2300      	movs	r3, #0
 8004944:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004948:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fe86 	bl	8004660 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004954:	2301      	movs	r3, #1
 8004956:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004958:	2301      	movs	r3, #1
 800495a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800495c:	2301      	movs	r3, #1
 800495e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004962:	2301      	movs	r3, #1
 8004964:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004976:	2300      	movs	r3, #0
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004980:	2301      	movs	r3, #1
 8004982:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004988:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800498a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800498e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004994:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800499c:	2300      	movs	r3, #0
 800499e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80049a4:	f107 0308 	add.w	r3, r7, #8
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ff08 	bl	80047c0 <ETH_SetDMAConfig>
}
 80049b0:	bf00      	nop
 80049b2:	3798      	adds	r7, #152	; 0x98
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3305      	adds	r3, #5
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	3204      	adds	r2, #4
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <ETH_MACAddressConfig+0x68>)
 80049da:	4413      	add	r3, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3303      	adds	r3, #3
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	061a      	lsls	r2, r3, #24
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3302      	adds	r3, #2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3301      	adds	r3, #1
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	4313      	orrs	r3, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <ETH_MACAddressConfig+0x6c>)
 8004a0a:	4413      	add	r3, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	6013      	str	r3, [r2, #0]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40028040 	.word	0x40028040
 8004a24:	40028044 	.word	0x40028044

08004a28 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e03e      	b.n	8004ab4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68d9      	ldr	r1, [r3, #12]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	440b      	add	r3, r1
 8004a46:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2200      	movs	r2, #0
 8004a52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2200      	movs	r2, #0
 8004a58:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	3206      	adds	r2, #6
 8004a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d80c      	bhi.n	8004a98 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68d9      	ldr	r1, [r3, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	440b      	add	r3, r1
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	e004      	b.n	8004aa2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d9bd      	bls.n	8004a36 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004acc:	611a      	str	r2, [r3, #16]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e046      	b.n	8004b76 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6919      	ldr	r1, [r3, #16]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2200      	movs	r2, #0
 8004b04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b24:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004b2c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	3212      	adds	r2, #18
 8004b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d80c      	bhi.n	8004b66 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6919      	ldr	r1, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	440b      	add	r3, r1
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e004      	b.n	8004b70 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3301      	adds	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d9b5      	bls.n	8004ae8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba6:	60da      	str	r2, [r3, #12]
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	e177      	b.n	8004ec0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4013      	ands	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	f040 8166 	bne.w	8004eba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d005      	beq.n	8004c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d130      	bne.n	8004c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	2203      	movs	r2, #3
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 0201 	and.w	r2, r3, #1
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d017      	beq.n	8004ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	2203      	movs	r2, #3
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d123      	bne.n	8004cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	08da      	lsrs	r2, r3, #3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3208      	adds	r2, #8
 8004cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	220f      	movs	r2, #15
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	08da      	lsrs	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3208      	adds	r2, #8
 8004cf2:	69b9      	ldr	r1, [r7, #24]
 8004cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	2203      	movs	r2, #3
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0203 	and.w	r2, r3, #3
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80c0 	beq.w	8004eba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	4b66      	ldr	r3, [pc, #408]	; (8004ed8 <HAL_GPIO_Init+0x324>)
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	4a65      	ldr	r2, [pc, #404]	; (8004ed8 <HAL_GPIO_Init+0x324>)
 8004d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d48:	6453      	str	r3, [r2, #68]	; 0x44
 8004d4a:	4b63      	ldr	r3, [pc, #396]	; (8004ed8 <HAL_GPIO_Init+0x324>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d56:	4a61      	ldr	r2, [pc, #388]	; (8004edc <HAL_GPIO_Init+0x328>)
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	089b      	lsrs	r3, r3, #2
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	220f      	movs	r2, #15
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a58      	ldr	r2, [pc, #352]	; (8004ee0 <HAL_GPIO_Init+0x32c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d037      	beq.n	8004df2 <HAL_GPIO_Init+0x23e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a57      	ldr	r2, [pc, #348]	; (8004ee4 <HAL_GPIO_Init+0x330>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d031      	beq.n	8004dee <HAL_GPIO_Init+0x23a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a56      	ldr	r2, [pc, #344]	; (8004ee8 <HAL_GPIO_Init+0x334>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02b      	beq.n	8004dea <HAL_GPIO_Init+0x236>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a55      	ldr	r2, [pc, #340]	; (8004eec <HAL_GPIO_Init+0x338>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d025      	beq.n	8004de6 <HAL_GPIO_Init+0x232>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a54      	ldr	r2, [pc, #336]	; (8004ef0 <HAL_GPIO_Init+0x33c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01f      	beq.n	8004de2 <HAL_GPIO_Init+0x22e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a53      	ldr	r2, [pc, #332]	; (8004ef4 <HAL_GPIO_Init+0x340>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d019      	beq.n	8004dde <HAL_GPIO_Init+0x22a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <HAL_GPIO_Init+0x344>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <HAL_GPIO_Init+0x226>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a51      	ldr	r2, [pc, #324]	; (8004efc <HAL_GPIO_Init+0x348>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00d      	beq.n	8004dd6 <HAL_GPIO_Init+0x222>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a50      	ldr	r2, [pc, #320]	; (8004f00 <HAL_GPIO_Init+0x34c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <HAL_GPIO_Init+0x21e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a4f      	ldr	r2, [pc, #316]	; (8004f04 <HAL_GPIO_Init+0x350>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d101      	bne.n	8004dce <HAL_GPIO_Init+0x21a>
 8004dca:	2309      	movs	r3, #9
 8004dcc:	e012      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004dce:	230a      	movs	r3, #10
 8004dd0:	e010      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	e00e      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004dd6:	2307      	movs	r3, #7
 8004dd8:	e00c      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004dda:	2306      	movs	r3, #6
 8004ddc:	e00a      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004dde:	2305      	movs	r3, #5
 8004de0:	e008      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004de2:	2304      	movs	r3, #4
 8004de4:	e006      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004de6:	2303      	movs	r3, #3
 8004de8:	e004      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e002      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <HAL_GPIO_Init+0x240>
 8004df2:	2300      	movs	r3, #0
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	f002 0203 	and.w	r2, r2, #3
 8004dfa:	0092      	lsls	r2, r2, #2
 8004dfc:	4093      	lsls	r3, r2
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e04:	4935      	ldr	r1, [pc, #212]	; (8004edc <HAL_GPIO_Init+0x328>)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e12:	4b3d      	ldr	r3, [pc, #244]	; (8004f08 <HAL_GPIO_Init+0x354>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e36:	4a34      	ldr	r2, [pc, #208]	; (8004f08 <HAL_GPIO_Init+0x354>)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <HAL_GPIO_Init+0x354>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e60:	4a29      	ldr	r2, [pc, #164]	; (8004f08 <HAL_GPIO_Init+0x354>)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e66:	4b28      	ldr	r3, [pc, #160]	; (8004f08 <HAL_GPIO_Init+0x354>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4013      	ands	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e8a:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <HAL_GPIO_Init+0x354>)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e90:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <HAL_GPIO_Init+0x354>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004eb4:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <HAL_GPIO_Init+0x354>)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b0f      	cmp	r3, #15
 8004ec4:	f67f ae84 	bls.w	8004bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	3724      	adds	r7, #36	; 0x24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	40013800 	.word	0x40013800
 8004ee0:	40020000 	.word	0x40020000
 8004ee4:	40020400 	.word	0x40020400
 8004ee8:	40020800 	.word	0x40020800
 8004eec:	40020c00 	.word	0x40020c00
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40021400 	.word	0x40021400
 8004ef8:	40021800 	.word	0x40021800
 8004efc:	40021c00 	.word	0x40021c00
 8004f00:	40022000 	.word	0x40022000
 8004f04:	40022400 	.word	0x40022400
 8004f08:	40013c00 	.word	0x40013c00

08004f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e001      	b.n	8004f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f4c:	787b      	ldrb	r3, [r7, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f58:	e003      	b.n	8004f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f5a:	887b      	ldrh	r3, [r7, #2]
 8004f5c:	041a      	lsls	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f80:	887a      	ldrh	r2, [r7, #2]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4013      	ands	r3, r2
 8004f86:	041a      	lsls	r2, r3, #16
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	43d9      	mvns	r1, r3
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	400b      	ands	r3, r1
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	619a      	str	r2, [r3, #24]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e12b      	b.n	800520e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fe fb2a 	bl	8003624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	; 0x24
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005008:	f001 fa20 	bl	800644c <HAL_RCC_GetPCLK1Freq>
 800500c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4a81      	ldr	r2, [pc, #516]	; (8005218 <HAL_I2C_Init+0x274>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d807      	bhi.n	8005028 <HAL_I2C_Init+0x84>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4a80      	ldr	r2, [pc, #512]	; (800521c <HAL_I2C_Init+0x278>)
 800501c:	4293      	cmp	r3, r2
 800501e:	bf94      	ite	ls
 8005020:	2301      	movls	r3, #1
 8005022:	2300      	movhi	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e006      	b.n	8005036 <HAL_I2C_Init+0x92>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a7d      	ldr	r2, [pc, #500]	; (8005220 <HAL_I2C_Init+0x27c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	bf94      	ite	ls
 8005030:	2301      	movls	r3, #1
 8005032:	2300      	movhi	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e0e7      	b.n	800520e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a78      	ldr	r2, [pc, #480]	; (8005224 <HAL_I2C_Init+0x280>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	0c9b      	lsrs	r3, r3, #18
 8005048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a6a      	ldr	r2, [pc, #424]	; (8005218 <HAL_I2C_Init+0x274>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d802      	bhi.n	8005078 <HAL_I2C_Init+0xd4>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3301      	adds	r3, #1
 8005076:	e009      	b.n	800508c <HAL_I2C_Init+0xe8>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	4a69      	ldr	r2, [pc, #420]	; (8005228 <HAL_I2C_Init+0x284>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	3301      	adds	r3, #1
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	430b      	orrs	r3, r1
 8005092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800509e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	495c      	ldr	r1, [pc, #368]	; (8005218 <HAL_I2C_Init+0x274>)
 80050a8:	428b      	cmp	r3, r1
 80050aa:	d819      	bhi.n	80050e0 <HAL_I2C_Init+0x13c>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1e59      	subs	r1, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050c0:	400b      	ands	r3, r1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_I2C_Init+0x138>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1e59      	subs	r1, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80050d4:	3301      	adds	r3, #1
 80050d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050da:	e051      	b.n	8005180 <HAL_I2C_Init+0x1dc>
 80050dc:	2304      	movs	r3, #4
 80050de:	e04f      	b.n	8005180 <HAL_I2C_Init+0x1dc>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d111      	bne.n	800510c <HAL_I2C_Init+0x168>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1e58      	subs	r0, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	440b      	add	r3, r1
 80050f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050fa:	3301      	adds	r3, #1
 80050fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e012      	b.n	8005132 <HAL_I2C_Init+0x18e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1e58      	subs	r0, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	0099      	lsls	r1, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005122:	3301      	adds	r3, #1
 8005124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_I2C_Init+0x196>
 8005136:	2301      	movs	r3, #1
 8005138:	e022      	b.n	8005180 <HAL_I2C_Init+0x1dc>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10e      	bne.n	8005160 <HAL_I2C_Init+0x1bc>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1e58      	subs	r0, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	440b      	add	r3, r1
 8005150:	fbb0 f3f3 	udiv	r3, r0, r3
 8005154:	3301      	adds	r3, #1
 8005156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	e00f      	b.n	8005180 <HAL_I2C_Init+0x1dc>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1e58      	subs	r0, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6859      	ldr	r1, [r3, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	0099      	lsls	r1, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	fbb0 f3f3 	udiv	r3, r0, r3
 8005176:	3301      	adds	r3, #1
 8005178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	6809      	ldr	r1, [r1, #0]
 8005184:	4313      	orrs	r3, r2
 8005186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6911      	ldr	r1, [r2, #16]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68d2      	ldr	r2, [r2, #12]
 80051ba:	4311      	orrs	r1, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	000186a0 	.word	0x000186a0
 800521c:	001e847f 	.word	0x001e847f
 8005220:	003d08ff 	.word	0x003d08ff
 8005224:	431bde83 	.word	0x431bde83
 8005228:	10624dd3 	.word	0x10624dd3

0800522c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	461a      	mov	r2, r3
 8005238:	460b      	mov	r3, r1
 800523a:	817b      	strh	r3, [r7, #10]
 800523c:	4613      	mov	r3, r2
 800523e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005240:	f7fe ffbc 	bl	80041bc <HAL_GetTick>
 8005244:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b20      	cmp	r3, #32
 8005250:	f040 80e0 	bne.w	8005414 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	2319      	movs	r3, #25
 800525a:	2201      	movs	r2, #1
 800525c:	4970      	ldr	r1, [pc, #448]	; (8005420 <HAL_I2C_Master_Transmit+0x1f4>)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f964 	bl	800552c <I2C_WaitOnFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800526a:	2302      	movs	r3, #2
 800526c:	e0d3      	b.n	8005416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_I2C_Master_Transmit+0x50>
 8005278:	2302      	movs	r3, #2
 800527a:	e0cc      	b.n	8005416 <HAL_I2C_Master_Transmit+0x1ea>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d007      	beq.n	80052a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2221      	movs	r2, #33	; 0x21
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2210      	movs	r2, #16
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	893a      	ldrh	r2, [r7, #8]
 80052d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a50      	ldr	r2, [pc, #320]	; (8005424 <HAL_I2C_Master_Transmit+0x1f8>)
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052e4:	8979      	ldrh	r1, [r7, #10]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f89c 	bl	8005428 <I2C_MasterRequestWrite>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e08d      	b.n	8005416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005310:	e066      	b.n	80053e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	6a39      	ldr	r1, [r7, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f9de 	bl	80056d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d107      	bne.n	800533a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e06b      	b.n	8005416 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	781a      	ldrb	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b04      	cmp	r3, #4
 800537a:	d11b      	bne.n	80053b4 <HAL_I2C_Master_Transmit+0x188>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d017      	beq.n	80053b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	6a39      	ldr	r1, [r7, #32]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f9ce 	bl	800575a <I2C_WaitOnBTFFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d107      	bne.n	80053dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e01a      	b.n	8005416 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d194      	bne.n	8005312 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005414:	2302      	movs	r3, #2
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	00100002 	.word	0x00100002
 8005424:	ffff0000 	.word	0xffff0000

08005428 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	607a      	str	r2, [r7, #4]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	460b      	mov	r3, r1
 8005436:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d006      	beq.n	8005452 <I2C_MasterRequestWrite+0x2a>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d003      	beq.n	8005452 <I2C_MasterRequestWrite+0x2a>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005450:	d108      	bne.n	8005464 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e00b      	b.n	800547c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	2b12      	cmp	r3, #18
 800546a:	d107      	bne.n	800547c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f84f 	bl	800552c <I2C_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a2:	d103      	bne.n	80054ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e035      	b.n	800551c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b8:	d108      	bne.n	80054cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ba:	897b      	ldrh	r3, [r7, #10]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054c8:	611a      	str	r2, [r3, #16]
 80054ca:	e01b      	b.n	8005504 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054cc:	897b      	ldrh	r3, [r7, #10]
 80054ce:	11db      	asrs	r3, r3, #7
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f003 0306 	and.w	r3, r3, #6
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	f063 030f 	orn	r3, r3, #15
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	490e      	ldr	r1, [pc, #56]	; (8005524 <I2C_MasterRequestWrite+0xfc>)
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f875 	bl	80055da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e010      	b.n	800551c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4907      	ldr	r1, [pc, #28]	; (8005528 <I2C_MasterRequestWrite+0x100>)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f865 	bl	80055da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	00010008 	.word	0x00010008
 8005528:	00010002 	.word	0x00010002

0800552c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800553c:	e025      	b.n	800558a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d021      	beq.n	800558a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005546:	f7fe fe39 	bl	80041bc <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d302      	bcc.n	800555c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d116      	bne.n	800558a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	f043 0220 	orr.w	r2, r3, #32
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e023      	b.n	80055d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d10d      	bne.n	80055b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	43da      	mvns	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4013      	ands	r3, r2
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	e00c      	b.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	43da      	mvns	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf0c      	ite	eq
 80055c2:	2301      	moveq	r3, #1
 80055c4:	2300      	movne	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d0b6      	beq.n	800553e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e8:	e051      	b.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f8:	d123      	bne.n	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005608:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005612:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f043 0204 	orr.w	r2, r3, #4
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e046      	b.n	80056d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d021      	beq.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564a:	f7fe fdb7 	bl	80041bc <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d302      	bcc.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d116      	bne.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e020      	b.n	80056d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	0c1b      	lsrs	r3, r3, #16
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d10c      	bne.n	80056b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	43da      	mvns	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	e00b      	b.n	80056ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	43da      	mvns	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4013      	ands	r3, r2
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d18d      	bne.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056e4:	e02d      	b.n	8005742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f878 	bl	80057dc <I2C_IsAcknowledgeFailed>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e02d      	b.n	8005752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d021      	beq.n	8005742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fe fd5d 	bl	80041bc <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e007      	b.n	8005752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574c:	2b80      	cmp	r3, #128	; 0x80
 800574e:	d1ca      	bne.n	80056e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005766:	e02d      	b.n	80057c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f837 	bl	80057dc <I2C_IsAcknowledgeFailed>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e02d      	b.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d021      	beq.n	80057c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005780:	f7fe fd1c 	bl	80041bc <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	d302      	bcc.n	8005796 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d116      	bne.n	80057c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f043 0220 	orr.w	r2, r3, #32
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e007      	b.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d1ca      	bne.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f2:	d11b      	bne.n	800582c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f043 0204 	orr.w	r2, r3, #4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b20      	cmp	r3, #32
 800584e:	d129      	bne.n	80058a4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	; 0x24
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0210 	bic.w	r2, r2, #16
 8005876:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d12a      	bne.n	8005922 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2224      	movs	r2, #36	; 0x24
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80058ec:	89fb      	ldrh	r3, [r7, #14]
 80058ee:	f023 030f 	bic.w	r3, r3, #15
 80058f2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	89fa      	ldrh	r2, [r7, #14]
 8005904:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
  }
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005932:	b08f      	sub	sp, #60	; 0x3c
 8005934:	af0a      	add	r7, sp, #40	; 0x28
 8005936:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e10f      	b.n	8005b62 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7fe f8d7 	bl	8003b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2203      	movs	r2, #3
 8005966:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f003 ff88 	bl	8009896 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	687e      	ldr	r6, [r7, #4]
 800598e:	466d      	mov	r5, sp
 8005990:	f106 0410 	add.w	r4, r6, #16
 8005994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800599a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800599c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80059a4:	1d33      	adds	r3, r6, #4
 80059a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059a8:	6838      	ldr	r0, [r7, #0]
 80059aa:	f003 ff13 	bl	80097d4 <USB_CoreInit>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0d0      	b.n	8005b62 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2100      	movs	r1, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f003 ff76 	bl	80098b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
 80059d0:	e04a      	b.n	8005a68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	333d      	adds	r3, #61	; 0x3d
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	333c      	adds	r3, #60	; 0x3c
 80059f6:	7bfa      	ldrb	r2, [r7, #15]
 80059f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059fa:	7bfa      	ldrb	r2, [r7, #15]
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	b298      	uxth	r0, r3
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3344      	adds	r3, #68	; 0x44
 8005a0e:	4602      	mov	r2, r0
 8005a10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a12:	7bfa      	ldrb	r2, [r7, #15]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3340      	adds	r3, #64	; 0x40
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a26:	7bfa      	ldrb	r2, [r7, #15]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	3348      	adds	r3, #72	; 0x48
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a3a:	7bfa      	ldrb	r2, [r7, #15]
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	334c      	adds	r3, #76	; 0x4c
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a4e:	7bfa      	ldrb	r2, [r7, #15]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	3354      	adds	r3, #84	; 0x54
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	3301      	adds	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
 8005a68:	7bfa      	ldrb	r2, [r7, #15]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d3af      	bcc.n	80059d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
 8005a76:	e044      	b.n	8005b02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a78:	7bfa      	ldrb	r2, [r7, #15]
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a8e:	7bfa      	ldrb	r2, [r7, #15]
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005aa4:	7bfa      	ldrb	r2, [r7, #15]
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005aba:	7bfa      	ldrb	r2, [r7, #15]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ad0:	7bfa      	ldrb	r2, [r7, #15]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ae6:	7bfa      	ldrb	r2, [r7, #15]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	3301      	adds	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]
 8005b02:	7bfa      	ldrb	r2, [r7, #15]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d3b5      	bcc.n	8005a78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	687e      	ldr	r6, [r7, #4]
 8005b14:	466d      	mov	r5, sp
 8005b16:	f106 0410 	add.w	r4, r6, #16
 8005b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b26:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b2a:	1d33      	adds	r3, r6, #4
 8005b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b2e:	6838      	ldr	r0, [r7, #0]
 8005b30:	f003 ff0e 	bl	8009950 <USB_DevInit>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e00d      	b.n	8005b62 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f004 f8d9 	bl	8009d12 <USB_DevDisconnect>

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e267      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d075      	beq.n	8005c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b8a:	4b88      	ldr	r3, [pc, #544]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d00c      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b96:	4b85      	ldr	r3, [pc, #532]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d112      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ba2:	4b82      	ldr	r3, [pc, #520]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bae:	d10b      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb0:	4b7e      	ldr	r3, [pc, #504]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d05b      	beq.n	8005c74 <HAL_RCC_OscConfig+0x108>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d157      	bne.n	8005c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e242      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd0:	d106      	bne.n	8005be0 <HAL_RCC_OscConfig+0x74>
 8005bd2:	4b76      	ldr	r3, [pc, #472]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a75      	ldr	r2, [pc, #468]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e01d      	b.n	8005c1c <HAL_RCC_OscConfig+0xb0>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be8:	d10c      	bne.n	8005c04 <HAL_RCC_OscConfig+0x98>
 8005bea:	4b70      	ldr	r3, [pc, #448]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a6f      	ldr	r2, [pc, #444]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	4b6d      	ldr	r3, [pc, #436]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6c      	ldr	r2, [pc, #432]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	e00b      	b.n	8005c1c <HAL_RCC_OscConfig+0xb0>
 8005c04:	4b69      	ldr	r3, [pc, #420]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a68      	ldr	r2, [pc, #416]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	4b66      	ldr	r3, [pc, #408]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a65      	ldr	r2, [pc, #404]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d013      	beq.n	8005c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fe faca 	bl	80041bc <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c2c:	f7fe fac6 	bl	80041bc <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	; 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e207      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3e:	4b5b      	ldr	r3, [pc, #364]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0xc0>
 8005c4a:	e014      	b.n	8005c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4c:	f7fe fab6 	bl	80041bc <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c54:	f7fe fab2 	bl	80041bc <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b64      	cmp	r3, #100	; 0x64
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e1f3      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c66:	4b51      	ldr	r3, [pc, #324]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <HAL_RCC_OscConfig+0xe8>
 8005c72:	e000      	b.n	8005c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d063      	beq.n	8005d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c82:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 030c 	and.w	r3, r3, #12
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00b      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c8e:	4b47      	ldr	r3, [pc, #284]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d11c      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c9a:	4b44      	ldr	r3, [pc, #272]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d116      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ca6:	4b41      	ldr	r3, [pc, #260]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_RCC_OscConfig+0x152>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d001      	beq.n	8005cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e1c7      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cbe:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4937      	ldr	r1, [pc, #220]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd2:	e03a      	b.n	8005d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d020      	beq.n	8005d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cdc:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <HAL_RCC_OscConfig+0x244>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce2:	f7fe fa6b 	bl	80041bc <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cea:	f7fe fa67 	bl	80041bc <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e1a8      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfc:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f0      	beq.n	8005cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d08:	4b28      	ldr	r3, [pc, #160]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	4925      	ldr	r1, [pc, #148]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	600b      	str	r3, [r1, #0]
 8005d1c:	e015      	b.n	8005d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_RCC_OscConfig+0x244>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fe fa4a 	bl	80041bc <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d2c:	f7fe fa46 	bl	80041bc <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e187      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d3e:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d036      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <HAL_RCC_OscConfig+0x248>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d64:	f7fe fa2a 	bl	80041bc <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d6c:	f7fe fa26 	bl	80041bc <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e167      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_OscConfig+0x240>)
 8005d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0x200>
 8005d8a:	e01b      	b.n	8005dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <HAL_RCC_OscConfig+0x248>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d92:	f7fe fa13 	bl	80041bc <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d98:	e00e      	b.n	8005db8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9a:	f7fe fa0f 	bl	80041bc <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d907      	bls.n	8005db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e150      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
 8005dac:	40023800 	.word	0x40023800
 8005db0:	42470000 	.word	0x42470000
 8005db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db8:	4b88      	ldr	r3, [pc, #544]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ea      	bne.n	8005d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8097 	beq.w	8005f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd6:	4b81      	ldr	r3, [pc, #516]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10f      	bne.n	8005e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	4b7d      	ldr	r3, [pc, #500]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	4a7c      	ldr	r2, [pc, #496]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df0:	6413      	str	r3, [r2, #64]	; 0x40
 8005df2:	4b7a      	ldr	r3, [pc, #488]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e02:	4b77      	ldr	r3, [pc, #476]	; (8005fe0 <HAL_RCC_OscConfig+0x474>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d118      	bne.n	8005e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e0e:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <HAL_RCC_OscConfig+0x474>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a73      	ldr	r2, [pc, #460]	; (8005fe0 <HAL_RCC_OscConfig+0x474>)
 8005e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e1a:	f7fe f9cf 	bl	80041bc <HAL_GetTick>
 8005e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e22:	f7fe f9cb 	bl	80041bc <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e10c      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e34:	4b6a      	ldr	r3, [pc, #424]	; (8005fe0 <HAL_RCC_OscConfig+0x474>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0f0      	beq.n	8005e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d106      	bne.n	8005e56 <HAL_RCC_OscConfig+0x2ea>
 8005e48:	4b64      	ldr	r3, [pc, #400]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a63      	ldr	r2, [pc, #396]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
 8005e54:	e01c      	b.n	8005e90 <HAL_RCC_OscConfig+0x324>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x30c>
 8005e5e:	4b5f      	ldr	r3, [pc, #380]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	4a5e      	ldr	r2, [pc, #376]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e64:	f043 0304 	orr.w	r3, r3, #4
 8005e68:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6a:	4b5c      	ldr	r3, [pc, #368]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	4a5b      	ldr	r2, [pc, #364]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	6713      	str	r3, [r2, #112]	; 0x70
 8005e76:	e00b      	b.n	8005e90 <HAL_RCC_OscConfig+0x324>
 8005e78:	4b58      	ldr	r3, [pc, #352]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7c:	4a57      	ldr	r2, [pc, #348]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e7e:	f023 0301 	bic.w	r3, r3, #1
 8005e82:	6713      	str	r3, [r2, #112]	; 0x70
 8005e84:	4b55      	ldr	r3, [pc, #340]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e88:	4a54      	ldr	r2, [pc, #336]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005e8a:	f023 0304 	bic.w	r3, r3, #4
 8005e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d015      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e98:	f7fe f990 	bl	80041bc <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea0:	f7fe f98c 	bl	80041bc <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e0cb      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb6:	4b49      	ldr	r3, [pc, #292]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0ee      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x334>
 8005ec2:	e014      	b.n	8005eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec4:	f7fe f97a 	bl	80041bc <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eca:	e00a      	b.n	8005ee2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ecc:	f7fe f976 	bl	80041bc <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e0b5      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee2:	4b3e      	ldr	r3, [pc, #248]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ee      	bne.n	8005ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d105      	bne.n	8005f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef4:	4b39      	ldr	r3, [pc, #228]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	4a38      	ldr	r2, [pc, #224]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80a1 	beq.w	800604c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f0a:	4b34      	ldr	r3, [pc, #208]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d05c      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d141      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1e:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <HAL_RCC_OscConfig+0x478>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f24:	f7fe f94a 	bl	80041bc <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f2c:	f7fe f946 	bl	80041bc <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e087      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f3e:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	019b      	lsls	r3, r3, #6
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	3b01      	subs	r3, #1
 8005f64:	041b      	lsls	r3, r3, #16
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	061b      	lsls	r3, r3, #24
 8005f6e:	491b      	ldr	r1, [pc, #108]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f74:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <HAL_RCC_OscConfig+0x478>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7a:	f7fe f91f 	bl	80041bc <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f82:	f7fe f91b 	bl	80041bc <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e05c      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f94:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x416>
 8005fa0:	e054      	b.n	800604c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <HAL_RCC_OscConfig+0x478>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa8:	f7fe f908 	bl	80041bc <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb0:	f7fe f904 	bl	80041bc <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e045      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_RCC_OscConfig+0x470>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x444>
 8005fce:	e03d      	b.n	800604c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d107      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e038      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	40007000 	.word	0x40007000
 8005fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <HAL_RCC_OscConfig+0x4ec>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d028      	beq.n	8006048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006000:	429a      	cmp	r2, r3
 8006002:	d121      	bne.n	8006048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800600e:	429a      	cmp	r2, r3
 8006010:	d11a      	bne.n	8006048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006018:	4013      	ands	r3, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800601e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006020:	4293      	cmp	r3, r2
 8006022:	d111      	bne.n	8006048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	3b01      	subs	r3, #1
 8006032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006034:	429a      	cmp	r2, r3
 8006036:	d107      	bne.n	8006048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006044:	429a      	cmp	r2, r3
 8006046:	d001      	beq.n	800604c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40023800 	.word	0x40023800

0800605c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0cc      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006070:	4b68      	ldr	r3, [pc, #416]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d90c      	bls.n	8006098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607e:	4b65      	ldr	r3, [pc, #404]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006086:	4b63      	ldr	r3, [pc, #396]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d001      	beq.n	8006098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0b8      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d020      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060b0:	4b59      	ldr	r3, [pc, #356]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	4a58      	ldr	r2, [pc, #352]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060c8:	4b53      	ldr	r3, [pc, #332]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	4a52      	ldr	r2, [pc, #328]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d4:	4b50      	ldr	r3, [pc, #320]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	494d      	ldr	r1, [pc, #308]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d044      	beq.n	800617c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d107      	bne.n	800610a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fa:	4b47      	ldr	r3, [pc, #284]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d119      	bne.n	800613a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e07f      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d003      	beq.n	800611a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006116:	2b03      	cmp	r3, #3
 8006118:	d107      	bne.n	800612a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611a:	4b3f      	ldr	r3, [pc, #252]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d109      	bne.n	800613a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e06f      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800612a:	4b3b      	ldr	r3, [pc, #236]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e067      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800613a:	4b37      	ldr	r3, [pc, #220]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f023 0203 	bic.w	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4934      	ldr	r1, [pc, #208]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	4313      	orrs	r3, r2
 800614a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800614c:	f7fe f836 	bl	80041bc <HAL_GetTick>
 8006150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006152:	e00a      	b.n	800616a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006154:	f7fe f832 	bl	80041bc <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e04f      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616a:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 020c 	and.w	r2, r3, #12
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	429a      	cmp	r2, r3
 800617a:	d1eb      	bne.n	8006154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800617c:	4b25      	ldr	r3, [pc, #148]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d20c      	bcs.n	80061a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b22      	ldr	r3, [pc, #136]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b20      	ldr	r3, [pc, #128]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d001      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e032      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b0:	4b19      	ldr	r3, [pc, #100]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	4916      	ldr	r1, [pc, #88]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	490e      	ldr	r1, [pc, #56]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061e2:	f000 f821 	bl	8006228 <HAL_RCC_GetSysClockFreq>
 80061e6:	4602      	mov	r2, r0
 80061e8:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	490a      	ldr	r1, [pc, #40]	; (800621c <HAL_RCC_ClockConfig+0x1c0>)
 80061f4:	5ccb      	ldrb	r3, [r1, r3]
 80061f6:	fa22 f303 	lsr.w	r3, r2, r3
 80061fa:	4a09      	ldr	r2, [pc, #36]	; (8006220 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061fe:	4b09      	ldr	r3, [pc, #36]	; (8006224 <HAL_RCC_ClockConfig+0x1c8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f7fd ff96 	bl	8004134 <HAL_InitTick>

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40023c00 	.word	0x40023c00
 8006218:	40023800 	.word	0x40023800
 800621c:	0800b400 	.word	0x0800b400
 8006220:	20000160 	.word	0x20000160
 8006224:	20000164 	.word	0x20000164

08006228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800622c:	b094      	sub	sp, #80	; 0x50
 800622e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	647b      	str	r3, [r7, #68]	; 0x44
 8006234:	2300      	movs	r3, #0
 8006236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006238:	2300      	movs	r3, #0
 800623a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006240:	4b79      	ldr	r3, [pc, #484]	; (8006428 <HAL_RCC_GetSysClockFreq+0x200>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b08      	cmp	r3, #8
 800624a:	d00d      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0x40>
 800624c:	2b08      	cmp	r3, #8
 800624e:	f200 80e1 	bhi.w	8006414 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_RCC_GetSysClockFreq+0x34>
 8006256:	2b04      	cmp	r3, #4
 8006258:	d003      	beq.n	8006262 <HAL_RCC_GetSysClockFreq+0x3a>
 800625a:	e0db      	b.n	8006414 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800625c:	4b73      	ldr	r3, [pc, #460]	; (800642c <HAL_RCC_GetSysClockFreq+0x204>)
 800625e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006260:	e0db      	b.n	800641a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006262:	4b73      	ldr	r3, [pc, #460]	; (8006430 <HAL_RCC_GetSysClockFreq+0x208>)
 8006264:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006266:	e0d8      	b.n	800641a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006268:	4b6f      	ldr	r3, [pc, #444]	; (8006428 <HAL_RCC_GetSysClockFreq+0x200>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006270:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006272:	4b6d      	ldr	r3, [pc, #436]	; (8006428 <HAL_RCC_GetSysClockFreq+0x200>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d063      	beq.n	8006346 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800627e:	4b6a      	ldr	r3, [pc, #424]	; (8006428 <HAL_RCC_GetSysClockFreq+0x200>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	099b      	lsrs	r3, r3, #6
 8006284:	2200      	movs	r2, #0
 8006286:	63bb      	str	r3, [r7, #56]	; 0x38
 8006288:	63fa      	str	r2, [r7, #60]	; 0x3c
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006290:	633b      	str	r3, [r7, #48]	; 0x30
 8006292:	2300      	movs	r3, #0
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
 8006296:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800629a:	4622      	mov	r2, r4
 800629c:	462b      	mov	r3, r5
 800629e:	f04f 0000 	mov.w	r0, #0
 80062a2:	f04f 0100 	mov.w	r1, #0
 80062a6:	0159      	lsls	r1, r3, #5
 80062a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062ac:	0150      	lsls	r0, r2, #5
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4621      	mov	r1, r4
 80062b4:	1a51      	subs	r1, r2, r1
 80062b6:	6139      	str	r1, [r7, #16]
 80062b8:	4629      	mov	r1, r5
 80062ba:	eb63 0301 	sbc.w	r3, r3, r1
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062cc:	4659      	mov	r1, fp
 80062ce:	018b      	lsls	r3, r1, #6
 80062d0:	4651      	mov	r1, sl
 80062d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062d6:	4651      	mov	r1, sl
 80062d8:	018a      	lsls	r2, r1, #6
 80062da:	4651      	mov	r1, sl
 80062dc:	ebb2 0801 	subs.w	r8, r2, r1
 80062e0:	4659      	mov	r1, fp
 80062e2:	eb63 0901 	sbc.w	r9, r3, r1
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062fa:	4690      	mov	r8, r2
 80062fc:	4699      	mov	r9, r3
 80062fe:	4623      	mov	r3, r4
 8006300:	eb18 0303 	adds.w	r3, r8, r3
 8006304:	60bb      	str	r3, [r7, #8]
 8006306:	462b      	mov	r3, r5
 8006308:	eb49 0303 	adc.w	r3, r9, r3
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800631a:	4629      	mov	r1, r5
 800631c:	024b      	lsls	r3, r1, #9
 800631e:	4621      	mov	r1, r4
 8006320:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006324:	4621      	mov	r1, r4
 8006326:	024a      	lsls	r2, r1, #9
 8006328:	4610      	mov	r0, r2
 800632a:	4619      	mov	r1, r3
 800632c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800632e:	2200      	movs	r2, #0
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
 8006332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006338:	f7fa fba0 	bl	8000a7c <__aeabi_uldivmod>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4613      	mov	r3, r2
 8006342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006344:	e058      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006346:	4b38      	ldr	r3, [pc, #224]	; (8006428 <HAL_RCC_GetSysClockFreq+0x200>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	099b      	lsrs	r3, r3, #6
 800634c:	2200      	movs	r2, #0
 800634e:	4618      	mov	r0, r3
 8006350:	4611      	mov	r1, r2
 8006352:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006356:	623b      	str	r3, [r7, #32]
 8006358:	2300      	movs	r3, #0
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
 800635c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006360:	4642      	mov	r2, r8
 8006362:	464b      	mov	r3, r9
 8006364:	f04f 0000 	mov.w	r0, #0
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	0159      	lsls	r1, r3, #5
 800636e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006372:	0150      	lsls	r0, r2, #5
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4641      	mov	r1, r8
 800637a:	ebb2 0a01 	subs.w	sl, r2, r1
 800637e:	4649      	mov	r1, r9
 8006380:	eb63 0b01 	sbc.w	fp, r3, r1
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006390:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006394:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006398:	ebb2 040a 	subs.w	r4, r2, sl
 800639c:	eb63 050b 	sbc.w	r5, r3, fp
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	00eb      	lsls	r3, r5, #3
 80063aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ae:	00e2      	lsls	r2, r4, #3
 80063b0:	4614      	mov	r4, r2
 80063b2:	461d      	mov	r5, r3
 80063b4:	4643      	mov	r3, r8
 80063b6:	18e3      	adds	r3, r4, r3
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	464b      	mov	r3, r9
 80063bc:	eb45 0303 	adc.w	r3, r5, r3
 80063c0:	607b      	str	r3, [r7, #4]
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063ce:	4629      	mov	r1, r5
 80063d0:	028b      	lsls	r3, r1, #10
 80063d2:	4621      	mov	r1, r4
 80063d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063d8:	4621      	mov	r1, r4
 80063da:	028a      	lsls	r2, r1, #10
 80063dc:	4610      	mov	r0, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e2:	2200      	movs	r2, #0
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	61fa      	str	r2, [r7, #28]
 80063e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ec:	f7fa fb46 	bl	8000a7c <__aeabi_uldivmod>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4613      	mov	r3, r2
 80063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063f8:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <HAL_RCC_GetSysClockFreq+0x200>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	0c1b      	lsrs	r3, r3, #16
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	3301      	adds	r3, #1
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800640a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006412:	e002      	b.n	800641a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006414:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCC_GetSysClockFreq+0x204>)
 8006416:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800641a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800641c:	4618      	mov	r0, r3
 800641e:	3750      	adds	r7, #80	; 0x50
 8006420:	46bd      	mov	sp, r7
 8006422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006426:	bf00      	nop
 8006428:	40023800 	.word	0x40023800
 800642c:	00f42400 	.word	0x00f42400
 8006430:	007a1200 	.word	0x007a1200

08006434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006438:	4b03      	ldr	r3, [pc, #12]	; (8006448 <HAL_RCC_GetHCLKFreq+0x14>)
 800643a:	681b      	ldr	r3, [r3, #0]
}
 800643c:	4618      	mov	r0, r3
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	20000160 	.word	0x20000160

0800644c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006450:	f7ff fff0 	bl	8006434 <HAL_RCC_GetHCLKFreq>
 8006454:	4602      	mov	r2, r0
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	0a9b      	lsrs	r3, r3, #10
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	4903      	ldr	r1, [pc, #12]	; (8006470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006462:	5ccb      	ldrb	r3, [r1, r3]
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006468:	4618      	mov	r0, r3
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40023800 	.word	0x40023800
 8006470:	0800b410 	.word	0x0800b410

08006474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006478:	f7ff ffdc 	bl	8006434 <HAL_RCC_GetHCLKFreq>
 800647c:	4602      	mov	r2, r0
 800647e:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	0b5b      	lsrs	r3, r3, #13
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	4903      	ldr	r1, [pc, #12]	; (8006498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800648a:	5ccb      	ldrb	r3, [r1, r3]
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006490:	4618      	mov	r0, r3
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40023800 	.word	0x40023800
 8006498:	0800b410 	.word	0x0800b410

0800649c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d075      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064d0:	4b91      	ldr	r3, [pc, #580]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064d6:	f7fd fe71 	bl	80041bc <HAL_GetTick>
 80064da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064dc:	e008      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064de:	f7fd fe6d 	bl	80041bc <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e189      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064f0:	4b8a      	ldr	r3, [pc, #552]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f0      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	019a      	lsls	r2, r3, #6
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	071b      	lsls	r3, r3, #28
 8006514:	4981      	ldr	r1, [pc, #516]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01f      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006528:	4b7c      	ldr	r3, [pc, #496]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800652a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652e:	0f1b      	lsrs	r3, r3, #28
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	019a      	lsls	r2, r3, #6
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	061b      	lsls	r3, r3, #24
 8006542:	431a      	orrs	r2, r3
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	071b      	lsls	r3, r3, #28
 8006548:	4974      	ldr	r1, [pc, #464]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006550:	4b72      	ldr	r3, [pc, #456]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006556:	f023 021f 	bic.w	r2, r3, #31
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	3b01      	subs	r3, #1
 8006560:	496e      	ldr	r1, [pc, #440]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00d      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	019a      	lsls	r2, r3, #6
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	061b      	lsls	r3, r3, #24
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	071b      	lsls	r3, r3, #28
 8006588:	4964      	ldr	r1, [pc, #400]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006590:	4b61      	ldr	r3, [pc, #388]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006592:	2201      	movs	r2, #1
 8006594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006596:	f7fd fe11 	bl	80041bc <HAL_GetTick>
 800659a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800659c:	e008      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800659e:	f7fd fe0d 	bl	80041bc <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e129      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065b0:	4b5a      	ldr	r3, [pc, #360]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d079      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065d4:	4b52      	ldr	r3, [pc, #328]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065da:	f7fd fdef 	bl	80041bc <HAL_GetTick>
 80065de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065e0:	e008      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065e2:	f7fd fdeb 	bl	80041bc <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e107      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065f4:	4b49      	ldr	r3, [pc, #292]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006600:	d0ef      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d020      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800660e:	4b43      	ldr	r3, [pc, #268]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006614:	0f1b      	lsrs	r3, r3, #28
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	019a      	lsls	r2, r3, #6
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	061b      	lsls	r3, r3, #24
 8006628:	431a      	orrs	r2, r3
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	071b      	lsls	r3, r3, #28
 800662e:	493b      	ldr	r1, [pc, #236]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006636:	4b39      	ldr	r3, [pc, #228]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	3b01      	subs	r3, #1
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	4934      	ldr	r1, [pc, #208]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01e      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800665c:	4b2f      	ldr	r3, [pc, #188]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006662:	0e1b      	lsrs	r3, r3, #24
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	019a      	lsls	r2, r3, #6
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	061b      	lsls	r3, r3, #24
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	071b      	lsls	r3, r3, #28
 800667c:	4927      	ldr	r1, [pc, #156]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006684:	4b25      	ldr	r3, [pc, #148]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800668a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	4922      	ldr	r1, [pc, #136]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800669a:	4b21      	ldr	r3, [pc, #132]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800669c:	2201      	movs	r2, #1
 800669e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066a0:	f7fd fd8c 	bl	80041bc <HAL_GetTick>
 80066a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066a6:	e008      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80066a8:	f7fd fd88 	bl	80041bc <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e0a4      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ba:	4b18      	ldr	r3, [pc, #96]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c6:	d1ef      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 808b 	beq.w	80067ec <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	4b10      	ldr	r3, [pc, #64]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	4a0f      	ldr	r2, [pc, #60]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6413      	str	r3, [r2, #64]	; 0x40
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066f2:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a0b      	ldr	r2, [pc, #44]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80066f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066fe:	f7fd fd5d 	bl	80041bc <HAL_GetTick>
 8006702:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006704:	e010      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006706:	f7fd fd59 	bl	80041bc <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d909      	bls.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e075      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006718:	42470068 	.word	0x42470068
 800671c:	40023800 	.word	0x40023800
 8006720:	42470070 	.word	0x42470070
 8006724:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006728:	4b38      	ldr	r3, [pc, #224]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0e8      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006734:	4b36      	ldr	r3, [pc, #216]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02f      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	429a      	cmp	r2, r3
 8006750:	d028      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006752:	4b2f      	ldr	r3, [pc, #188]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800675c:	4b2d      	ldr	r3, [pc, #180]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006762:	4b2c      	ldr	r3, [pc, #176]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006768:	4a29      	ldr	r2, [pc, #164]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800676e:	4b28      	ldr	r3, [pc, #160]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b01      	cmp	r3, #1
 8006778:	d114      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800677a:	f7fd fd1f 	bl	80041bc <HAL_GetTick>
 800677e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006780:	e00a      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006782:	f7fd fd1b 	bl	80041bc <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006790:	4293      	cmp	r3, r2
 8006792:	d901      	bls.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e035      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0ee      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b0:	d10d      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c6:	4912      	ldr	r1, [pc, #72]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	608b      	str	r3, [r1, #8]
 80067cc:	e005      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80067ce:	4b10      	ldr	r3, [pc, #64]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	4a0f      	ldr	r2, [pc, #60]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067d8:	6093      	str	r3, [r2, #8]
 80067da:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e6:	490a      	ldr	r1, [pc, #40]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d004      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80067fe:	4b06      	ldr	r3, [pc, #24]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006800:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40007000 	.word	0x40007000
 8006810:	40023800 	.word	0x40023800
 8006814:	42470e40 	.word	0x42470e40
 8006818:	424711e0 	.word	0x424711e0

0800681c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e066      	b.n	8006900 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	7f5b      	ldrb	r3, [r3, #29]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fc ff36 	bl	80036b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	22ca      	movs	r2, #202	; 0xca
 8006854:	625a      	str	r2, [r3, #36]	; 0x24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2253      	movs	r2, #83	; 0x53
 800685c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f998 	bl	8006b94 <RTC_EnterInitMode>
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d12c      	bne.n	80068c8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800687c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006880:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6899      	ldr	r1, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68d2      	ldr	r2, [r2, #12]
 80068a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6919      	ldr	r1, [r3, #16]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	041a      	lsls	r2, r3, #16
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f99f 	bl	8006c02 <RTC_ExitInitMode>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d113      	bne.n	80068f6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	22ff      	movs	r2, #255	; 0xff
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	7f1b      	ldrb	r3, [r3, #28]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_RTC_SetTime+0x1c>
 8006920:	2302      	movs	r3, #2
 8006922:	e087      	b.n	8006a34 <HAL_RTC_SetTime+0x12c>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2202      	movs	r2, #2
 800692e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d126      	bne.n	8006984 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d102      	bne.n	800694a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2200      	movs	r2, #0
 8006948:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f97c 	bl	8006c4c <RTC_ByteToBcd2>
 8006954:	4603      	mov	r3, r0
 8006956:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 f975 	bl	8006c4c <RTC_ByteToBcd2>
 8006962:	4603      	mov	r3, r0
 8006964:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006966:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	789b      	ldrb	r3, [r3, #2]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 f96d 	bl	8006c4c <RTC_ByteToBcd2>
 8006972:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006974:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	78db      	ldrb	r3, [r3, #3]
 800697c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e018      	b.n	80069b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d102      	bne.n	8006998 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2200      	movs	r2, #0
 8006996:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	785b      	ldrb	r3, [r3, #1]
 80069a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069a4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80069aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	78db      	ldrb	r3, [r3, #3]
 80069b0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	22ca      	movs	r2, #202	; 0xca
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2253      	movs	r2, #83	; 0x53
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f8e4 	bl	8006b94 <RTC_EnterInitMode>
 80069cc:	4603      	mov	r3, r0
 80069ce:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d120      	bne.n	8006a18 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80069e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80069e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f8f7 	bl	8006c02 <RTC_ExitInitMode>
 8006a14:	4603      	mov	r3, r0
 8006a16:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	22ff      	movs	r2, #255	; 0xff
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	771a      	strb	r2, [r3, #28]

  return status;
 8006a32:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd90      	pop	{r4, r7, pc}

08006a3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a3c:	b590      	push	{r4, r7, lr}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	7f1b      	ldrb	r3, [r3, #28]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_RTC_SetDate+0x1c>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e071      	b.n	8006b3c <HAL_RTC_SetDate+0x100>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2202      	movs	r2, #2
 8006a62:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10e      	bne.n	8006a88 <HAL_RTC_SetDate+0x4c>
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	785b      	ldrb	r3, [r3, #1]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d008      	beq.n	8006a88 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	f023 0310 	bic.w	r3, r3, #16
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	330a      	adds	r3, #10
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d11c      	bne.n	8006ac8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	78db      	ldrb	r3, [r3, #3]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f8da 	bl	8006c4c <RTC_ByteToBcd2>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f8d3 	bl	8006c4c <RTC_ByteToBcd2>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006aaa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	789b      	ldrb	r3, [r3, #2]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 f8cb 	bl	8006c4c <RTC_ByteToBcd2>
 8006ab6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006ab8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e00e      	b.n	8006ae6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	78db      	ldrb	r3, [r3, #3]
 8006acc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ad4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006ada:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	22ca      	movs	r2, #202	; 0xca
 8006aec:	625a      	str	r2, [r3, #36]	; 0x24
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2253      	movs	r2, #83	; 0x53
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f84c 	bl	8006b94 <RTC_EnterInitMode>
 8006afc:	4603      	mov	r3, r0
 8006afe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b00:	7cfb      	ldrb	r3, [r7, #19]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10c      	bne.n	8006b20 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 f873 	bl	8006c02 <RTC_ExitInitMode>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b20:	7cfb      	ldrb	r3, [r7, #19]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	22ff      	movs	r2, #255	; 0xff
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	771a      	strb	r2, [r3, #28]

  return status;
 8006b3a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd90      	pop	{r4, r7, pc}

08006b44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b5e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b60:	f7fd fb2c 	bl	80041bc <HAL_GetTick>
 8006b64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b66:	e009      	b.n	8006b7c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b68:	f7fd fb28 	bl	80041bc <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b76:	d901      	bls.n	8006b7c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e007      	b.n	8006b8c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0ee      	beq.n	8006b68 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d122      	bne.n	8006bf8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bc0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc2:	f7fd fafb 	bl	80041bc <HAL_GetTick>
 8006bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006bc8:	e00c      	b.n	8006be4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bca:	f7fd faf7 	bl	80041bc <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bd8:	d904      	bls.n	8006be4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2204      	movs	r2, #4
 8006bde:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <RTC_EnterInitMode+0x64>
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d1e8      	bne.n	8006bca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c1c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ff89 	bl	8006b44 <HAL_RTC_WaitForSynchro>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006c5a:	e005      	b.n	8006c68 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	3b0a      	subs	r3, #10
 8006c66:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	2b09      	cmp	r3, #9
 8006c6c:	d8f6      	bhi.n	8006c5c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b2db      	uxtb	r3, r3
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e041      	b.n	8006d1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fc fdb7 	bl	8003820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f001 f843 	bl	8007d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d001      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e04e      	b.n	8006dda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a23      	ldr	r2, [pc, #140]	; (8006de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d022      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x80>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d66:	d01d      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x80>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1f      	ldr	r2, [pc, #124]	; (8006dec <HAL_TIM_Base_Start_IT+0xc8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d018      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x80>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1e      	ldr	r2, [pc, #120]	; (8006df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d013      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x80>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1c      	ldr	r2, [pc, #112]	; (8006df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x80>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1b      	ldr	r2, [pc, #108]	; (8006df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x80>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a19      	ldr	r2, [pc, #100]	; (8006dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x80>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a18      	ldr	r2, [pc, #96]	; (8006e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d111      	bne.n	8006dc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b06      	cmp	r3, #6
 8006db4:	d010      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0201 	orr.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc6:	e007      	b.n	8006dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40010400 	.word	0x40010400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40001800 	.word	0x40001800

08006e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e041      	b.n	8006e9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fc fc6c 	bl	8003708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	f000 ff84 	bl	8007d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d109      	bne.n	8006ec8 <HAL_TIM_PWM_Start+0x24>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e022      	b.n	8006f0e <HAL_TIM_PWM_Start+0x6a>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d109      	bne.n	8006ee2 <HAL_TIM_PWM_Start+0x3e>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	bf14      	ite	ne
 8006eda:	2301      	movne	r3, #1
 8006edc:	2300      	moveq	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	e015      	b.n	8006f0e <HAL_TIM_PWM_Start+0x6a>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d109      	bne.n	8006efc <HAL_TIM_PWM_Start+0x58>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	bf14      	ite	ne
 8006ef4:	2301      	movne	r3, #1
 8006ef6:	2300      	moveq	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	e008      	b.n	8006f0e <HAL_TIM_PWM_Start+0x6a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e07c      	b.n	8007010 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d104      	bne.n	8006f26 <HAL_TIM_PWM_Start+0x82>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f24:	e013      	b.n	8006f4e <HAL_TIM_PWM_Start+0xaa>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d104      	bne.n	8006f36 <HAL_TIM_PWM_Start+0x92>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f34:	e00b      	b.n	8006f4e <HAL_TIM_PWM_Start+0xaa>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIM_PWM_Start+0xa2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f44:	e003      	b.n	8006f4e <HAL_TIM_PWM_Start+0xaa>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2201      	movs	r2, #1
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 fb0e 	bl	8008578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a2d      	ldr	r2, [pc, #180]	; (8007018 <HAL_TIM_PWM_Start+0x174>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <HAL_TIM_PWM_Start+0xcc>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a2c      	ldr	r2, [pc, #176]	; (800701c <HAL_TIM_PWM_Start+0x178>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIM_PWM_Start+0xd0>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <HAL_TIM_PWM_Start+0xd2>
 8006f74:	2300      	movs	r3, #0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a22      	ldr	r2, [pc, #136]	; (8007018 <HAL_TIM_PWM_Start+0x174>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d022      	beq.n	8006fda <HAL_TIM_PWM_Start+0x136>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d01d      	beq.n	8006fda <HAL_TIM_PWM_Start+0x136>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <HAL_TIM_PWM_Start+0x17c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d018      	beq.n	8006fda <HAL_TIM_PWM_Start+0x136>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <HAL_TIM_PWM_Start+0x180>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d013      	beq.n	8006fda <HAL_TIM_PWM_Start+0x136>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <HAL_TIM_PWM_Start+0x184>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00e      	beq.n	8006fda <HAL_TIM_PWM_Start+0x136>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a16      	ldr	r2, [pc, #88]	; (800701c <HAL_TIM_PWM_Start+0x178>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d009      	beq.n	8006fda <HAL_TIM_PWM_Start+0x136>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a18      	ldr	r2, [pc, #96]	; (800702c <HAL_TIM_PWM_Start+0x188>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_TIM_PWM_Start+0x136>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a16      	ldr	r2, [pc, #88]	; (8007030 <HAL_TIM_PWM_Start+0x18c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d111      	bne.n	8006ffe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b06      	cmp	r3, #6
 8006fea:	d010      	beq.n	800700e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0201 	orr.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffc:	e007      	b.n	800700e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0201 	orr.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40010000 	.word	0x40010000
 800701c:	40010400 	.word	0x40010400
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40014000 	.word	0x40014000
 8007030:	40001800 	.word	0x40001800

08007034 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2200      	movs	r2, #0
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fa96 	bl	8008578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a2e      	ldr	r2, [pc, #184]	; (800710c <HAL_TIM_PWM_Stop+0xd8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIM_PWM_Stop+0x2c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2d      	ldr	r2, [pc, #180]	; (8007110 <HAL_TIM_PWM_Stop+0xdc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d101      	bne.n	8007064 <HAL_TIM_PWM_Stop+0x30>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <HAL_TIM_PWM_Stop+0x32>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d017      	beq.n	800709a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	f241 1311 	movw	r3, #4369	; 0x1111
 8007074:	4013      	ands	r3, r2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10f      	bne.n	800709a <HAL_TIM_PWM_Stop+0x66>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a1a      	ldr	r2, [r3, #32]
 8007080:	f240 4344 	movw	r3, #1092	; 0x444
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d107      	bne.n	800709a <HAL_TIM_PWM_Stop+0x66>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6a1a      	ldr	r2, [r3, #32]
 80070a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10f      	bne.n	80070ca <HAL_TIM_PWM_Stop+0x96>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6a1a      	ldr	r2, [r3, #32]
 80070b0:	f240 4344 	movw	r3, #1092	; 0x444
 80070b4:	4013      	ands	r3, r2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <HAL_TIM_PWM_Stop+0x96>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_TIM_PWM_Stop+0xa6>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070d8:	e013      	b.n	8007102 <HAL_TIM_PWM_Stop+0xce>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Stop+0xb6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070e8:	e00b      	b.n	8007102 <HAL_TIM_PWM_Stop+0xce>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Stop+0xc6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f8:	e003      	b.n	8007102 <HAL_TIM_PWM_Stop+0xce>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40010000 	.word	0x40010000
 8007110:	40010400 	.word	0x40010400

08007114 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <HAL_TIM_PWM_Start_IT+0x28>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	bf14      	ite	ne
 8007134:	2301      	movne	r3, #1
 8007136:	2300      	moveq	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	e022      	b.n	8007182 <HAL_TIM_PWM_Start_IT+0x6e>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d109      	bne.n	8007156 <HAL_TIM_PWM_Start_IT+0x42>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	bf14      	ite	ne
 800714e:	2301      	movne	r3, #1
 8007150:	2300      	moveq	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	e015      	b.n	8007182 <HAL_TIM_PWM_Start_IT+0x6e>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b08      	cmp	r3, #8
 800715a:	d109      	bne.n	8007170 <HAL_TIM_PWM_Start_IT+0x5c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	bf14      	ite	ne
 8007168:	2301      	movne	r3, #1
 800716a:	2300      	moveq	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	e008      	b.n	8007182 <HAL_TIM_PWM_Start_IT+0x6e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	bf14      	ite	ne
 800717c:	2301      	movne	r3, #1
 800717e:	2300      	moveq	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e0c7      	b.n	800731a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <HAL_TIM_PWM_Start_IT+0x86>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007198:	e013      	b.n	80071c2 <HAL_TIM_PWM_Start_IT+0xae>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b04      	cmp	r3, #4
 800719e:	d104      	bne.n	80071aa <HAL_TIM_PWM_Start_IT+0x96>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071a8:	e00b      	b.n	80071c2 <HAL_TIM_PWM_Start_IT+0xae>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_PWM_Start_IT+0xa6>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071b8:	e003      	b.n	80071c2 <HAL_TIM_PWM_Start_IT+0xae>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b0c      	cmp	r3, #12
 80071c6:	d841      	bhi.n	800724c <HAL_TIM_PWM_Start_IT+0x138>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	08007205 	.word	0x08007205
 80071d4:	0800724d 	.word	0x0800724d
 80071d8:	0800724d 	.word	0x0800724d
 80071dc:	0800724d 	.word	0x0800724d
 80071e0:	08007217 	.word	0x08007217
 80071e4:	0800724d 	.word	0x0800724d
 80071e8:	0800724d 	.word	0x0800724d
 80071ec:	0800724d 	.word	0x0800724d
 80071f0:	08007229 	.word	0x08007229
 80071f4:	0800724d 	.word	0x0800724d
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	0800724d 	.word	0x0800724d
 8007200:	0800723b 	.word	0x0800723b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0202 	orr.w	r2, r2, #2
 8007212:	60da      	str	r2, [r3, #12]
      break;
 8007214:	e01d      	b.n	8007252 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0204 	orr.w	r2, r2, #4
 8007224:	60da      	str	r2, [r3, #12]
      break;
 8007226:	e014      	b.n	8007252 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0208 	orr.w	r2, r2, #8
 8007236:	60da      	str	r2, [r3, #12]
      break;
 8007238:	e00b      	b.n	8007252 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0210 	orr.w	r2, r2, #16
 8007248:	60da      	str	r2, [r3, #12]
      break;
 800724a:	e002      	b.n	8007252 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	73fb      	strb	r3, [r7, #15]
      break;
 8007250:	bf00      	nop
  }

  if (status == HAL_OK)
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d15f      	bne.n	8007318 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f989 	bl	8008578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a2e      	ldr	r2, [pc, #184]	; (8007324 <HAL_TIM_PWM_Start_IT+0x210>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d004      	beq.n	800727a <HAL_TIM_PWM_Start_IT+0x166>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a2c      	ldr	r2, [pc, #176]	; (8007328 <HAL_TIM_PWM_Start_IT+0x214>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d101      	bne.n	800727e <HAL_TIM_PWM_Start_IT+0x16a>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <HAL_TIM_PWM_Start_IT+0x16c>
 800727e:	2300      	movs	r3, #0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007292:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_TIM_PWM_Start_IT+0x210>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d022      	beq.n	80072e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a6:	d01d      	beq.n	80072e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1f      	ldr	r2, [pc, #124]	; (800732c <HAL_TIM_PWM_Start_IT+0x218>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d018      	beq.n	80072e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <HAL_TIM_PWM_Start_IT+0x21c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <HAL_TIM_PWM_Start_IT+0x220>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00e      	beq.n	80072e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a17      	ldr	r2, [pc, #92]	; (8007328 <HAL_TIM_PWM_Start_IT+0x214>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d009      	beq.n	80072e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a18      	ldr	r2, [pc, #96]	; (8007338 <HAL_TIM_PWM_Start_IT+0x224>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a17      	ldr	r2, [pc, #92]	; (800733c <HAL_TIM_PWM_Start_IT+0x228>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d111      	bne.n	8007308 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b06      	cmp	r3, #6
 80072f4:	d010      	beq.n	8007318 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0201 	orr.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007306:	e007      	b.n	8007318 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	40010000 	.word	0x40010000
 8007328:	40010400 	.word	0x40010400
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800
 8007334:	40000c00 	.word	0x40000c00
 8007338:	40014000 	.word	0x40014000
 800733c:	40001800 	.word	0x40001800

08007340 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e041      	b.n	80073d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fc fa0a 	bl	8003780 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f000 fce6 	bl	8007d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <HAL_TIM_IC_Start_IT+0x1e>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	e013      	b.n	8007426 <HAL_TIM_IC_Start_IT+0x46>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b04      	cmp	r3, #4
 8007402:	d104      	bne.n	800740e <HAL_TIM_IC_Start_IT+0x2e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800740a:	b2db      	uxtb	r3, r3
 800740c:	e00b      	b.n	8007426 <HAL_TIM_IC_Start_IT+0x46>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b08      	cmp	r3, #8
 8007412:	d104      	bne.n	800741e <HAL_TIM_IC_Start_IT+0x3e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800741a:	b2db      	uxtb	r3, r3
 800741c:	e003      	b.n	8007426 <HAL_TIM_IC_Start_IT+0x46>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007424:	b2db      	uxtb	r3, r3
 8007426:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <HAL_TIM_IC_Start_IT+0x58>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e013      	b.n	8007460 <HAL_TIM_IC_Start_IT+0x80>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b04      	cmp	r3, #4
 800743c:	d104      	bne.n	8007448 <HAL_TIM_IC_Start_IT+0x68>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007444:	b2db      	uxtb	r3, r3
 8007446:	e00b      	b.n	8007460 <HAL_TIM_IC_Start_IT+0x80>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b08      	cmp	r3, #8
 800744c:	d104      	bne.n	8007458 <HAL_TIM_IC_Start_IT+0x78>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007454:	b2db      	uxtb	r3, r3
 8007456:	e003      	b.n	8007460 <HAL_TIM_IC_Start_IT+0x80>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800745e:	b2db      	uxtb	r3, r3
 8007460:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d102      	bne.n	800746e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007468:	7b7b      	ldrb	r3, [r7, #13]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d001      	beq.n	8007472 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e0cc      	b.n	800760c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <HAL_TIM_IC_Start_IT+0xa2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007480:	e013      	b.n	80074aa <HAL_TIM_IC_Start_IT+0xca>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b04      	cmp	r3, #4
 8007486:	d104      	bne.n	8007492 <HAL_TIM_IC_Start_IT+0xb2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007490:	e00b      	b.n	80074aa <HAL_TIM_IC_Start_IT+0xca>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b08      	cmp	r3, #8
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_IC_Start_IT+0xc2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a0:	e003      	b.n	80074aa <HAL_TIM_IC_Start_IT+0xca>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <HAL_TIM_IC_Start_IT+0xda>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074b8:	e013      	b.n	80074e2 <HAL_TIM_IC_Start_IT+0x102>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d104      	bne.n	80074ca <HAL_TIM_IC_Start_IT+0xea>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074c8:	e00b      	b.n	80074e2 <HAL_TIM_IC_Start_IT+0x102>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d104      	bne.n	80074da <HAL_TIM_IC_Start_IT+0xfa>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d8:	e003      	b.n	80074e2 <HAL_TIM_IC_Start_IT+0x102>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2202      	movs	r2, #2
 80074de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b0c      	cmp	r3, #12
 80074e6:	d841      	bhi.n	800756c <HAL_TIM_IC_Start_IT+0x18c>
 80074e8:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <HAL_TIM_IC_Start_IT+0x110>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007525 	.word	0x08007525
 80074f4:	0800756d 	.word	0x0800756d
 80074f8:	0800756d 	.word	0x0800756d
 80074fc:	0800756d 	.word	0x0800756d
 8007500:	08007537 	.word	0x08007537
 8007504:	0800756d 	.word	0x0800756d
 8007508:	0800756d 	.word	0x0800756d
 800750c:	0800756d 	.word	0x0800756d
 8007510:	08007549 	.word	0x08007549
 8007514:	0800756d 	.word	0x0800756d
 8007518:	0800756d 	.word	0x0800756d
 800751c:	0800756d 	.word	0x0800756d
 8007520:	0800755b 	.word	0x0800755b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0202 	orr.w	r2, r2, #2
 8007532:	60da      	str	r2, [r3, #12]
      break;
 8007534:	e01d      	b.n	8007572 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0204 	orr.w	r2, r2, #4
 8007544:	60da      	str	r2, [r3, #12]
      break;
 8007546:	e014      	b.n	8007572 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68da      	ldr	r2, [r3, #12]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0208 	orr.w	r2, r2, #8
 8007556:	60da      	str	r2, [r3, #12]
      break;
 8007558:	e00b      	b.n	8007572 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 0210 	orr.w	r2, r2, #16
 8007568:	60da      	str	r2, [r3, #12]
      break;
 800756a:	e002      	b.n	8007572 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
      break;
 8007570:	bf00      	nop
  }

  if (status == HAL_OK)
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d148      	bne.n	800760a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2201      	movs	r2, #1
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fff9 	bl	8008578 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a22      	ldr	r2, [pc, #136]	; (8007614 <HAL_TIM_IC_Start_IT+0x234>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d022      	beq.n	80075d6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007598:	d01d      	beq.n	80075d6 <HAL_TIM_IC_Start_IT+0x1f6>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <HAL_TIM_IC_Start_IT+0x238>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d018      	beq.n	80075d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a1c      	ldr	r2, [pc, #112]	; (800761c <HAL_TIM_IC_Start_IT+0x23c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <HAL_TIM_IC_Start_IT+0x240>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00e      	beq.n	80075d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a19      	ldr	r2, [pc, #100]	; (8007624 <HAL_TIM_IC_Start_IT+0x244>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d009      	beq.n	80075d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a18      	ldr	r2, [pc, #96]	; (8007628 <HAL_TIM_IC_Start_IT+0x248>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d004      	beq.n	80075d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a16      	ldr	r2, [pc, #88]	; (800762c <HAL_TIM_IC_Start_IT+0x24c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d111      	bne.n	80075fa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b06      	cmp	r3, #6
 80075e6:	d010      	beq.n	800760a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f8:	e007      	b.n	800760a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0201 	orr.w	r2, r2, #1
 8007608:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	40010000 	.word	0x40010000
 8007618:	40000400 	.word	0x40000400
 800761c:	40000800 	.word	0x40000800
 8007620:	40000c00 	.word	0x40000c00
 8007624:	40010400 	.word	0x40010400
 8007628:	40014000 	.word	0x40014000
 800762c:	40001800 	.word	0x40001800

08007630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b02      	cmp	r3, #2
 8007644:	d122      	bne.n	800768c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b02      	cmp	r3, #2
 8007652:	d11b      	bne.n	800768c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f06f 0202 	mvn.w	r2, #2
 800765c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fc fc50 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8007678:	e005      	b.n	8007686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fb4a 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fb51 	bl	8007d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b04      	cmp	r3, #4
 8007698:	d122      	bne.n	80076e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d11b      	bne.n	80076e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0204 	mvn.w	r2, #4
 80076b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2202      	movs	r2, #2
 80076b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fc fc26 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 80076cc:	e005      	b.n	80076da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fb20 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fb27 	bl	8007d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0308 	and.w	r3, r3, #8
 80076ea:	2b08      	cmp	r3, #8
 80076ec:	d122      	bne.n	8007734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f003 0308 	and.w	r3, r3, #8
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d11b      	bne.n	8007734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0208 	mvn.w	r2, #8
 8007704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2204      	movs	r2, #4
 800770a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7fc fbfc 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 faf6 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fafd 	bl	8007d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f003 0310 	and.w	r3, r3, #16
 800773e:	2b10      	cmp	r3, #16
 8007740:	d122      	bne.n	8007788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b10      	cmp	r3, #16
 800774e:	d11b      	bne.n	8007788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f06f 0210 	mvn.w	r2, #16
 8007758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2208      	movs	r2, #8
 800775e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fc fbd2 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8007774:	e005      	b.n	8007782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 facc 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fad3 	bl	8007d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b01      	cmp	r3, #1
 8007794:	d10e      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d107      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f06f 0201 	mvn.w	r2, #1
 80077ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fb f8c8 	bl	8002944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077be:	2b80      	cmp	r3, #128	; 0x80
 80077c0:	d10e      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077cc:	2b80      	cmp	r3, #128	; 0x80
 80077ce:	d107      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 ff78 	bl	80086d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d10e      	bne.n	800780c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b40      	cmp	r3, #64	; 0x40
 80077fa:	d107      	bne.n	800780c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa98 	bl	8007d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b20      	cmp	r3, #32
 8007818:	d10e      	bne.n	8007838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b20      	cmp	r3, #32
 8007826:	d107      	bne.n	8007838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0220 	mvn.w	r2, #32
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 ff42 	bl	80086bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007856:	2b01      	cmp	r3, #1
 8007858:	d101      	bne.n	800785e <HAL_TIM_IC_ConfigChannel+0x1e>
 800785a:	2302      	movs	r3, #2
 800785c:	e088      	b.n	8007970 <HAL_TIM_IC_ConfigChannel+0x130>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	6819      	ldr	r1, [r3, #0]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f000 fcb8 	bl	80081f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699a      	ldr	r2, [r3, #24]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 020c 	bic.w	r2, r2, #12
 800788e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6999      	ldr	r1, [r3, #24]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	619a      	str	r2, [r3, #24]
 80078a2:	e060      	b.n	8007966 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d11c      	bne.n	80078e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6819      	ldr	r1, [r3, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f000 fd3c 	bl	8008336 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80078cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6999      	ldr	r1, [r3, #24]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	021a      	lsls	r2, r3, #8
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	619a      	str	r2, [r3, #24]
 80078e2:	e040      	b.n	8007966 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d11b      	bne.n	8007922 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f000 fd89 	bl	8008410 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 020c 	bic.w	r2, r2, #12
 800790c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69d9      	ldr	r1, [r3, #28]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	61da      	str	r2, [r3, #28]
 8007920:	e021      	b.n	8007966 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b0c      	cmp	r3, #12
 8007926:	d11c      	bne.n	8007962 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f000 fda6 	bl	8008488 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69da      	ldr	r2, [r3, #28]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800794a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69d9      	ldr	r1, [r3, #28]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	021a      	lsls	r2, r3, #8
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	61da      	str	r2, [r3, #28]
 8007960:	e001      	b.n	8007966 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007992:	2302      	movs	r3, #2
 8007994:	e0ae      	b.n	8007af4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b0c      	cmp	r3, #12
 80079a2:	f200 809f 	bhi.w	8007ae4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079a6:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079e1 	.word	0x080079e1
 80079b0:	08007ae5 	.word	0x08007ae5
 80079b4:	08007ae5 	.word	0x08007ae5
 80079b8:	08007ae5 	.word	0x08007ae5
 80079bc:	08007a21 	.word	0x08007a21
 80079c0:	08007ae5 	.word	0x08007ae5
 80079c4:	08007ae5 	.word	0x08007ae5
 80079c8:	08007ae5 	.word	0x08007ae5
 80079cc:	08007a63 	.word	0x08007a63
 80079d0:	08007ae5 	.word	0x08007ae5
 80079d4:	08007ae5 	.word	0x08007ae5
 80079d8:	08007ae5 	.word	0x08007ae5
 80079dc:	08007aa3 	.word	0x08007aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fa52 	bl	8007e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0208 	orr.w	r2, r2, #8
 80079fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0204 	bic.w	r2, r2, #4
 8007a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6999      	ldr	r1, [r3, #24]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	619a      	str	r2, [r3, #24]
      break;
 8007a1e:	e064      	b.n	8007aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 faa2 	bl	8007f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6999      	ldr	r1, [r3, #24]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	021a      	lsls	r2, r3, #8
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	619a      	str	r2, [r3, #24]
      break;
 8007a60:	e043      	b.n	8007aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 faf7 	bl	800805c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0208 	orr.w	r2, r2, #8
 8007a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0204 	bic.w	r2, r2, #4
 8007a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69d9      	ldr	r1, [r3, #28]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	61da      	str	r2, [r3, #28]
      break;
 8007aa0:	e023      	b.n	8007aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fb4b 	bl	8008144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69da      	ldr	r2, [r3, #28]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69da      	ldr	r2, [r3, #28]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69d9      	ldr	r1, [r3, #28]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	021a      	lsls	r2, r3, #8
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	61da      	str	r2, [r3, #28]
      break;
 8007ae2:	e002      	b.n	8007aea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_TIM_ConfigClockSource+0x1c>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e0b4      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x186>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b50:	d03e      	beq.n	8007bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8007b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b56:	f200 8087 	bhi.w	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5e:	f000 8086 	beq.w	8007c6e <HAL_TIM_ConfigClockSource+0x172>
 8007b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b66:	d87f      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b68:	2b70      	cmp	r3, #112	; 0x70
 8007b6a:	d01a      	beq.n	8007ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8007b6c:	2b70      	cmp	r3, #112	; 0x70
 8007b6e:	d87b      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b70:	2b60      	cmp	r3, #96	; 0x60
 8007b72:	d050      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0x11a>
 8007b74:	2b60      	cmp	r3, #96	; 0x60
 8007b76:	d877      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b78:	2b50      	cmp	r3, #80	; 0x50
 8007b7a:	d03c      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8007b7c:	2b50      	cmp	r3, #80	; 0x50
 8007b7e:	d873      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d058      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x13a>
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d86f      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b88:	2b30      	cmp	r3, #48	; 0x30
 8007b8a:	d064      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x15a>
 8007b8c:	2b30      	cmp	r3, #48	; 0x30
 8007b8e:	d86b      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d060      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x15a>
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	d867      	bhi.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d05c      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x15a>
 8007b9c:	2b10      	cmp	r3, #16
 8007b9e:	d05a      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x15a>
 8007ba0:	e062      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6899      	ldr	r1, [r3, #8]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f000 fcc1 	bl	8008538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	609a      	str	r2, [r3, #8]
      break;
 8007bce:	e04f      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	6899      	ldr	r1, [r3, #8]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f000 fcaa 	bl	8008538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bf2:	609a      	str	r2, [r3, #8]
      break;
 8007bf4:	e03c      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	6859      	ldr	r1, [r3, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f000 fb68 	bl	80082d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2150      	movs	r1, #80	; 0x50
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fc77 	bl	8008502 <TIM_ITRx_SetConfig>
      break;
 8007c14:	e02c      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6859      	ldr	r1, [r3, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f000 fbc4 	bl	80083b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2160      	movs	r1, #96	; 0x60
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fc67 	bl	8008502 <TIM_ITRx_SetConfig>
      break;
 8007c34:	e01c      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6859      	ldr	r1, [r3, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f000 fb48 	bl	80082d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2140      	movs	r1, #64	; 0x40
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fc57 	bl	8008502 <TIM_ITRx_SetConfig>
      break;
 8007c54:	e00c      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f000 fc4e 	bl	8008502 <TIM_ITRx_SetConfig>
      break;
 8007c66:	e003      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6c:	e000      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b0c      	cmp	r3, #12
 8007c9e:	d831      	bhi.n	8007d04 <HAL_TIM_ReadCapturedValue+0x78>
 8007ca0:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca6:	bf00      	nop
 8007ca8:	08007cdd 	.word	0x08007cdd
 8007cac:	08007d05 	.word	0x08007d05
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007ce7 	.word	0x08007ce7
 8007cbc:	08007d05 	.word	0x08007d05
 8007cc0:	08007d05 	.word	0x08007d05
 8007cc4:	08007d05 	.word	0x08007d05
 8007cc8:	08007cf1 	.word	0x08007cf1
 8007ccc:	08007d05 	.word	0x08007d05
 8007cd0:	08007d05 	.word	0x08007d05
 8007cd4:	08007d05 	.word	0x08007d05
 8007cd8:	08007cfb 	.word	0x08007cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce2:	60fb      	str	r3, [r7, #12]

      break;
 8007ce4:	e00f      	b.n	8007d06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	60fb      	str	r3, [r7, #12]

      break;
 8007cee:	e00a      	b.n	8007d06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	60fb      	str	r3, [r7, #12]

      break;
 8007cf8:	e005      	b.n	8007d06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	60fb      	str	r3, [r7, #12]

      break;
 8007d02:	e000      	b.n	8007d06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007d04:	bf00      	nop
  }

  return tmpreg;
 8007d06:	68fb      	ldr	r3, [r7, #12]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a40      	ldr	r2, [pc, #256]	; (8007e64 <TIM_Base_SetConfig+0x114>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <TIM_Base_SetConfig+0x40>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6e:	d00f      	beq.n	8007d90 <TIM_Base_SetConfig+0x40>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a3d      	ldr	r2, [pc, #244]	; (8007e68 <TIM_Base_SetConfig+0x118>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00b      	beq.n	8007d90 <TIM_Base_SetConfig+0x40>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a3c      	ldr	r2, [pc, #240]	; (8007e6c <TIM_Base_SetConfig+0x11c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d007      	beq.n	8007d90 <TIM_Base_SetConfig+0x40>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a3b      	ldr	r2, [pc, #236]	; (8007e70 <TIM_Base_SetConfig+0x120>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_Base_SetConfig+0x40>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a3a      	ldr	r2, [pc, #232]	; (8007e74 <TIM_Base_SetConfig+0x124>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d108      	bne.n	8007da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a2f      	ldr	r2, [pc, #188]	; (8007e64 <TIM_Base_SetConfig+0x114>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d02b      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db0:	d027      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a2c      	ldr	r2, [pc, #176]	; (8007e68 <TIM_Base_SetConfig+0x118>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d023      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a2b      	ldr	r2, [pc, #172]	; (8007e6c <TIM_Base_SetConfig+0x11c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d01f      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a2a      	ldr	r2, [pc, #168]	; (8007e70 <TIM_Base_SetConfig+0x120>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d01b      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a29      	ldr	r2, [pc, #164]	; (8007e74 <TIM_Base_SetConfig+0x124>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d017      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a28      	ldr	r2, [pc, #160]	; (8007e78 <TIM_Base_SetConfig+0x128>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d013      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a27      	ldr	r2, [pc, #156]	; (8007e7c <TIM_Base_SetConfig+0x12c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00f      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a26      	ldr	r2, [pc, #152]	; (8007e80 <TIM_Base_SetConfig+0x130>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00b      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a25      	ldr	r2, [pc, #148]	; (8007e84 <TIM_Base_SetConfig+0x134>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d007      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a24      	ldr	r2, [pc, #144]	; (8007e88 <TIM_Base_SetConfig+0x138>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d003      	beq.n	8007e02 <TIM_Base_SetConfig+0xb2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a23      	ldr	r2, [pc, #140]	; (8007e8c <TIM_Base_SetConfig+0x13c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d108      	bne.n	8007e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <TIM_Base_SetConfig+0x114>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d003      	beq.n	8007e48 <TIM_Base_SetConfig+0xf8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a0c      	ldr	r2, [pc, #48]	; (8007e74 <TIM_Base_SetConfig+0x124>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d103      	bne.n	8007e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	615a      	str	r2, [r3, #20]
}
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40000c00 	.word	0x40000c00
 8007e74:	40010400 	.word	0x40010400
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800
 8007e84:	40001800 	.word	0x40001800
 8007e88:	40001c00 	.word	0x40001c00
 8007e8c:	40002000 	.word	0x40002000

08007e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	f023 0201 	bic.w	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0303 	bic.w	r3, r3, #3
 8007ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f023 0302 	bic.w	r3, r3, #2
 8007ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a20      	ldr	r2, [pc, #128]	; (8007f68 <TIM_OC1_SetConfig+0xd8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_OC1_SetConfig+0x64>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a1f      	ldr	r2, [pc, #124]	; (8007f6c <TIM_OC1_SetConfig+0xdc>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d10c      	bne.n	8007f0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f023 0308 	bic.w	r3, r3, #8
 8007efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f023 0304 	bic.w	r3, r3, #4
 8007f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <TIM_OC1_SetConfig+0xd8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d003      	beq.n	8007f1e <TIM_OC1_SetConfig+0x8e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a14      	ldr	r2, [pc, #80]	; (8007f6c <TIM_OC1_SetConfig+0xdc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d111      	bne.n	8007f42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	621a      	str	r2, [r3, #32]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	40010000 	.word	0x40010000
 8007f6c:	40010400 	.word	0x40010400

08007f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f023 0210 	bic.w	r2, r3, #16
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f023 0320 	bic.w	r3, r3, #32
 8007fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a22      	ldr	r2, [pc, #136]	; (8008054 <TIM_OC2_SetConfig+0xe4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_OC2_SetConfig+0x68>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a21      	ldr	r2, [pc, #132]	; (8008058 <TIM_OC2_SetConfig+0xe8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d10d      	bne.n	8007ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	011b      	lsls	r3, r3, #4
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a17      	ldr	r2, [pc, #92]	; (8008054 <TIM_OC2_SetConfig+0xe4>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d003      	beq.n	8008004 <TIM_OC2_SetConfig+0x94>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a16      	ldr	r2, [pc, #88]	; (8008058 <TIM_OC2_SetConfig+0xe8>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d113      	bne.n	800802c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800800a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40010000 	.word	0x40010000
 8008058:	40010400 	.word	0x40010400

0800805c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0303 	bic.w	r3, r3, #3
 8008092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a21      	ldr	r2, [pc, #132]	; (800813c <TIM_OC3_SetConfig+0xe0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_OC3_SetConfig+0x66>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a20      	ldr	r2, [pc, #128]	; (8008140 <TIM_OC3_SetConfig+0xe4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d10d      	bne.n	80080de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	021b      	lsls	r3, r3, #8
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a16      	ldr	r2, [pc, #88]	; (800813c <TIM_OC3_SetConfig+0xe0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d003      	beq.n	80080ee <TIM_OC3_SetConfig+0x92>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a15      	ldr	r2, [pc, #84]	; (8008140 <TIM_OC3_SetConfig+0xe4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d113      	bne.n	8008116 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	621a      	str	r2, [r3, #32]
}
 8008130:	bf00      	nop
 8008132:	371c      	adds	r7, #28
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	40010000 	.word	0x40010000
 8008140:	40010400 	.word	0x40010400

08008144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	021b      	lsls	r3, r3, #8
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800818e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	031b      	lsls	r3, r3, #12
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4313      	orrs	r3, r2
 800819a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a12      	ldr	r2, [pc, #72]	; (80081e8 <TIM_OC4_SetConfig+0xa4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_OC4_SetConfig+0x68>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a11      	ldr	r2, [pc, #68]	; (80081ec <TIM_OC4_SetConfig+0xa8>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d109      	bne.n	80081c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	019b      	lsls	r3, r3, #6
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	621a      	str	r2, [r3, #32]
}
 80081da:	bf00      	nop
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	40010000 	.word	0x40010000
 80081ec:	40010400 	.word	0x40010400

080081f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	f023 0201 	bic.w	r2, r3, #1
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4a28      	ldr	r2, [pc, #160]	; (80082bc <TIM_TI1_SetConfig+0xcc>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d01b      	beq.n	8008256 <TIM_TI1_SetConfig+0x66>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008224:	d017      	beq.n	8008256 <TIM_TI1_SetConfig+0x66>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4a25      	ldr	r2, [pc, #148]	; (80082c0 <TIM_TI1_SetConfig+0xd0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d013      	beq.n	8008256 <TIM_TI1_SetConfig+0x66>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4a24      	ldr	r2, [pc, #144]	; (80082c4 <TIM_TI1_SetConfig+0xd4>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d00f      	beq.n	8008256 <TIM_TI1_SetConfig+0x66>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a23      	ldr	r2, [pc, #140]	; (80082c8 <TIM_TI1_SetConfig+0xd8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00b      	beq.n	8008256 <TIM_TI1_SetConfig+0x66>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a22      	ldr	r2, [pc, #136]	; (80082cc <TIM_TI1_SetConfig+0xdc>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d007      	beq.n	8008256 <TIM_TI1_SetConfig+0x66>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4a21      	ldr	r2, [pc, #132]	; (80082d0 <TIM_TI1_SetConfig+0xe0>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d003      	beq.n	8008256 <TIM_TI1_SetConfig+0x66>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4a20      	ldr	r2, [pc, #128]	; (80082d4 <TIM_TI1_SetConfig+0xe4>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d101      	bne.n	800825a <TIM_TI1_SetConfig+0x6a>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <TIM_TI1_SetConfig+0x6c>
 800825a:	2300      	movs	r3, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d008      	beq.n	8008272 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4313      	orrs	r3, r2
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	e003      	b.n	800827a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	011b      	lsls	r3, r3, #4
 8008286:	b2db      	uxtb	r3, r3
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	4313      	orrs	r3, r2
 800828c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f023 030a 	bic.w	r3, r3, #10
 8008294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f003 030a 	and.w	r3, r3, #10
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	621a      	str	r2, [r3, #32]
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	40010000 	.word	0x40010000
 80082c0:	40000400 	.word	0x40000400
 80082c4:	40000800 	.word	0x40000800
 80082c8:	40000c00 	.word	0x40000c00
 80082cc:	40010400 	.word	0x40010400
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40001800 	.word	0x40001800

080082d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f023 0201 	bic.w	r2, r3, #1
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f023 030a 	bic.w	r3, r3, #10
 8008314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	621a      	str	r2, [r3, #32]
}
 800832a:	bf00      	nop
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008336:	b480      	push	{r7}
 8008338:	b087      	sub	sp, #28
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	f023 0210 	bic.w	r2, r3, #16
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008362:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	031b      	lsls	r3, r3, #12
 800837a:	b29b      	uxth	r3, r3
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008388:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	621a      	str	r2, [r3, #32]
}
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	f023 0210 	bic.w	r2, r3, #16
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	031b      	lsls	r3, r3, #12
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f023 0303 	bic.w	r3, r3, #3
 800843c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4313      	orrs	r3, r2
 8008444:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800844c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	b2db      	uxtb	r3, r3
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008460:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	4313      	orrs	r3, r2
 800846e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	621a      	str	r2, [r3, #32]
}
 800847c:	bf00      	nop
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4313      	orrs	r3, r2
 80084be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	031b      	lsls	r3, r3, #12
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80084da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	031b      	lsls	r3, r3, #12
 80084e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	621a      	str	r2, [r3, #32]
}
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008502:	b480      	push	{r7}
 8008504:	b085      	sub	sp, #20
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	f043 0307 	orr.w	r3, r3, #7
 8008524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	609a      	str	r2, [r3, #8]
}
 800852c:	bf00      	nop
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	021a      	lsls	r2, r3, #8
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	431a      	orrs	r2, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4313      	orrs	r3, r2
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	4313      	orrs	r3, r2
 8008564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	609a      	str	r2, [r3, #8]
}
 800856c:	bf00      	nop
 800856e:	371c      	adds	r7, #28
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	2201      	movs	r2, #1
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a1a      	ldr	r2, [r3, #32]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	43db      	mvns	r3, r3
 800859a:	401a      	ands	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a1a      	ldr	r2, [r3, #32]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f003 031f 	and.w	r3, r3, #31
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	fa01 f303 	lsl.w	r3, r1, r3
 80085b0:	431a      	orrs	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
	...

080085c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d8:	2302      	movs	r3, #2
 80085da:	e05a      	b.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a21      	ldr	r2, [pc, #132]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d022      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008628:	d01d      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d018      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a1b      	ldr	r2, [pc, #108]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1a      	ldr	r2, [pc, #104]	; (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00e      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a18      	ldr	r2, [pc, #96]	; (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d009      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a17      	ldr	r2, [pc, #92]	; (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d10c      	bne.n	8008680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800866c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	4313      	orrs	r3, r2
 8008676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000800 	.word	0x40000800
 80086ac:	40000c00 	.word	0x40000c00
 80086b0:	40010400 	.word	0x40010400
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40001800 	.word	0x40001800

080086bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e03f      	b.n	8008776 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fb f972 	bl	80039f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2224      	movs	r2, #36	; 0x24
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fddf 	bl	80092ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800873c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	695a      	ldr	r2, [r3, #20]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800874c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800875c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b08a      	sub	sp, #40	; 0x28
 8008782:	af02      	add	r7, sp, #8
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	603b      	str	r3, [r7, #0]
 800878a:	4613      	mov	r3, r2
 800878c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b20      	cmp	r3, #32
 800879c:	d17c      	bne.n	8008898 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_UART_Transmit+0x2c>
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e075      	b.n	800889a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_UART_Transmit+0x3e>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e06e      	b.n	800889a <HAL_UART_Transmit+0x11c>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2221      	movs	r2, #33	; 0x21
 80087ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087d2:	f7fb fcf3 	bl	80041bc <HAL_GetTick>
 80087d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	88fa      	ldrh	r2, [r7, #6]
 80087e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ec:	d108      	bne.n	8008800 <HAL_UART_Transmit+0x82>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d104      	bne.n	8008800 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	e003      	b.n	8008808 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008804:	2300      	movs	r3, #0
 8008806:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008810:	e02a      	b.n	8008868 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2200      	movs	r2, #0
 800881a:	2180      	movs	r1, #128	; 0x80
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fb1f 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e036      	b.n	800889a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10b      	bne.n	800884a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008840:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	3302      	adds	r3, #2
 8008846:	61bb      	str	r3, [r7, #24]
 8008848:	e007      	b.n	800885a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	3301      	adds	r3, #1
 8008858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1cf      	bne.n	8008812 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2200      	movs	r2, #0
 800887a:	2140      	movs	r1, #64	; 0x40
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 faef 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e006      	b.n	800889a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	e000      	b.n	800889a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008898:	2302      	movs	r3, #2
  }
}
 800889a:	4618      	mov	r0, r3
 800889c:	3720      	adds	r7, #32
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	4613      	mov	r3, r2
 80088ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d11d      	bne.n	80088f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_UART_Receive_IT+0x26>
 80088c2:	88fb      	ldrh	r3, [r7, #6]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e016      	b.n	80088fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_UART_Receive_IT+0x38>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e00f      	b.n	80088fa <HAL_UART_Receive_IT+0x58>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	461a      	mov	r2, r3
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 fb24 	bl	8008f3c <UART_Start_Receive_IT>
 80088f4:	4603      	mov	r3, r0
 80088f6:	e000      	b.n	80088fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80088f8:	2302      	movs	r3, #2
  }
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b0ba      	sub	sp, #232	; 0xe8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800892a:	2300      	movs	r3, #0
 800892c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008930:	2300      	movs	r3, #0
 8008932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008942:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10f      	bne.n	800896a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800894a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <HAL_UART_IRQHandler+0x66>
 8008956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800895a:	f003 0320 	and.w	r3, r3, #32
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fc07 	bl	8009176 <UART_Receive_IT>
      return;
 8008968:	e256      	b.n	8008e18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800896a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 80de 	beq.w	8008b30 <HAL_UART_IRQHandler+0x22c>
 8008974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d106      	bne.n	800898e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008984:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 80d1 	beq.w	8008b30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800898e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00b      	beq.n	80089b2 <HAL_UART_IRQHandler+0xae>
 800899a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800899e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d005      	beq.n	80089b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	f043 0201 	orr.w	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <HAL_UART_IRQHandler+0xd2>
 80089be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	f043 0202 	orr.w	r2, r3, #2
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <HAL_UART_IRQHandler+0xf6>
 80089e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	f043 0204 	orr.w	r2, r3, #4
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fe:	f003 0308 	and.w	r3, r3, #8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d011      	beq.n	8008a2a <HAL_UART_IRQHandler+0x126>
 8008a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d105      	bne.n	8008a1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f043 0208 	orr.w	r2, r3, #8
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 81ed 	beq.w	8008e0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d008      	beq.n	8008a52 <HAL_UART_IRQHandler+0x14e>
 8008a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a44:	f003 0320 	and.w	r3, r3, #32
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fb92 	bl	8009176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5c:	2b40      	cmp	r3, #64	; 0x40
 8008a5e:	bf0c      	ite	eq
 8008a60:	2301      	moveq	r3, #1
 8008a62:	2300      	movne	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <HAL_UART_IRQHandler+0x17a>
 8008a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d04f      	beq.n	8008b1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fa9a 	bl	8008fb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8e:	2b40      	cmp	r3, #64	; 0x40
 8008a90:	d141      	bne.n	8008b16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3314      	adds	r3, #20
 8008a98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3314      	adds	r3, #20
 8008aba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008abe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008aca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1d9      	bne.n	8008a92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d013      	beq.n	8008b0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	4a7d      	ldr	r2, [pc, #500]	; (8008ce0 <HAL_UART_IRQHandler+0x3dc>)
 8008aec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fb fd13 	bl	800451e <HAL_DMA_Abort_IT>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d016      	beq.n	8008b2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b08:	4610      	mov	r0, r2
 8008b0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b0c:	e00e      	b.n	8008b2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f990 	bl	8008e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b14:	e00a      	b.n	8008b2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f98c 	bl	8008e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b1c:	e006      	b.n	8008b2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f988 	bl	8008e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b2a:	e170      	b.n	8008e0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b2c:	bf00      	nop
    return;
 8008b2e:	e16e      	b.n	8008e0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	f040 814a 	bne.w	8008dce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 8143 	beq.w	8008dce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b4c:	f003 0310 	and.w	r3, r3, #16
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 813c 	beq.w	8008dce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b56:	2300      	movs	r3, #0
 8008b58:	60bb      	str	r3, [r7, #8]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60bb      	str	r3, [r7, #8]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	60bb      	str	r3, [r7, #8]
 8008b6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b76:	2b40      	cmp	r3, #64	; 0x40
 8008b78:	f040 80b4 	bne.w	8008ce4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 8140 	beq.w	8008e12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	f080 8139 	bcs.w	8008e12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ba6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb2:	f000 8088 	beq.w	8008cc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	330c      	adds	r3, #12
 8008bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008be2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1d9      	bne.n	8008bb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3314      	adds	r3, #20
 8008c08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3314      	adds	r3, #20
 8008c22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e1      	bne.n	8008c02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3314      	adds	r3, #20
 8008c44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3314      	adds	r3, #20
 8008c5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e3      	bne.n	8008c3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	330c      	adds	r3, #12
 8008c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8e:	e853 3f00 	ldrex	r3, [r3]
 8008c92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c96:	f023 0310 	bic.w	r3, r3, #16
 8008c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	330c      	adds	r3, #12
 8008ca4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ca8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008caa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e3      	bne.n	8008c84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fb fbbc 	bl	800443e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f8b6 	bl	8008e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cdc:	e099      	b.n	8008e12 <HAL_UART_IRQHandler+0x50e>
 8008cde:	bf00      	nop
 8008ce0:	0800907f 	.word	0x0800907f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 808b 	beq.w	8008e16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8086 	beq.w	8008e16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	330c      	adds	r3, #12
 8008d2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d2e:	647a      	str	r2, [r7, #68]	; 0x44
 8008d30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e3      	bne.n	8008d0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	623b      	str	r3, [r7, #32]
   return(result);
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3314      	adds	r3, #20
 8008d62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d66:	633a      	str	r2, [r7, #48]	; 0x30
 8008d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e3      	bne.n	8008d42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0310 	bic.w	r3, r3, #16
 8008d9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008dac:	61fa      	str	r2, [r7, #28]
 8008dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	69b9      	ldr	r1, [r7, #24]
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e3      	bne.n	8008d88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f83e 	bl	8008e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dcc:	e023      	b.n	8008e16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <HAL_UART_IRQHandler+0x4ea>
 8008dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f95d 	bl	80090a6 <UART_Transmit_IT>
    return;
 8008dec:	e014      	b.n	8008e18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00e      	beq.n	8008e18 <HAL_UART_IRQHandler+0x514>
 8008dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d008      	beq.n	8008e18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f99d 	bl	8009146 <UART_EndTransmit_IT>
    return;
 8008e0c:	e004      	b.n	8008e18 <HAL_UART_IRQHandler+0x514>
    return;
 8008e0e:	bf00      	nop
 8008e10:	e002      	b.n	8008e18 <HAL_UART_IRQHandler+0x514>
      return;
 8008e12:	bf00      	nop
 8008e14:	e000      	b.n	8008e18 <HAL_UART_IRQHandler+0x514>
      return;
 8008e16:	bf00      	nop
  }
}
 8008e18:	37e8      	adds	r7, #232	; 0xe8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop

08008e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b090      	sub	sp, #64	; 0x40
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e70:	e050      	b.n	8008f14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e78:	d04c      	beq.n	8008f14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e80:	f7fb f99c 	bl	80041bc <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d241      	bcs.n	8008f14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	330c      	adds	r3, #12
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	330c      	adds	r3, #12
 8008eae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008eb0:	637a      	str	r2, [r7, #52]	; 0x34
 8008eb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e5      	bne.n	8008e90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3314      	adds	r3, #20
 8008eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3314      	adds	r3, #20
 8008ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ee4:	623a      	str	r2, [r7, #32]
 8008ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	69f9      	ldr	r1, [r7, #28]
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e00f      	b.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	bf0c      	ite	eq
 8008f24:	2301      	moveq	r3, #1
 8008f26:	2300      	movne	r3, #0
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d09f      	beq.n	8008e72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3740      	adds	r7, #64	; 0x40
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	88fa      	ldrh	r2, [r7, #6]
 8008f54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	88fa      	ldrh	r2, [r7, #6]
 8008f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2222      	movs	r2, #34	; 0x22
 8008f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	695a      	ldr	r2, [r3, #20]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0201 	orr.w	r2, r2, #1
 8008f98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f042 0220 	orr.w	r2, r2, #32
 8008fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b095      	sub	sp, #84	; 0x54
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	330c      	adds	r3, #12
 8008fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	330c      	adds	r3, #12
 8008fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e5      	bne.n	8008fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3314      	adds	r3, #20
 8008ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	61fb      	str	r3, [r7, #28]
   return(result);
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f023 0301 	bic.w	r3, r3, #1
 800900a:	64bb      	str	r3, [r7, #72]	; 0x48
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3314      	adds	r3, #20
 8009012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800901a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e5      	bne.n	8008ff4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902c:	2b01      	cmp	r3, #1
 800902e:	d119      	bne.n	8009064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f023 0310 	bic.w	r3, r3, #16
 8009046:	647b      	str	r3, [r7, #68]	; 0x44
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	330c      	adds	r3, #12
 800904e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009050:	61ba      	str	r2, [r7, #24]
 8009052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6979      	ldr	r1, [r7, #20]
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	613b      	str	r3, [r7, #16]
   return(result);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e5      	bne.n	8009030 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009072:	bf00      	nop
 8009074:	3754      	adds	r7, #84	; 0x54
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f7ff fecb 	bl	8008e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800909e:	bf00      	nop
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b21      	cmp	r3, #33	; 0x21
 80090b8:	d13e      	bne.n	8009138 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c2:	d114      	bne.n	80090ee <UART_Transmit_IT+0x48>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d110      	bne.n	80090ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	1c9a      	adds	r2, r3, #2
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	621a      	str	r2, [r3, #32]
 80090ec:	e008      	b.n	8009100 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	1c59      	adds	r1, r3, #1
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	6211      	str	r1, [r2, #32]
 80090f8:	781a      	ldrb	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29b      	uxth	r3, r3
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4619      	mov	r1, r3
 800910e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10f      	bne.n	8009134 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009122:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009132:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	e000      	b.n	800913a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009138:	2302      	movs	r3, #2
  }
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800915c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff fe5a 	bl	8008e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b08c      	sub	sp, #48	; 0x30
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b22      	cmp	r3, #34	; 0x22
 8009188:	f040 80ab 	bne.w	80092e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009194:	d117      	bne.n	80091c6 <UART_Receive_IT+0x50>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d113      	bne.n	80091c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	1c9a      	adds	r2, r3, #2
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	629a      	str	r2, [r3, #40]	; 0x28
 80091c4:	e026      	b.n	8009214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80091cc:	2300      	movs	r3, #0
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d8:	d007      	beq.n	80091ea <UART_Receive_IT+0x74>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10a      	bne.n	80091f8 <UART_Receive_IT+0x82>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	e008      	b.n	800920a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009204:	b2da      	uxtb	r2, r3
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	b29b      	uxth	r3, r3
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	4619      	mov	r1, r3
 8009222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009224:	2b00      	cmp	r3, #0
 8009226:	d15a      	bne.n	80092de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0220 	bic.w	r2, r2, #32
 8009236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695a      	ldr	r2, [r3, #20]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0201 	bic.w	r2, r2, #1
 8009256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2220      	movs	r2, #32
 800925c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009264:	2b01      	cmp	r3, #1
 8009266:	d135      	bne.n	80092d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330c      	adds	r3, #12
 8009274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	613b      	str	r3, [r7, #16]
   return(result);
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f023 0310 	bic.w	r3, r3, #16
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928e:	623a      	str	r2, [r7, #32]
 8009290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	69f9      	ldr	r1, [r7, #28]
 8009294:	6a3a      	ldr	r2, [r7, #32]
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	61bb      	str	r3, [r7, #24]
   return(result);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e5      	bne.n	800926e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0310 	and.w	r3, r3, #16
 80092ac:	2b10      	cmp	r3, #16
 80092ae:	d10a      	bne.n	80092c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff fdbb 	bl	8008e48 <HAL_UARTEx_RxEventCallback>
 80092d2:	e002      	b.n	80092da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7fa fd9d 	bl	8003e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	e002      	b.n	80092e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e000      	b.n	80092e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80092e2:	2302      	movs	r3, #2
  }
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3730      	adds	r7, #48	; 0x30
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092f0:	b0c0      	sub	sp, #256	; 0x100
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009308:	68d9      	ldr	r1, [r3, #12]
 800930a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	ea40 0301 	orr.w	r3, r0, r1
 8009314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	431a      	orrs	r2, r3
 8009324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	431a      	orrs	r2, r3
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	4313      	orrs	r3, r2
 8009334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009344:	f021 010c 	bic.w	r1, r1, #12
 8009348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009352:	430b      	orrs	r3, r1
 8009354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009366:	6999      	ldr	r1, [r3, #24]
 8009368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	ea40 0301 	orr.w	r3, r0, r1
 8009372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b8f      	ldr	r3, [pc, #572]	; (80095b8 <UART_SetConfig+0x2cc>)
 800937c:	429a      	cmp	r2, r3
 800937e:	d005      	beq.n	800938c <UART_SetConfig+0xa0>
 8009380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4b8d      	ldr	r3, [pc, #564]	; (80095bc <UART_SetConfig+0x2d0>)
 8009388:	429a      	cmp	r2, r3
 800938a:	d104      	bne.n	8009396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800938c:	f7fd f872 	bl	8006474 <HAL_RCC_GetPCLK2Freq>
 8009390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009394:	e003      	b.n	800939e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009396:	f7fd f859 	bl	800644c <HAL_RCC_GetPCLK1Freq>
 800939a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800939e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a8:	f040 810c 	bne.w	80095c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093be:	4622      	mov	r2, r4
 80093c0:	462b      	mov	r3, r5
 80093c2:	1891      	adds	r1, r2, r2
 80093c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80093c6:	415b      	adcs	r3, r3
 80093c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093ce:	4621      	mov	r1, r4
 80093d0:	eb12 0801 	adds.w	r8, r2, r1
 80093d4:	4629      	mov	r1, r5
 80093d6:	eb43 0901 	adc.w	r9, r3, r1
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093ee:	4690      	mov	r8, r2
 80093f0:	4699      	mov	r9, r3
 80093f2:	4623      	mov	r3, r4
 80093f4:	eb18 0303 	adds.w	r3, r8, r3
 80093f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093fc:	462b      	mov	r3, r5
 80093fe:	eb49 0303 	adc.w	r3, r9, r3
 8009402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800941a:	460b      	mov	r3, r1
 800941c:	18db      	adds	r3, r3, r3
 800941e:	653b      	str	r3, [r7, #80]	; 0x50
 8009420:	4613      	mov	r3, r2
 8009422:	eb42 0303 	adc.w	r3, r2, r3
 8009426:	657b      	str	r3, [r7, #84]	; 0x54
 8009428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800942c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009430:	f7f7 fb24 	bl	8000a7c <__aeabi_uldivmod>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4b61      	ldr	r3, [pc, #388]	; (80095c0 <UART_SetConfig+0x2d4>)
 800943a:	fba3 2302 	umull	r2, r3, r3, r2
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	011c      	lsls	r4, r3, #4
 8009442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009446:	2200      	movs	r2, #0
 8009448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800944c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	1891      	adds	r1, r2, r2
 800945a:	64b9      	str	r1, [r7, #72]	; 0x48
 800945c:	415b      	adcs	r3, r3
 800945e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009464:	4641      	mov	r1, r8
 8009466:	eb12 0a01 	adds.w	sl, r2, r1
 800946a:	4649      	mov	r1, r9
 800946c:	eb43 0b01 	adc.w	fp, r3, r1
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800947c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009484:	4692      	mov	sl, r2
 8009486:	469b      	mov	fp, r3
 8009488:	4643      	mov	r3, r8
 800948a:	eb1a 0303 	adds.w	r3, sl, r3
 800948e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009492:	464b      	mov	r3, r9
 8009494:	eb4b 0303 	adc.w	r3, fp, r3
 8009498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800949c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094b0:	460b      	mov	r3, r1
 80094b2:	18db      	adds	r3, r3, r3
 80094b4:	643b      	str	r3, [r7, #64]	; 0x40
 80094b6:	4613      	mov	r3, r2
 80094b8:	eb42 0303 	adc.w	r3, r2, r3
 80094bc:	647b      	str	r3, [r7, #68]	; 0x44
 80094be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80094c6:	f7f7 fad9 	bl	8000a7c <__aeabi_uldivmod>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4611      	mov	r1, r2
 80094d0:	4b3b      	ldr	r3, [pc, #236]	; (80095c0 <UART_SetConfig+0x2d4>)
 80094d2:	fba3 2301 	umull	r2, r3, r3, r1
 80094d6:	095b      	lsrs	r3, r3, #5
 80094d8:	2264      	movs	r2, #100	; 0x64
 80094da:	fb02 f303 	mul.w	r3, r2, r3
 80094de:	1acb      	subs	r3, r1, r3
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80094e6:	4b36      	ldr	r3, [pc, #216]	; (80095c0 <UART_SetConfig+0x2d4>)
 80094e8:	fba3 2302 	umull	r2, r3, r3, r2
 80094ec:	095b      	lsrs	r3, r3, #5
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094f4:	441c      	add	r4, r3
 80094f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	1891      	adds	r1, r2, r2
 800950e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009510:	415b      	adcs	r3, r3
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009518:	4641      	mov	r1, r8
 800951a:	1851      	adds	r1, r2, r1
 800951c:	6339      	str	r1, [r7, #48]	; 0x30
 800951e:	4649      	mov	r1, r9
 8009520:	414b      	adcs	r3, r1
 8009522:	637b      	str	r3, [r7, #52]	; 0x34
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009530:	4659      	mov	r1, fp
 8009532:	00cb      	lsls	r3, r1, #3
 8009534:	4651      	mov	r1, sl
 8009536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800953a:	4651      	mov	r1, sl
 800953c:	00ca      	lsls	r2, r1, #3
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	4603      	mov	r3, r0
 8009544:	4642      	mov	r2, r8
 8009546:	189b      	adds	r3, r3, r2
 8009548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800954c:	464b      	mov	r3, r9
 800954e:	460a      	mov	r2, r1
 8009550:	eb42 0303 	adc.w	r3, r2, r3
 8009554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800956c:	460b      	mov	r3, r1
 800956e:	18db      	adds	r3, r3, r3
 8009570:	62bb      	str	r3, [r7, #40]	; 0x28
 8009572:	4613      	mov	r3, r2
 8009574:	eb42 0303 	adc.w	r3, r2, r3
 8009578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800957a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800957e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009582:	f7f7 fa7b 	bl	8000a7c <__aeabi_uldivmod>
 8009586:	4602      	mov	r2, r0
 8009588:	460b      	mov	r3, r1
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <UART_SetConfig+0x2d4>)
 800958c:	fba3 1302 	umull	r1, r3, r3, r2
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	2164      	movs	r1, #100	; 0x64
 8009594:	fb01 f303 	mul.w	r3, r1, r3
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	00db      	lsls	r3, r3, #3
 800959c:	3332      	adds	r3, #50	; 0x32
 800959e:	4a08      	ldr	r2, [pc, #32]	; (80095c0 <UART_SetConfig+0x2d4>)
 80095a0:	fba2 2303 	umull	r2, r3, r2, r3
 80095a4:	095b      	lsrs	r3, r3, #5
 80095a6:	f003 0207 	and.w	r2, r3, #7
 80095aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4422      	add	r2, r4
 80095b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095b4:	e105      	b.n	80097c2 <UART_SetConfig+0x4d6>
 80095b6:	bf00      	nop
 80095b8:	40011000 	.word	0x40011000
 80095bc:	40011400 	.word	0x40011400
 80095c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095d6:	4642      	mov	r2, r8
 80095d8:	464b      	mov	r3, r9
 80095da:	1891      	adds	r1, r2, r2
 80095dc:	6239      	str	r1, [r7, #32]
 80095de:	415b      	adcs	r3, r3
 80095e0:	627b      	str	r3, [r7, #36]	; 0x24
 80095e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095e6:	4641      	mov	r1, r8
 80095e8:	1854      	adds	r4, r2, r1
 80095ea:	4649      	mov	r1, r9
 80095ec:	eb43 0501 	adc.w	r5, r3, r1
 80095f0:	f04f 0200 	mov.w	r2, #0
 80095f4:	f04f 0300 	mov.w	r3, #0
 80095f8:	00eb      	lsls	r3, r5, #3
 80095fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095fe:	00e2      	lsls	r2, r4, #3
 8009600:	4614      	mov	r4, r2
 8009602:	461d      	mov	r5, r3
 8009604:	4643      	mov	r3, r8
 8009606:	18e3      	adds	r3, r4, r3
 8009608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800960c:	464b      	mov	r3, r9
 800960e:	eb45 0303 	adc.w	r3, r5, r3
 8009612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	f04f 0300 	mov.w	r3, #0
 800962e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009632:	4629      	mov	r1, r5
 8009634:	008b      	lsls	r3, r1, #2
 8009636:	4621      	mov	r1, r4
 8009638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800963c:	4621      	mov	r1, r4
 800963e:	008a      	lsls	r2, r1, #2
 8009640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009644:	f7f7 fa1a 	bl	8000a7c <__aeabi_uldivmod>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4b60      	ldr	r3, [pc, #384]	; (80097d0 <UART_SetConfig+0x4e4>)
 800964e:	fba3 2302 	umull	r2, r3, r3, r2
 8009652:	095b      	lsrs	r3, r3, #5
 8009654:	011c      	lsls	r4, r3, #4
 8009656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965a:	2200      	movs	r2, #0
 800965c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	1891      	adds	r1, r2, r2
 800966e:	61b9      	str	r1, [r7, #24]
 8009670:	415b      	adcs	r3, r3
 8009672:	61fb      	str	r3, [r7, #28]
 8009674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009678:	4641      	mov	r1, r8
 800967a:	1851      	adds	r1, r2, r1
 800967c:	6139      	str	r1, [r7, #16]
 800967e:	4649      	mov	r1, r9
 8009680:	414b      	adcs	r3, r1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	f04f 0200 	mov.w	r2, #0
 8009688:	f04f 0300 	mov.w	r3, #0
 800968c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009690:	4659      	mov	r1, fp
 8009692:	00cb      	lsls	r3, r1, #3
 8009694:	4651      	mov	r1, sl
 8009696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800969a:	4651      	mov	r1, sl
 800969c:	00ca      	lsls	r2, r1, #3
 800969e:	4610      	mov	r0, r2
 80096a0:	4619      	mov	r1, r3
 80096a2:	4603      	mov	r3, r0
 80096a4:	4642      	mov	r2, r8
 80096a6:	189b      	adds	r3, r3, r2
 80096a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096ac:	464b      	mov	r3, r9
 80096ae:	460a      	mov	r2, r1
 80096b0:	eb42 0303 	adc.w	r3, r2, r3
 80096b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80096c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80096d0:	4649      	mov	r1, r9
 80096d2:	008b      	lsls	r3, r1, #2
 80096d4:	4641      	mov	r1, r8
 80096d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096da:	4641      	mov	r1, r8
 80096dc:	008a      	lsls	r2, r1, #2
 80096de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80096e2:	f7f7 f9cb 	bl	8000a7c <__aeabi_uldivmod>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4b39      	ldr	r3, [pc, #228]	; (80097d0 <UART_SetConfig+0x4e4>)
 80096ec:	fba3 1302 	umull	r1, r3, r3, r2
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	2164      	movs	r1, #100	; 0x64
 80096f4:	fb01 f303 	mul.w	r3, r1, r3
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	3332      	adds	r3, #50	; 0x32
 80096fe:	4a34      	ldr	r2, [pc, #208]	; (80097d0 <UART_SetConfig+0x4e4>)
 8009700:	fba2 2303 	umull	r2, r3, r2, r3
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800970a:	441c      	add	r4, r3
 800970c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009710:	2200      	movs	r2, #0
 8009712:	673b      	str	r3, [r7, #112]	; 0x70
 8009714:	677a      	str	r2, [r7, #116]	; 0x74
 8009716:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800971a:	4642      	mov	r2, r8
 800971c:	464b      	mov	r3, r9
 800971e:	1891      	adds	r1, r2, r2
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	415b      	adcs	r3, r3
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800972a:	4641      	mov	r1, r8
 800972c:	1851      	adds	r1, r2, r1
 800972e:	6039      	str	r1, [r7, #0]
 8009730:	4649      	mov	r1, r9
 8009732:	414b      	adcs	r3, r1
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	f04f 0200 	mov.w	r2, #0
 800973a:	f04f 0300 	mov.w	r3, #0
 800973e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009742:	4659      	mov	r1, fp
 8009744:	00cb      	lsls	r3, r1, #3
 8009746:	4651      	mov	r1, sl
 8009748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800974c:	4651      	mov	r1, sl
 800974e:	00ca      	lsls	r2, r1, #3
 8009750:	4610      	mov	r0, r2
 8009752:	4619      	mov	r1, r3
 8009754:	4603      	mov	r3, r0
 8009756:	4642      	mov	r2, r8
 8009758:	189b      	adds	r3, r3, r2
 800975a:	66bb      	str	r3, [r7, #104]	; 0x68
 800975c:	464b      	mov	r3, r9
 800975e:	460a      	mov	r2, r1
 8009760:	eb42 0303 	adc.w	r3, r2, r3
 8009764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	663b      	str	r3, [r7, #96]	; 0x60
 8009770:	667a      	str	r2, [r7, #100]	; 0x64
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	f04f 0300 	mov.w	r3, #0
 800977a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800977e:	4649      	mov	r1, r9
 8009780:	008b      	lsls	r3, r1, #2
 8009782:	4641      	mov	r1, r8
 8009784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009788:	4641      	mov	r1, r8
 800978a:	008a      	lsls	r2, r1, #2
 800978c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009790:	f7f7 f974 	bl	8000a7c <__aeabi_uldivmod>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <UART_SetConfig+0x4e4>)
 800979a:	fba3 1302 	umull	r1, r3, r3, r2
 800979e:	095b      	lsrs	r3, r3, #5
 80097a0:	2164      	movs	r1, #100	; 0x64
 80097a2:	fb01 f303 	mul.w	r3, r1, r3
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	3332      	adds	r3, #50	; 0x32
 80097ac:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <UART_SetConfig+0x4e4>)
 80097ae:	fba2 2303 	umull	r2, r3, r2, r3
 80097b2:	095b      	lsrs	r3, r3, #5
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4422      	add	r2, r4
 80097c0:	609a      	str	r2, [r3, #8]
}
 80097c2:	bf00      	nop
 80097c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80097c8:	46bd      	mov	sp, r7
 80097ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ce:	bf00      	nop
 80097d0:	51eb851f 	.word	0x51eb851f

080097d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097d4:	b084      	sub	sp, #16
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	f107 001c 	add.w	r0, r7, #28
 80097e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d122      	bne.n	8009832 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009816:	2b01      	cmp	r3, #1
 8009818:	d105      	bne.n	8009826 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 faa2 	bl	8009d70 <USB_CoreReset>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
 8009830:	e01a      	b.n	8009868 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa96 	bl	8009d70 <USB_CoreReset>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	639a      	str	r2, [r3, #56]	; 0x38
 800985a:	e005      	b.n	8009868 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	2b01      	cmp	r3, #1
 800986c:	d10b      	bne.n	8009886 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f043 0206 	orr.w	r2, r3, #6
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f043 0220 	orr.w	r2, r3, #32
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009892:	b004      	add	sp, #16
 8009894:	4770      	bx	lr

08009896 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f023 0201 	bic.w	r2, r3, #1
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d115      	bne.n	8009906 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098e6:	2001      	movs	r0, #1
 80098e8:	f7fa fc74 	bl	80041d4 <HAL_Delay>
      ms++;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	3301      	adds	r3, #1
 80098f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa2e 	bl	8009d54 <USB_GetMode>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d01e      	beq.n	800993c <USB_SetCurrentMode+0x84>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b31      	cmp	r3, #49	; 0x31
 8009902:	d9f0      	bls.n	80098e6 <USB_SetCurrentMode+0x2e>
 8009904:	e01a      	b.n	800993c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d115      	bne.n	8009938 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009918:	2001      	movs	r0, #1
 800991a:	f7fa fc5b 	bl	80041d4 <HAL_Delay>
      ms++;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fa15 	bl	8009d54 <USB_GetMode>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d005      	beq.n	800993c <USB_SetCurrentMode+0x84>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b31      	cmp	r3, #49	; 0x31
 8009934:	d9f0      	bls.n	8009918 <USB_SetCurrentMode+0x60>
 8009936:	e001      	b.n	800993c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e005      	b.n	8009948 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b32      	cmp	r3, #50	; 0x32
 8009940:	d101      	bne.n	8009946 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e000      	b.n	8009948 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009950:	b084      	sub	sp, #16
 8009952:	b580      	push	{r7, lr}
 8009954:	b086      	sub	sp, #24
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800995e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800996a:	2300      	movs	r3, #0
 800996c:	613b      	str	r3, [r7, #16]
 800996e:	e009      	b.n	8009984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	3340      	adds	r3, #64	; 0x40
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	2200      	movs	r2, #0
 800997c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3301      	adds	r3, #1
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	2b0e      	cmp	r3, #14
 8009988:	d9f2      	bls.n	8009970 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800998a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d11c      	bne.n	80099ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800999e:	f043 0302 	orr.w	r3, r3, #2
 80099a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	639a      	str	r2, [r3, #56]	; 0x38
 80099c8:	e00b      	b.n	80099e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099e8:	461a      	mov	r2, r3
 80099ea:	2300      	movs	r3, #0
 80099ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f4:	4619      	mov	r1, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099fc:	461a      	mov	r2, r3
 80099fe:	680b      	ldr	r3, [r1, #0]
 8009a00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d10c      	bne.n	8009a22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d104      	bne.n	8009a18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a0e:	2100      	movs	r1, #0
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f965 	bl	8009ce0 <USB_SetDevSpeed>
 8009a16:	e008      	b.n	8009a2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a18:	2101      	movs	r1, #1
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f960 	bl	8009ce0 <USB_SetDevSpeed>
 8009a20:	e003      	b.n	8009a2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a22:	2103      	movs	r1, #3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f95b 	bl	8009ce0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a2a:	2110      	movs	r1, #16
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f8f3 	bl	8009c18 <USB_FlushTxFifo>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f91f 	bl	8009c80 <USB_FlushRxFifo>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a52:	461a      	mov	r2, r3
 8009a54:	2300      	movs	r3, #0
 8009a56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5e:	461a      	mov	r2, r3
 8009a60:	2300      	movs	r3, #0
 8009a62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a70:	2300      	movs	r3, #0
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	e043      	b.n	8009afe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a8c:	d118      	bne.n	8009ac0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10a      	bne.n	8009aaa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	e013      	b.n	8009ad2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	e008      	b.n	8009ad2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009acc:	461a      	mov	r2, r3
 8009ace:	2300      	movs	r3, #0
 8009ad0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ade:	461a      	mov	r2, r3
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af0:	461a      	mov	r2, r3
 8009af2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009af6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	3301      	adds	r3, #1
 8009afc:	613b      	str	r3, [r7, #16]
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d3b7      	bcc.n	8009a76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b06:	2300      	movs	r3, #0
 8009b08:	613b      	str	r3, [r7, #16]
 8009b0a:	e043      	b.n	8009b94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b22:	d118      	bne.n	8009b56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10a      	bne.n	8009b40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b36:	461a      	mov	r2, r3
 8009b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	e013      	b.n	8009b68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	e008      	b.n	8009b68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b62:	461a      	mov	r2, r3
 8009b64:	2300      	movs	r3, #0
 8009b66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b74:	461a      	mov	r2, r3
 8009b76:	2300      	movs	r3, #0
 8009b78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b86:	461a      	mov	r2, r3
 8009b88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	3301      	adds	r3, #1
 8009b92:	613b      	str	r3, [r7, #16]
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d3b7      	bcc.n	8009b0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009bbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d105      	bne.n	8009bd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	f043 0210 	orr.w	r2, r3, #16
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <USB_DevInit+0x2c4>)
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	f043 0208 	orr.w	r2, r3, #8
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d107      	bne.n	8009c04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bfc:	f043 0304 	orr.w	r3, r3, #4
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c10:	b004      	add	sp, #16
 8009c12:	4770      	bx	lr
 8009c14:	803c3800 	.word	0x803c3800

08009c18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a13      	ldr	r2, [pc, #76]	; (8009c7c <USB_FlushTxFifo+0x64>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d901      	bls.n	8009c38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e01b      	b.n	8009c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	daf2      	bge.n	8009c26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	019b      	lsls	r3, r3, #6
 8009c48:	f043 0220 	orr.w	r2, r3, #32
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3301      	adds	r3, #1
 8009c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4a08      	ldr	r2, [pc, #32]	; (8009c7c <USB_FlushTxFifo+0x64>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d901      	bls.n	8009c62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e006      	b.n	8009c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	d0f0      	beq.n	8009c50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	00030d40 	.word	0x00030d40

08009c80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	4a11      	ldr	r2, [pc, #68]	; (8009cdc <USB_FlushRxFifo+0x5c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d901      	bls.n	8009c9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e018      	b.n	8009cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	daf2      	bge.n	8009c8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2210      	movs	r2, #16
 8009cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a08      	ldr	r2, [pc, #32]	; (8009cdc <USB_FlushRxFifo+0x5c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d901      	bls.n	8009cc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e006      	b.n	8009cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f003 0310 	and.w	r3, r3, #16
 8009cca:	2b10      	cmp	r3, #16
 8009ccc:	d0f0      	beq.n	8009cb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	00030d40 	.word	0x00030d40

08009ce0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	68f9      	ldr	r1, [r7, #12]
 8009cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d00:	4313      	orrs	r3, r2
 8009d02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d2c:	f023 0303 	bic.w	r3, r3, #3
 8009d30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d40:	f043 0302 	orr.w	r3, r3, #2
 8009d44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	f003 0301 	and.w	r3, r3, #1
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4a13      	ldr	r2, [pc, #76]	; (8009dd4 <USB_CoreReset+0x64>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d901      	bls.n	8009d8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e01b      	b.n	8009dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	daf2      	bge.n	8009d7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f043 0201 	orr.w	r2, r3, #1
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3301      	adds	r3, #1
 8009daa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4a09      	ldr	r2, [pc, #36]	; (8009dd4 <USB_CoreReset+0x64>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d901      	bls.n	8009db8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e006      	b.n	8009dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d0f0      	beq.n	8009da6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	00030d40 	.word	0x00030d40

08009dd8 <__errno>:
 8009dd8:	4b01      	ldr	r3, [pc, #4]	; (8009de0 <__errno+0x8>)
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	2000016c 	.word	0x2000016c

08009de4 <__libc_init_array>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	4d0d      	ldr	r5, [pc, #52]	; (8009e1c <__libc_init_array+0x38>)
 8009de8:	4c0d      	ldr	r4, [pc, #52]	; (8009e20 <__libc_init_array+0x3c>)
 8009dea:	1b64      	subs	r4, r4, r5
 8009dec:	10a4      	asrs	r4, r4, #2
 8009dee:	2600      	movs	r6, #0
 8009df0:	42a6      	cmp	r6, r4
 8009df2:	d109      	bne.n	8009e08 <__libc_init_array+0x24>
 8009df4:	4d0b      	ldr	r5, [pc, #44]	; (8009e24 <__libc_init_array+0x40>)
 8009df6:	4c0c      	ldr	r4, [pc, #48]	; (8009e28 <__libc_init_array+0x44>)
 8009df8:	f001 fa00 	bl	800b1fc <_init>
 8009dfc:	1b64      	subs	r4, r4, r5
 8009dfe:	10a4      	asrs	r4, r4, #2
 8009e00:	2600      	movs	r6, #0
 8009e02:	42a6      	cmp	r6, r4
 8009e04:	d105      	bne.n	8009e12 <__libc_init_array+0x2e>
 8009e06:	bd70      	pop	{r4, r5, r6, pc}
 8009e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e0c:	4798      	blx	r3
 8009e0e:	3601      	adds	r6, #1
 8009e10:	e7ee      	b.n	8009df0 <__libc_init_array+0xc>
 8009e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e16:	4798      	blx	r3
 8009e18:	3601      	adds	r6, #1
 8009e1a:	e7f2      	b.n	8009e02 <__libc_init_array+0x1e>
 8009e1c:	0800b4b8 	.word	0x0800b4b8
 8009e20:	0800b4b8 	.word	0x0800b4b8
 8009e24:	0800b4b8 	.word	0x0800b4b8
 8009e28:	0800b4bc 	.word	0x0800b4bc

08009e2c <memset>:
 8009e2c:	4402      	add	r2, r0
 8009e2e:	4603      	mov	r3, r0
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d100      	bne.n	8009e36 <memset+0xa>
 8009e34:	4770      	bx	lr
 8009e36:	f803 1b01 	strb.w	r1, [r3], #1
 8009e3a:	e7f9      	b.n	8009e30 <memset+0x4>

08009e3c <iprintf>:
 8009e3c:	b40f      	push	{r0, r1, r2, r3}
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <iprintf+0x2c>)
 8009e40:	b513      	push	{r0, r1, r4, lr}
 8009e42:	681c      	ldr	r4, [r3, #0]
 8009e44:	b124      	cbz	r4, 8009e50 <iprintf+0x14>
 8009e46:	69a3      	ldr	r3, [r4, #24]
 8009e48:	b913      	cbnz	r3, 8009e50 <iprintf+0x14>
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fa7e 	bl	800a34c <__sinit>
 8009e50:	ab05      	add	r3, sp, #20
 8009e52:	9a04      	ldr	r2, [sp, #16]
 8009e54:	68a1      	ldr	r1, [r4, #8]
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 fde3 	bl	800aa24 <_vfiprintf_r>
 8009e5e:	b002      	add	sp, #8
 8009e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e64:	b004      	add	sp, #16
 8009e66:	4770      	bx	lr
 8009e68:	2000016c 	.word	0x2000016c

08009e6c <_puts_r>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	460e      	mov	r6, r1
 8009e70:	4605      	mov	r5, r0
 8009e72:	b118      	cbz	r0, 8009e7c <_puts_r+0x10>
 8009e74:	6983      	ldr	r3, [r0, #24]
 8009e76:	b90b      	cbnz	r3, 8009e7c <_puts_r+0x10>
 8009e78:	f000 fa68 	bl	800a34c <__sinit>
 8009e7c:	69ab      	ldr	r3, [r5, #24]
 8009e7e:	68ac      	ldr	r4, [r5, #8]
 8009e80:	b913      	cbnz	r3, 8009e88 <_puts_r+0x1c>
 8009e82:	4628      	mov	r0, r5
 8009e84:	f000 fa62 	bl	800a34c <__sinit>
 8009e88:	4b2c      	ldr	r3, [pc, #176]	; (8009f3c <_puts_r+0xd0>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	d120      	bne.n	8009ed0 <_puts_r+0x64>
 8009e8e:	686c      	ldr	r4, [r5, #4]
 8009e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e92:	07db      	lsls	r3, r3, #31
 8009e94:	d405      	bmi.n	8009ea2 <_puts_r+0x36>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	0598      	lsls	r0, r3, #22
 8009e9a:	d402      	bmi.n	8009ea2 <_puts_r+0x36>
 8009e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e9e:	f000 faf3 	bl	800a488 <__retarget_lock_acquire_recursive>
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	0719      	lsls	r1, r3, #28
 8009ea6:	d51d      	bpl.n	8009ee4 <_puts_r+0x78>
 8009ea8:	6923      	ldr	r3, [r4, #16]
 8009eaa:	b1db      	cbz	r3, 8009ee4 <_puts_r+0x78>
 8009eac:	3e01      	subs	r6, #1
 8009eae:	68a3      	ldr	r3, [r4, #8]
 8009eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	60a3      	str	r3, [r4, #8]
 8009eb8:	bb39      	cbnz	r1, 8009f0a <_puts_r+0x9e>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da38      	bge.n	8009f30 <_puts_r+0xc4>
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	210a      	movs	r1, #10
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f000 f868 	bl	8009f98 <__swbuf_r>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	d011      	beq.n	8009ef0 <_puts_r+0x84>
 8009ecc:	250a      	movs	r5, #10
 8009ece:	e011      	b.n	8009ef4 <_puts_r+0x88>
 8009ed0:	4b1b      	ldr	r3, [pc, #108]	; (8009f40 <_puts_r+0xd4>)
 8009ed2:	429c      	cmp	r4, r3
 8009ed4:	d101      	bne.n	8009eda <_puts_r+0x6e>
 8009ed6:	68ac      	ldr	r4, [r5, #8]
 8009ed8:	e7da      	b.n	8009e90 <_puts_r+0x24>
 8009eda:	4b1a      	ldr	r3, [pc, #104]	; (8009f44 <_puts_r+0xd8>)
 8009edc:	429c      	cmp	r4, r3
 8009ede:	bf08      	it	eq
 8009ee0:	68ec      	ldreq	r4, [r5, #12]
 8009ee2:	e7d5      	b.n	8009e90 <_puts_r+0x24>
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 f8a8 	bl	800a03c <__swsetup_r>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d0dd      	beq.n	8009eac <_puts_r+0x40>
 8009ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8009ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ef6:	07da      	lsls	r2, r3, #31
 8009ef8:	d405      	bmi.n	8009f06 <_puts_r+0x9a>
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	059b      	lsls	r3, r3, #22
 8009efe:	d402      	bmi.n	8009f06 <_puts_r+0x9a>
 8009f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f02:	f000 fac2 	bl	800a48a <__retarget_lock_release_recursive>
 8009f06:	4628      	mov	r0, r5
 8009f08:	bd70      	pop	{r4, r5, r6, pc}
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	da04      	bge.n	8009f18 <_puts_r+0xac>
 8009f0e:	69a2      	ldr	r2, [r4, #24]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	dc06      	bgt.n	8009f22 <_puts_r+0xb6>
 8009f14:	290a      	cmp	r1, #10
 8009f16:	d004      	beq.n	8009f22 <_puts_r+0xb6>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	6022      	str	r2, [r4, #0]
 8009f1e:	7019      	strb	r1, [r3, #0]
 8009f20:	e7c5      	b.n	8009eae <_puts_r+0x42>
 8009f22:	4622      	mov	r2, r4
 8009f24:	4628      	mov	r0, r5
 8009f26:	f000 f837 	bl	8009f98 <__swbuf_r>
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d1bf      	bne.n	8009eae <_puts_r+0x42>
 8009f2e:	e7df      	b.n	8009ef0 <_puts_r+0x84>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	250a      	movs	r5, #10
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	6022      	str	r2, [r4, #0]
 8009f38:	701d      	strb	r5, [r3, #0]
 8009f3a:	e7db      	b.n	8009ef4 <_puts_r+0x88>
 8009f3c:	0800b43c 	.word	0x0800b43c
 8009f40:	0800b45c 	.word	0x0800b45c
 8009f44:	0800b41c 	.word	0x0800b41c

08009f48 <puts>:
 8009f48:	4b02      	ldr	r3, [pc, #8]	; (8009f54 <puts+0xc>)
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	6818      	ldr	r0, [r3, #0]
 8009f4e:	f7ff bf8d 	b.w	8009e6c <_puts_r>
 8009f52:	bf00      	nop
 8009f54:	2000016c 	.word	0x2000016c

08009f58 <siprintf>:
 8009f58:	b40e      	push	{r1, r2, r3}
 8009f5a:	b500      	push	{lr}
 8009f5c:	b09c      	sub	sp, #112	; 0x70
 8009f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f60:	9002      	str	r0, [sp, #8]
 8009f62:	9006      	str	r0, [sp, #24]
 8009f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f68:	4809      	ldr	r0, [pc, #36]	; (8009f90 <siprintf+0x38>)
 8009f6a:	9107      	str	r1, [sp, #28]
 8009f6c:	9104      	str	r1, [sp, #16]
 8009f6e:	4909      	ldr	r1, [pc, #36]	; (8009f94 <siprintf+0x3c>)
 8009f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f74:	9105      	str	r1, [sp, #20]
 8009f76:	6800      	ldr	r0, [r0, #0]
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	a902      	add	r1, sp, #8
 8009f7c:	f000 fc28 	bl	800a7d0 <_svfiprintf_r>
 8009f80:	9b02      	ldr	r3, [sp, #8]
 8009f82:	2200      	movs	r2, #0
 8009f84:	701a      	strb	r2, [r3, #0]
 8009f86:	b01c      	add	sp, #112	; 0x70
 8009f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f8c:	b003      	add	sp, #12
 8009f8e:	4770      	bx	lr
 8009f90:	2000016c 	.word	0x2000016c
 8009f94:	ffff0208 	.word	0xffff0208

08009f98 <__swbuf_r>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	460e      	mov	r6, r1
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	b118      	cbz	r0, 8009faa <__swbuf_r+0x12>
 8009fa2:	6983      	ldr	r3, [r0, #24]
 8009fa4:	b90b      	cbnz	r3, 8009faa <__swbuf_r+0x12>
 8009fa6:	f000 f9d1 	bl	800a34c <__sinit>
 8009faa:	4b21      	ldr	r3, [pc, #132]	; (800a030 <__swbuf_r+0x98>)
 8009fac:	429c      	cmp	r4, r3
 8009fae:	d12b      	bne.n	800a008 <__swbuf_r+0x70>
 8009fb0:	686c      	ldr	r4, [r5, #4]
 8009fb2:	69a3      	ldr	r3, [r4, #24]
 8009fb4:	60a3      	str	r3, [r4, #8]
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	071a      	lsls	r2, r3, #28
 8009fba:	d52f      	bpl.n	800a01c <__swbuf_r+0x84>
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	b36b      	cbz	r3, 800a01c <__swbuf_r+0x84>
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	6820      	ldr	r0, [r4, #0]
 8009fc4:	1ac0      	subs	r0, r0, r3
 8009fc6:	6963      	ldr	r3, [r4, #20]
 8009fc8:	b2f6      	uxtb	r6, r6
 8009fca:	4283      	cmp	r3, r0
 8009fcc:	4637      	mov	r7, r6
 8009fce:	dc04      	bgt.n	8009fda <__swbuf_r+0x42>
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f000 f926 	bl	800a224 <_fflush_r>
 8009fd8:	bb30      	cbnz	r0, 800a028 <__swbuf_r+0x90>
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	701e      	strb	r6, [r3, #0]
 8009fe8:	6963      	ldr	r3, [r4, #20]
 8009fea:	3001      	adds	r0, #1
 8009fec:	4283      	cmp	r3, r0
 8009fee:	d004      	beq.n	8009ffa <__swbuf_r+0x62>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	07db      	lsls	r3, r3, #31
 8009ff4:	d506      	bpl.n	800a004 <__swbuf_r+0x6c>
 8009ff6:	2e0a      	cmp	r6, #10
 8009ff8:	d104      	bne.n	800a004 <__swbuf_r+0x6c>
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f000 f911 	bl	800a224 <_fflush_r>
 800a002:	b988      	cbnz	r0, 800a028 <__swbuf_r+0x90>
 800a004:	4638      	mov	r0, r7
 800a006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <__swbuf_r+0x9c>)
 800a00a:	429c      	cmp	r4, r3
 800a00c:	d101      	bne.n	800a012 <__swbuf_r+0x7a>
 800a00e:	68ac      	ldr	r4, [r5, #8]
 800a010:	e7cf      	b.n	8009fb2 <__swbuf_r+0x1a>
 800a012:	4b09      	ldr	r3, [pc, #36]	; (800a038 <__swbuf_r+0xa0>)
 800a014:	429c      	cmp	r4, r3
 800a016:	bf08      	it	eq
 800a018:	68ec      	ldreq	r4, [r5, #12]
 800a01a:	e7ca      	b.n	8009fb2 <__swbuf_r+0x1a>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f80c 	bl	800a03c <__swsetup_r>
 800a024:	2800      	cmp	r0, #0
 800a026:	d0cb      	beq.n	8009fc0 <__swbuf_r+0x28>
 800a028:	f04f 37ff 	mov.w	r7, #4294967295
 800a02c:	e7ea      	b.n	800a004 <__swbuf_r+0x6c>
 800a02e:	bf00      	nop
 800a030:	0800b43c 	.word	0x0800b43c
 800a034:	0800b45c 	.word	0x0800b45c
 800a038:	0800b41c 	.word	0x0800b41c

0800a03c <__swsetup_r>:
 800a03c:	4b32      	ldr	r3, [pc, #200]	; (800a108 <__swsetup_r+0xcc>)
 800a03e:	b570      	push	{r4, r5, r6, lr}
 800a040:	681d      	ldr	r5, [r3, #0]
 800a042:	4606      	mov	r6, r0
 800a044:	460c      	mov	r4, r1
 800a046:	b125      	cbz	r5, 800a052 <__swsetup_r+0x16>
 800a048:	69ab      	ldr	r3, [r5, #24]
 800a04a:	b913      	cbnz	r3, 800a052 <__swsetup_r+0x16>
 800a04c:	4628      	mov	r0, r5
 800a04e:	f000 f97d 	bl	800a34c <__sinit>
 800a052:	4b2e      	ldr	r3, [pc, #184]	; (800a10c <__swsetup_r+0xd0>)
 800a054:	429c      	cmp	r4, r3
 800a056:	d10f      	bne.n	800a078 <__swsetup_r+0x3c>
 800a058:	686c      	ldr	r4, [r5, #4]
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a060:	0719      	lsls	r1, r3, #28
 800a062:	d42c      	bmi.n	800a0be <__swsetup_r+0x82>
 800a064:	06dd      	lsls	r5, r3, #27
 800a066:	d411      	bmi.n	800a08c <__swsetup_r+0x50>
 800a068:	2309      	movs	r3, #9
 800a06a:	6033      	str	r3, [r6, #0]
 800a06c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a070:	81a3      	strh	r3, [r4, #12]
 800a072:	f04f 30ff 	mov.w	r0, #4294967295
 800a076:	e03e      	b.n	800a0f6 <__swsetup_r+0xba>
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <__swsetup_r+0xd4>)
 800a07a:	429c      	cmp	r4, r3
 800a07c:	d101      	bne.n	800a082 <__swsetup_r+0x46>
 800a07e:	68ac      	ldr	r4, [r5, #8]
 800a080:	e7eb      	b.n	800a05a <__swsetup_r+0x1e>
 800a082:	4b24      	ldr	r3, [pc, #144]	; (800a114 <__swsetup_r+0xd8>)
 800a084:	429c      	cmp	r4, r3
 800a086:	bf08      	it	eq
 800a088:	68ec      	ldreq	r4, [r5, #12]
 800a08a:	e7e6      	b.n	800a05a <__swsetup_r+0x1e>
 800a08c:	0758      	lsls	r0, r3, #29
 800a08e:	d512      	bpl.n	800a0b6 <__swsetup_r+0x7a>
 800a090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a092:	b141      	cbz	r1, 800a0a6 <__swsetup_r+0x6a>
 800a094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a098:	4299      	cmp	r1, r3
 800a09a:	d002      	beq.n	800a0a2 <__swsetup_r+0x66>
 800a09c:	4630      	mov	r0, r6
 800a09e:	f000 fa5b 	bl	800a558 <_free_r>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	6063      	str	r3, [r4, #4]
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	f043 0308 	orr.w	r3, r3, #8
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	b94b      	cbnz	r3, 800a0d6 <__swsetup_r+0x9a>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0cc:	d003      	beq.n	800a0d6 <__swsetup_r+0x9a>
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 fa01 	bl	800a4d8 <__smakebuf_r>
 800a0d6:	89a0      	ldrh	r0, [r4, #12]
 800a0d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0dc:	f010 0301 	ands.w	r3, r0, #1
 800a0e0:	d00a      	beq.n	800a0f8 <__swsetup_r+0xbc>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60a3      	str	r3, [r4, #8]
 800a0e6:	6963      	ldr	r3, [r4, #20]
 800a0e8:	425b      	negs	r3, r3
 800a0ea:	61a3      	str	r3, [r4, #24]
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	b943      	cbnz	r3, 800a102 <__swsetup_r+0xc6>
 800a0f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0f4:	d1ba      	bne.n	800a06c <__swsetup_r+0x30>
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	0781      	lsls	r1, r0, #30
 800a0fa:	bf58      	it	pl
 800a0fc:	6963      	ldrpl	r3, [r4, #20]
 800a0fe:	60a3      	str	r3, [r4, #8]
 800a100:	e7f4      	b.n	800a0ec <__swsetup_r+0xb0>
 800a102:	2000      	movs	r0, #0
 800a104:	e7f7      	b.n	800a0f6 <__swsetup_r+0xba>
 800a106:	bf00      	nop
 800a108:	2000016c 	.word	0x2000016c
 800a10c:	0800b43c 	.word	0x0800b43c
 800a110:	0800b45c 	.word	0x0800b45c
 800a114:	0800b41c 	.word	0x0800b41c

0800a118 <__sflush_r>:
 800a118:	898a      	ldrh	r2, [r1, #12]
 800a11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11e:	4605      	mov	r5, r0
 800a120:	0710      	lsls	r0, r2, #28
 800a122:	460c      	mov	r4, r1
 800a124:	d458      	bmi.n	800a1d8 <__sflush_r+0xc0>
 800a126:	684b      	ldr	r3, [r1, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dc05      	bgt.n	800a138 <__sflush_r+0x20>
 800a12c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a12e:	2b00      	cmp	r3, #0
 800a130:	dc02      	bgt.n	800a138 <__sflush_r+0x20>
 800a132:	2000      	movs	r0, #0
 800a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	d0f9      	beq.n	800a132 <__sflush_r+0x1a>
 800a13e:	2300      	movs	r3, #0
 800a140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a144:	682f      	ldr	r7, [r5, #0]
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	d032      	beq.n	800a1b0 <__sflush_r+0x98>
 800a14a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	075a      	lsls	r2, r3, #29
 800a150:	d505      	bpl.n	800a15e <__sflush_r+0x46>
 800a152:	6863      	ldr	r3, [r4, #4]
 800a154:	1ac0      	subs	r0, r0, r3
 800a156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a158:	b10b      	cbz	r3, 800a15e <__sflush_r+0x46>
 800a15a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a15c:	1ac0      	subs	r0, r0, r3
 800a15e:	2300      	movs	r3, #0
 800a160:	4602      	mov	r2, r0
 800a162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a164:	6a21      	ldr	r1, [r4, #32]
 800a166:	4628      	mov	r0, r5
 800a168:	47b0      	blx	r6
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	d106      	bne.n	800a17e <__sflush_r+0x66>
 800a170:	6829      	ldr	r1, [r5, #0]
 800a172:	291d      	cmp	r1, #29
 800a174:	d82c      	bhi.n	800a1d0 <__sflush_r+0xb8>
 800a176:	4a2a      	ldr	r2, [pc, #168]	; (800a220 <__sflush_r+0x108>)
 800a178:	40ca      	lsrs	r2, r1
 800a17a:	07d6      	lsls	r6, r2, #31
 800a17c:	d528      	bpl.n	800a1d0 <__sflush_r+0xb8>
 800a17e:	2200      	movs	r2, #0
 800a180:	6062      	str	r2, [r4, #4]
 800a182:	04d9      	lsls	r1, r3, #19
 800a184:	6922      	ldr	r2, [r4, #16]
 800a186:	6022      	str	r2, [r4, #0]
 800a188:	d504      	bpl.n	800a194 <__sflush_r+0x7c>
 800a18a:	1c42      	adds	r2, r0, #1
 800a18c:	d101      	bne.n	800a192 <__sflush_r+0x7a>
 800a18e:	682b      	ldr	r3, [r5, #0]
 800a190:	b903      	cbnz	r3, 800a194 <__sflush_r+0x7c>
 800a192:	6560      	str	r0, [r4, #84]	; 0x54
 800a194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a196:	602f      	str	r7, [r5, #0]
 800a198:	2900      	cmp	r1, #0
 800a19a:	d0ca      	beq.n	800a132 <__sflush_r+0x1a>
 800a19c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a0:	4299      	cmp	r1, r3
 800a1a2:	d002      	beq.n	800a1aa <__sflush_r+0x92>
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 f9d7 	bl	800a558 <_free_r>
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ae:	e7c1      	b.n	800a134 <__sflush_r+0x1c>
 800a1b0:	6a21      	ldr	r1, [r4, #32]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	47b0      	blx	r6
 800a1b8:	1c41      	adds	r1, r0, #1
 800a1ba:	d1c7      	bne.n	800a14c <__sflush_r+0x34>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c4      	beq.n	800a14c <__sflush_r+0x34>
 800a1c2:	2b1d      	cmp	r3, #29
 800a1c4:	d001      	beq.n	800a1ca <__sflush_r+0xb2>
 800a1c6:	2b16      	cmp	r3, #22
 800a1c8:	d101      	bne.n	800a1ce <__sflush_r+0xb6>
 800a1ca:	602f      	str	r7, [r5, #0]
 800a1cc:	e7b1      	b.n	800a132 <__sflush_r+0x1a>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	e7ad      	b.n	800a134 <__sflush_r+0x1c>
 800a1d8:	690f      	ldr	r7, [r1, #16]
 800a1da:	2f00      	cmp	r7, #0
 800a1dc:	d0a9      	beq.n	800a132 <__sflush_r+0x1a>
 800a1de:	0793      	lsls	r3, r2, #30
 800a1e0:	680e      	ldr	r6, [r1, #0]
 800a1e2:	bf08      	it	eq
 800a1e4:	694b      	ldreq	r3, [r1, #20]
 800a1e6:	600f      	str	r7, [r1, #0]
 800a1e8:	bf18      	it	ne
 800a1ea:	2300      	movne	r3, #0
 800a1ec:	eba6 0807 	sub.w	r8, r6, r7
 800a1f0:	608b      	str	r3, [r1, #8]
 800a1f2:	f1b8 0f00 	cmp.w	r8, #0
 800a1f6:	dd9c      	ble.n	800a132 <__sflush_r+0x1a>
 800a1f8:	6a21      	ldr	r1, [r4, #32]
 800a1fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1fc:	4643      	mov	r3, r8
 800a1fe:	463a      	mov	r2, r7
 800a200:	4628      	mov	r0, r5
 800a202:	47b0      	blx	r6
 800a204:	2800      	cmp	r0, #0
 800a206:	dc06      	bgt.n	800a216 <__sflush_r+0xfe>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a20e:	81a3      	strh	r3, [r4, #12]
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	e78e      	b.n	800a134 <__sflush_r+0x1c>
 800a216:	4407      	add	r7, r0
 800a218:	eba8 0800 	sub.w	r8, r8, r0
 800a21c:	e7e9      	b.n	800a1f2 <__sflush_r+0xda>
 800a21e:	bf00      	nop
 800a220:	20400001 	.word	0x20400001

0800a224 <_fflush_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	690b      	ldr	r3, [r1, #16]
 800a228:	4605      	mov	r5, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	b913      	cbnz	r3, 800a234 <_fflush_r+0x10>
 800a22e:	2500      	movs	r5, #0
 800a230:	4628      	mov	r0, r5
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	b118      	cbz	r0, 800a23e <_fflush_r+0x1a>
 800a236:	6983      	ldr	r3, [r0, #24]
 800a238:	b90b      	cbnz	r3, 800a23e <_fflush_r+0x1a>
 800a23a:	f000 f887 	bl	800a34c <__sinit>
 800a23e:	4b14      	ldr	r3, [pc, #80]	; (800a290 <_fflush_r+0x6c>)
 800a240:	429c      	cmp	r4, r3
 800a242:	d11b      	bne.n	800a27c <_fflush_r+0x58>
 800a244:	686c      	ldr	r4, [r5, #4]
 800a246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0ef      	beq.n	800a22e <_fflush_r+0xa>
 800a24e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a250:	07d0      	lsls	r0, r2, #31
 800a252:	d404      	bmi.n	800a25e <_fflush_r+0x3a>
 800a254:	0599      	lsls	r1, r3, #22
 800a256:	d402      	bmi.n	800a25e <_fflush_r+0x3a>
 800a258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a25a:	f000 f915 	bl	800a488 <__retarget_lock_acquire_recursive>
 800a25e:	4628      	mov	r0, r5
 800a260:	4621      	mov	r1, r4
 800a262:	f7ff ff59 	bl	800a118 <__sflush_r>
 800a266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a268:	07da      	lsls	r2, r3, #31
 800a26a:	4605      	mov	r5, r0
 800a26c:	d4e0      	bmi.n	800a230 <_fflush_r+0xc>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	059b      	lsls	r3, r3, #22
 800a272:	d4dd      	bmi.n	800a230 <_fflush_r+0xc>
 800a274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a276:	f000 f908 	bl	800a48a <__retarget_lock_release_recursive>
 800a27a:	e7d9      	b.n	800a230 <_fflush_r+0xc>
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <_fflush_r+0x70>)
 800a27e:	429c      	cmp	r4, r3
 800a280:	d101      	bne.n	800a286 <_fflush_r+0x62>
 800a282:	68ac      	ldr	r4, [r5, #8]
 800a284:	e7df      	b.n	800a246 <_fflush_r+0x22>
 800a286:	4b04      	ldr	r3, [pc, #16]	; (800a298 <_fflush_r+0x74>)
 800a288:	429c      	cmp	r4, r3
 800a28a:	bf08      	it	eq
 800a28c:	68ec      	ldreq	r4, [r5, #12]
 800a28e:	e7da      	b.n	800a246 <_fflush_r+0x22>
 800a290:	0800b43c 	.word	0x0800b43c
 800a294:	0800b45c 	.word	0x0800b45c
 800a298:	0800b41c 	.word	0x0800b41c

0800a29c <std>:
 800a29c:	2300      	movs	r3, #0
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2aa:	6083      	str	r3, [r0, #8]
 800a2ac:	8181      	strh	r1, [r0, #12]
 800a2ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a2b0:	81c2      	strh	r2, [r0, #14]
 800a2b2:	6183      	str	r3, [r0, #24]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	2208      	movs	r2, #8
 800a2b8:	305c      	adds	r0, #92	; 0x5c
 800a2ba:	f7ff fdb7 	bl	8009e2c <memset>
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <std+0x38>)
 800a2c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a2c2:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <std+0x3c>)
 800a2c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <std+0x40>)
 800a2c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2ca:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <std+0x44>)
 800a2cc:	6224      	str	r4, [r4, #32]
 800a2ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800afcd 	.word	0x0800afcd
 800a2d8:	0800afef 	.word	0x0800afef
 800a2dc:	0800b027 	.word	0x0800b027
 800a2e0:	0800b04b 	.word	0x0800b04b

0800a2e4 <_cleanup_r>:
 800a2e4:	4901      	ldr	r1, [pc, #4]	; (800a2ec <_cleanup_r+0x8>)
 800a2e6:	f000 b8af 	b.w	800a448 <_fwalk_reent>
 800a2ea:	bf00      	nop
 800a2ec:	0800a225 	.word	0x0800a225

0800a2f0 <__sfmoreglue>:
 800a2f0:	b570      	push	{r4, r5, r6, lr}
 800a2f2:	2268      	movs	r2, #104	; 0x68
 800a2f4:	1e4d      	subs	r5, r1, #1
 800a2f6:	4355      	muls	r5, r2
 800a2f8:	460e      	mov	r6, r1
 800a2fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2fe:	f000 f997 	bl	800a630 <_malloc_r>
 800a302:	4604      	mov	r4, r0
 800a304:	b140      	cbz	r0, 800a318 <__sfmoreglue+0x28>
 800a306:	2100      	movs	r1, #0
 800a308:	e9c0 1600 	strd	r1, r6, [r0]
 800a30c:	300c      	adds	r0, #12
 800a30e:	60a0      	str	r0, [r4, #8]
 800a310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a314:	f7ff fd8a 	bl	8009e2c <memset>
 800a318:	4620      	mov	r0, r4
 800a31a:	bd70      	pop	{r4, r5, r6, pc}

0800a31c <__sfp_lock_acquire>:
 800a31c:	4801      	ldr	r0, [pc, #4]	; (800a324 <__sfp_lock_acquire+0x8>)
 800a31e:	f000 b8b3 	b.w	800a488 <__retarget_lock_acquire_recursive>
 800a322:	bf00      	nop
 800a324:	20000c8d 	.word	0x20000c8d

0800a328 <__sfp_lock_release>:
 800a328:	4801      	ldr	r0, [pc, #4]	; (800a330 <__sfp_lock_release+0x8>)
 800a32a:	f000 b8ae 	b.w	800a48a <__retarget_lock_release_recursive>
 800a32e:	bf00      	nop
 800a330:	20000c8d 	.word	0x20000c8d

0800a334 <__sinit_lock_acquire>:
 800a334:	4801      	ldr	r0, [pc, #4]	; (800a33c <__sinit_lock_acquire+0x8>)
 800a336:	f000 b8a7 	b.w	800a488 <__retarget_lock_acquire_recursive>
 800a33a:	bf00      	nop
 800a33c:	20000c8e 	.word	0x20000c8e

0800a340 <__sinit_lock_release>:
 800a340:	4801      	ldr	r0, [pc, #4]	; (800a348 <__sinit_lock_release+0x8>)
 800a342:	f000 b8a2 	b.w	800a48a <__retarget_lock_release_recursive>
 800a346:	bf00      	nop
 800a348:	20000c8e 	.word	0x20000c8e

0800a34c <__sinit>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	4604      	mov	r4, r0
 800a350:	f7ff fff0 	bl	800a334 <__sinit_lock_acquire>
 800a354:	69a3      	ldr	r3, [r4, #24]
 800a356:	b11b      	cbz	r3, 800a360 <__sinit+0x14>
 800a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35c:	f7ff bff0 	b.w	800a340 <__sinit_lock_release>
 800a360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a364:	6523      	str	r3, [r4, #80]	; 0x50
 800a366:	4b13      	ldr	r3, [pc, #76]	; (800a3b4 <__sinit+0x68>)
 800a368:	4a13      	ldr	r2, [pc, #76]	; (800a3b8 <__sinit+0x6c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a36e:	42a3      	cmp	r3, r4
 800a370:	bf04      	itt	eq
 800a372:	2301      	moveq	r3, #1
 800a374:	61a3      	streq	r3, [r4, #24]
 800a376:	4620      	mov	r0, r4
 800a378:	f000 f820 	bl	800a3bc <__sfp>
 800a37c:	6060      	str	r0, [r4, #4]
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 f81c 	bl	800a3bc <__sfp>
 800a384:	60a0      	str	r0, [r4, #8]
 800a386:	4620      	mov	r0, r4
 800a388:	f000 f818 	bl	800a3bc <__sfp>
 800a38c:	2200      	movs	r2, #0
 800a38e:	60e0      	str	r0, [r4, #12]
 800a390:	2104      	movs	r1, #4
 800a392:	6860      	ldr	r0, [r4, #4]
 800a394:	f7ff ff82 	bl	800a29c <std>
 800a398:	68a0      	ldr	r0, [r4, #8]
 800a39a:	2201      	movs	r2, #1
 800a39c:	2109      	movs	r1, #9
 800a39e:	f7ff ff7d 	bl	800a29c <std>
 800a3a2:	68e0      	ldr	r0, [r4, #12]
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	2112      	movs	r1, #18
 800a3a8:	f7ff ff78 	bl	800a29c <std>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	61a3      	str	r3, [r4, #24]
 800a3b0:	e7d2      	b.n	800a358 <__sinit+0xc>
 800a3b2:	bf00      	nop
 800a3b4:	0800b418 	.word	0x0800b418
 800a3b8:	0800a2e5 	.word	0x0800a2e5

0800a3bc <__sfp>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	4607      	mov	r7, r0
 800a3c0:	f7ff ffac 	bl	800a31c <__sfp_lock_acquire>
 800a3c4:	4b1e      	ldr	r3, [pc, #120]	; (800a440 <__sfp+0x84>)
 800a3c6:	681e      	ldr	r6, [r3, #0]
 800a3c8:	69b3      	ldr	r3, [r6, #24]
 800a3ca:	b913      	cbnz	r3, 800a3d2 <__sfp+0x16>
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7ff ffbd 	bl	800a34c <__sinit>
 800a3d2:	3648      	adds	r6, #72	; 0x48
 800a3d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	d503      	bpl.n	800a3e4 <__sfp+0x28>
 800a3dc:	6833      	ldr	r3, [r6, #0]
 800a3de:	b30b      	cbz	r3, 800a424 <__sfp+0x68>
 800a3e0:	6836      	ldr	r6, [r6, #0]
 800a3e2:	e7f7      	b.n	800a3d4 <__sfp+0x18>
 800a3e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3e8:	b9d5      	cbnz	r5, 800a420 <__sfp+0x64>
 800a3ea:	4b16      	ldr	r3, [pc, #88]	; (800a444 <__sfp+0x88>)
 800a3ec:	60e3      	str	r3, [r4, #12]
 800a3ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a3f4:	f000 f847 	bl	800a486 <__retarget_lock_init_recursive>
 800a3f8:	f7ff ff96 	bl	800a328 <__sfp_lock_release>
 800a3fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a404:	6025      	str	r5, [r4, #0]
 800a406:	61a5      	str	r5, [r4, #24]
 800a408:	2208      	movs	r2, #8
 800a40a:	4629      	mov	r1, r5
 800a40c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a410:	f7ff fd0c 	bl	8009e2c <memset>
 800a414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a41c:	4620      	mov	r0, r4
 800a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a420:	3468      	adds	r4, #104	; 0x68
 800a422:	e7d9      	b.n	800a3d8 <__sfp+0x1c>
 800a424:	2104      	movs	r1, #4
 800a426:	4638      	mov	r0, r7
 800a428:	f7ff ff62 	bl	800a2f0 <__sfmoreglue>
 800a42c:	4604      	mov	r4, r0
 800a42e:	6030      	str	r0, [r6, #0]
 800a430:	2800      	cmp	r0, #0
 800a432:	d1d5      	bne.n	800a3e0 <__sfp+0x24>
 800a434:	f7ff ff78 	bl	800a328 <__sfp_lock_release>
 800a438:	230c      	movs	r3, #12
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	e7ee      	b.n	800a41c <__sfp+0x60>
 800a43e:	bf00      	nop
 800a440:	0800b418 	.word	0x0800b418
 800a444:	ffff0001 	.word	0xffff0001

0800a448 <_fwalk_reent>:
 800a448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a44c:	4606      	mov	r6, r0
 800a44e:	4688      	mov	r8, r1
 800a450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a454:	2700      	movs	r7, #0
 800a456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a45a:	f1b9 0901 	subs.w	r9, r9, #1
 800a45e:	d505      	bpl.n	800a46c <_fwalk_reent+0x24>
 800a460:	6824      	ldr	r4, [r4, #0]
 800a462:	2c00      	cmp	r4, #0
 800a464:	d1f7      	bne.n	800a456 <_fwalk_reent+0xe>
 800a466:	4638      	mov	r0, r7
 800a468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a46c:	89ab      	ldrh	r3, [r5, #12]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d907      	bls.n	800a482 <_fwalk_reent+0x3a>
 800a472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a476:	3301      	adds	r3, #1
 800a478:	d003      	beq.n	800a482 <_fwalk_reent+0x3a>
 800a47a:	4629      	mov	r1, r5
 800a47c:	4630      	mov	r0, r6
 800a47e:	47c0      	blx	r8
 800a480:	4307      	orrs	r7, r0
 800a482:	3568      	adds	r5, #104	; 0x68
 800a484:	e7e9      	b.n	800a45a <_fwalk_reent+0x12>

0800a486 <__retarget_lock_init_recursive>:
 800a486:	4770      	bx	lr

0800a488 <__retarget_lock_acquire_recursive>:
 800a488:	4770      	bx	lr

0800a48a <__retarget_lock_release_recursive>:
 800a48a:	4770      	bx	lr

0800a48c <__swhatbuf_r>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	460e      	mov	r6, r1
 800a490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a494:	2900      	cmp	r1, #0
 800a496:	b096      	sub	sp, #88	; 0x58
 800a498:	4614      	mov	r4, r2
 800a49a:	461d      	mov	r5, r3
 800a49c:	da08      	bge.n	800a4b0 <__swhatbuf_r+0x24>
 800a49e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	602a      	str	r2, [r5, #0]
 800a4a6:	061a      	lsls	r2, r3, #24
 800a4a8:	d410      	bmi.n	800a4cc <__swhatbuf_r+0x40>
 800a4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4ae:	e00e      	b.n	800a4ce <__swhatbuf_r+0x42>
 800a4b0:	466a      	mov	r2, sp
 800a4b2:	f000 fdf1 	bl	800b098 <_fstat_r>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	dbf1      	blt.n	800a49e <__swhatbuf_r+0x12>
 800a4ba:	9a01      	ldr	r2, [sp, #4]
 800a4bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4c4:	425a      	negs	r2, r3
 800a4c6:	415a      	adcs	r2, r3
 800a4c8:	602a      	str	r2, [r5, #0]
 800a4ca:	e7ee      	b.n	800a4aa <__swhatbuf_r+0x1e>
 800a4cc:	2340      	movs	r3, #64	; 0x40
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	b016      	add	sp, #88	; 0x58
 800a4d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a4d8 <__smakebuf_r>:
 800a4d8:	898b      	ldrh	r3, [r1, #12]
 800a4da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4dc:	079d      	lsls	r5, r3, #30
 800a4de:	4606      	mov	r6, r0
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	d507      	bpl.n	800a4f4 <__smakebuf_r+0x1c>
 800a4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	6163      	str	r3, [r4, #20]
 800a4f0:	b002      	add	sp, #8
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	ab01      	add	r3, sp, #4
 800a4f6:	466a      	mov	r2, sp
 800a4f8:	f7ff ffc8 	bl	800a48c <__swhatbuf_r>
 800a4fc:	9900      	ldr	r1, [sp, #0]
 800a4fe:	4605      	mov	r5, r0
 800a500:	4630      	mov	r0, r6
 800a502:	f000 f895 	bl	800a630 <_malloc_r>
 800a506:	b948      	cbnz	r0, 800a51c <__smakebuf_r+0x44>
 800a508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a50c:	059a      	lsls	r2, r3, #22
 800a50e:	d4ef      	bmi.n	800a4f0 <__smakebuf_r+0x18>
 800a510:	f023 0303 	bic.w	r3, r3, #3
 800a514:	f043 0302 	orr.w	r3, r3, #2
 800a518:	81a3      	strh	r3, [r4, #12]
 800a51a:	e7e3      	b.n	800a4e4 <__smakebuf_r+0xc>
 800a51c:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <__smakebuf_r+0x7c>)
 800a51e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	6020      	str	r0, [r4, #0]
 800a524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a528:	81a3      	strh	r3, [r4, #12]
 800a52a:	9b00      	ldr	r3, [sp, #0]
 800a52c:	6163      	str	r3, [r4, #20]
 800a52e:	9b01      	ldr	r3, [sp, #4]
 800a530:	6120      	str	r0, [r4, #16]
 800a532:	b15b      	cbz	r3, 800a54c <__smakebuf_r+0x74>
 800a534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a538:	4630      	mov	r0, r6
 800a53a:	f000 fdbf 	bl	800b0bc <_isatty_r>
 800a53e:	b128      	cbz	r0, 800a54c <__smakebuf_r+0x74>
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	f023 0303 	bic.w	r3, r3, #3
 800a546:	f043 0301 	orr.w	r3, r3, #1
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	89a0      	ldrh	r0, [r4, #12]
 800a54e:	4305      	orrs	r5, r0
 800a550:	81a5      	strh	r5, [r4, #12]
 800a552:	e7cd      	b.n	800a4f0 <__smakebuf_r+0x18>
 800a554:	0800a2e5 	.word	0x0800a2e5

0800a558 <_free_r>:
 800a558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a55a:	2900      	cmp	r1, #0
 800a55c:	d044      	beq.n	800a5e8 <_free_r+0x90>
 800a55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a562:	9001      	str	r0, [sp, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f1a1 0404 	sub.w	r4, r1, #4
 800a56a:	bfb8      	it	lt
 800a56c:	18e4      	addlt	r4, r4, r3
 800a56e:	f000 fdef 	bl	800b150 <__malloc_lock>
 800a572:	4a1e      	ldr	r2, [pc, #120]	; (800a5ec <_free_r+0x94>)
 800a574:	9801      	ldr	r0, [sp, #4]
 800a576:	6813      	ldr	r3, [r2, #0]
 800a578:	b933      	cbnz	r3, 800a588 <_free_r+0x30>
 800a57a:	6063      	str	r3, [r4, #4]
 800a57c:	6014      	str	r4, [r2, #0]
 800a57e:	b003      	add	sp, #12
 800a580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a584:	f000 bdea 	b.w	800b15c <__malloc_unlock>
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d908      	bls.n	800a59e <_free_r+0x46>
 800a58c:	6825      	ldr	r5, [r4, #0]
 800a58e:	1961      	adds	r1, r4, r5
 800a590:	428b      	cmp	r3, r1
 800a592:	bf01      	itttt	eq
 800a594:	6819      	ldreq	r1, [r3, #0]
 800a596:	685b      	ldreq	r3, [r3, #4]
 800a598:	1949      	addeq	r1, r1, r5
 800a59a:	6021      	streq	r1, [r4, #0]
 800a59c:	e7ed      	b.n	800a57a <_free_r+0x22>
 800a59e:	461a      	mov	r2, r3
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	b10b      	cbz	r3, 800a5a8 <_free_r+0x50>
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d9fa      	bls.n	800a59e <_free_r+0x46>
 800a5a8:	6811      	ldr	r1, [r2, #0]
 800a5aa:	1855      	adds	r5, r2, r1
 800a5ac:	42a5      	cmp	r5, r4
 800a5ae:	d10b      	bne.n	800a5c8 <_free_r+0x70>
 800a5b0:	6824      	ldr	r4, [r4, #0]
 800a5b2:	4421      	add	r1, r4
 800a5b4:	1854      	adds	r4, r2, r1
 800a5b6:	42a3      	cmp	r3, r4
 800a5b8:	6011      	str	r1, [r2, #0]
 800a5ba:	d1e0      	bne.n	800a57e <_free_r+0x26>
 800a5bc:	681c      	ldr	r4, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	6053      	str	r3, [r2, #4]
 800a5c2:	4421      	add	r1, r4
 800a5c4:	6011      	str	r1, [r2, #0]
 800a5c6:	e7da      	b.n	800a57e <_free_r+0x26>
 800a5c8:	d902      	bls.n	800a5d0 <_free_r+0x78>
 800a5ca:	230c      	movs	r3, #12
 800a5cc:	6003      	str	r3, [r0, #0]
 800a5ce:	e7d6      	b.n	800a57e <_free_r+0x26>
 800a5d0:	6825      	ldr	r5, [r4, #0]
 800a5d2:	1961      	adds	r1, r4, r5
 800a5d4:	428b      	cmp	r3, r1
 800a5d6:	bf04      	itt	eq
 800a5d8:	6819      	ldreq	r1, [r3, #0]
 800a5da:	685b      	ldreq	r3, [r3, #4]
 800a5dc:	6063      	str	r3, [r4, #4]
 800a5de:	bf04      	itt	eq
 800a5e0:	1949      	addeq	r1, r1, r5
 800a5e2:	6021      	streq	r1, [r4, #0]
 800a5e4:	6054      	str	r4, [r2, #4]
 800a5e6:	e7ca      	b.n	800a57e <_free_r+0x26>
 800a5e8:	b003      	add	sp, #12
 800a5ea:	bd30      	pop	{r4, r5, pc}
 800a5ec:	20000c90 	.word	0x20000c90

0800a5f0 <sbrk_aligned>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	4e0e      	ldr	r6, [pc, #56]	; (800a62c <sbrk_aligned+0x3c>)
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	6831      	ldr	r1, [r6, #0]
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	b911      	cbnz	r1, 800a602 <sbrk_aligned+0x12>
 800a5fc:	f000 fcd6 	bl	800afac <_sbrk_r>
 800a600:	6030      	str	r0, [r6, #0]
 800a602:	4621      	mov	r1, r4
 800a604:	4628      	mov	r0, r5
 800a606:	f000 fcd1 	bl	800afac <_sbrk_r>
 800a60a:	1c43      	adds	r3, r0, #1
 800a60c:	d00a      	beq.n	800a624 <sbrk_aligned+0x34>
 800a60e:	1cc4      	adds	r4, r0, #3
 800a610:	f024 0403 	bic.w	r4, r4, #3
 800a614:	42a0      	cmp	r0, r4
 800a616:	d007      	beq.n	800a628 <sbrk_aligned+0x38>
 800a618:	1a21      	subs	r1, r4, r0
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 fcc6 	bl	800afac <_sbrk_r>
 800a620:	3001      	adds	r0, #1
 800a622:	d101      	bne.n	800a628 <sbrk_aligned+0x38>
 800a624:	f04f 34ff 	mov.w	r4, #4294967295
 800a628:	4620      	mov	r0, r4
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	20000c94 	.word	0x20000c94

0800a630 <_malloc_r>:
 800a630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a634:	1ccd      	adds	r5, r1, #3
 800a636:	f025 0503 	bic.w	r5, r5, #3
 800a63a:	3508      	adds	r5, #8
 800a63c:	2d0c      	cmp	r5, #12
 800a63e:	bf38      	it	cc
 800a640:	250c      	movcc	r5, #12
 800a642:	2d00      	cmp	r5, #0
 800a644:	4607      	mov	r7, r0
 800a646:	db01      	blt.n	800a64c <_malloc_r+0x1c>
 800a648:	42a9      	cmp	r1, r5
 800a64a:	d905      	bls.n	800a658 <_malloc_r+0x28>
 800a64c:	230c      	movs	r3, #12
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	2600      	movs	r6, #0
 800a652:	4630      	mov	r0, r6
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	4e2e      	ldr	r6, [pc, #184]	; (800a714 <_malloc_r+0xe4>)
 800a65a:	f000 fd79 	bl	800b150 <__malloc_lock>
 800a65e:	6833      	ldr	r3, [r6, #0]
 800a660:	461c      	mov	r4, r3
 800a662:	bb34      	cbnz	r4, 800a6b2 <_malloc_r+0x82>
 800a664:	4629      	mov	r1, r5
 800a666:	4638      	mov	r0, r7
 800a668:	f7ff ffc2 	bl	800a5f0 <sbrk_aligned>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	4604      	mov	r4, r0
 800a670:	d14d      	bne.n	800a70e <_malloc_r+0xde>
 800a672:	6834      	ldr	r4, [r6, #0]
 800a674:	4626      	mov	r6, r4
 800a676:	2e00      	cmp	r6, #0
 800a678:	d140      	bne.n	800a6fc <_malloc_r+0xcc>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	4631      	mov	r1, r6
 800a67e:	4638      	mov	r0, r7
 800a680:	eb04 0803 	add.w	r8, r4, r3
 800a684:	f000 fc92 	bl	800afac <_sbrk_r>
 800a688:	4580      	cmp	r8, r0
 800a68a:	d13a      	bne.n	800a702 <_malloc_r+0xd2>
 800a68c:	6821      	ldr	r1, [r4, #0]
 800a68e:	3503      	adds	r5, #3
 800a690:	1a6d      	subs	r5, r5, r1
 800a692:	f025 0503 	bic.w	r5, r5, #3
 800a696:	3508      	adds	r5, #8
 800a698:	2d0c      	cmp	r5, #12
 800a69a:	bf38      	it	cc
 800a69c:	250c      	movcc	r5, #12
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff ffa5 	bl	800a5f0 <sbrk_aligned>
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	d02b      	beq.n	800a702 <_malloc_r+0xd2>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	442b      	add	r3, r5
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	e00e      	b.n	800a6d0 <_malloc_r+0xa0>
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	1b52      	subs	r2, r2, r5
 800a6b6:	d41e      	bmi.n	800a6f6 <_malloc_r+0xc6>
 800a6b8:	2a0b      	cmp	r2, #11
 800a6ba:	d916      	bls.n	800a6ea <_malloc_r+0xba>
 800a6bc:	1961      	adds	r1, r4, r5
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	6025      	str	r5, [r4, #0]
 800a6c2:	bf18      	it	ne
 800a6c4:	6059      	strne	r1, [r3, #4]
 800a6c6:	6863      	ldr	r3, [r4, #4]
 800a6c8:	bf08      	it	eq
 800a6ca:	6031      	streq	r1, [r6, #0]
 800a6cc:	5162      	str	r2, [r4, r5]
 800a6ce:	604b      	str	r3, [r1, #4]
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f104 060b 	add.w	r6, r4, #11
 800a6d6:	f000 fd41 	bl	800b15c <__malloc_unlock>
 800a6da:	f026 0607 	bic.w	r6, r6, #7
 800a6de:	1d23      	adds	r3, r4, #4
 800a6e0:	1af2      	subs	r2, r6, r3
 800a6e2:	d0b6      	beq.n	800a652 <_malloc_r+0x22>
 800a6e4:	1b9b      	subs	r3, r3, r6
 800a6e6:	50a3      	str	r3, [r4, r2]
 800a6e8:	e7b3      	b.n	800a652 <_malloc_r+0x22>
 800a6ea:	6862      	ldr	r2, [r4, #4]
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	bf0c      	ite	eq
 800a6f0:	6032      	streq	r2, [r6, #0]
 800a6f2:	605a      	strne	r2, [r3, #4]
 800a6f4:	e7ec      	b.n	800a6d0 <_malloc_r+0xa0>
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	6864      	ldr	r4, [r4, #4]
 800a6fa:	e7b2      	b.n	800a662 <_malloc_r+0x32>
 800a6fc:	4634      	mov	r4, r6
 800a6fe:	6876      	ldr	r6, [r6, #4]
 800a700:	e7b9      	b.n	800a676 <_malloc_r+0x46>
 800a702:	230c      	movs	r3, #12
 800a704:	603b      	str	r3, [r7, #0]
 800a706:	4638      	mov	r0, r7
 800a708:	f000 fd28 	bl	800b15c <__malloc_unlock>
 800a70c:	e7a1      	b.n	800a652 <_malloc_r+0x22>
 800a70e:	6025      	str	r5, [r4, #0]
 800a710:	e7de      	b.n	800a6d0 <_malloc_r+0xa0>
 800a712:	bf00      	nop
 800a714:	20000c90 	.word	0x20000c90

0800a718 <__ssputs_r>:
 800a718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a71c:	688e      	ldr	r6, [r1, #8]
 800a71e:	429e      	cmp	r6, r3
 800a720:	4682      	mov	sl, r0
 800a722:	460c      	mov	r4, r1
 800a724:	4690      	mov	r8, r2
 800a726:	461f      	mov	r7, r3
 800a728:	d838      	bhi.n	800a79c <__ssputs_r+0x84>
 800a72a:	898a      	ldrh	r2, [r1, #12]
 800a72c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a730:	d032      	beq.n	800a798 <__ssputs_r+0x80>
 800a732:	6825      	ldr	r5, [r4, #0]
 800a734:	6909      	ldr	r1, [r1, #16]
 800a736:	eba5 0901 	sub.w	r9, r5, r1
 800a73a:	6965      	ldr	r5, [r4, #20]
 800a73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a744:	3301      	adds	r3, #1
 800a746:	444b      	add	r3, r9
 800a748:	106d      	asrs	r5, r5, #1
 800a74a:	429d      	cmp	r5, r3
 800a74c:	bf38      	it	cc
 800a74e:	461d      	movcc	r5, r3
 800a750:	0553      	lsls	r3, r2, #21
 800a752:	d531      	bpl.n	800a7b8 <__ssputs_r+0xa0>
 800a754:	4629      	mov	r1, r5
 800a756:	f7ff ff6b 	bl	800a630 <_malloc_r>
 800a75a:	4606      	mov	r6, r0
 800a75c:	b950      	cbnz	r0, 800a774 <__ssputs_r+0x5c>
 800a75e:	230c      	movs	r3, #12
 800a760:	f8ca 3000 	str.w	r3, [sl]
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a774:	6921      	ldr	r1, [r4, #16]
 800a776:	464a      	mov	r2, r9
 800a778:	f000 fcc2 	bl	800b100 <memcpy>
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a786:	81a3      	strh	r3, [r4, #12]
 800a788:	6126      	str	r6, [r4, #16]
 800a78a:	6165      	str	r5, [r4, #20]
 800a78c:	444e      	add	r6, r9
 800a78e:	eba5 0509 	sub.w	r5, r5, r9
 800a792:	6026      	str	r6, [r4, #0]
 800a794:	60a5      	str	r5, [r4, #8]
 800a796:	463e      	mov	r6, r7
 800a798:	42be      	cmp	r6, r7
 800a79a:	d900      	bls.n	800a79e <__ssputs_r+0x86>
 800a79c:	463e      	mov	r6, r7
 800a79e:	6820      	ldr	r0, [r4, #0]
 800a7a0:	4632      	mov	r2, r6
 800a7a2:	4641      	mov	r1, r8
 800a7a4:	f000 fcba 	bl	800b11c <memmove>
 800a7a8:	68a3      	ldr	r3, [r4, #8]
 800a7aa:	1b9b      	subs	r3, r3, r6
 800a7ac:	60a3      	str	r3, [r4, #8]
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	4433      	add	r3, r6
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e7db      	b.n	800a770 <__ssputs_r+0x58>
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	f000 fcd5 	bl	800b168 <_realloc_r>
 800a7be:	4606      	mov	r6, r0
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d1e1      	bne.n	800a788 <__ssputs_r+0x70>
 800a7c4:	6921      	ldr	r1, [r4, #16]
 800a7c6:	4650      	mov	r0, sl
 800a7c8:	f7ff fec6 	bl	800a558 <_free_r>
 800a7cc:	e7c7      	b.n	800a75e <__ssputs_r+0x46>
	...

0800a7d0 <_svfiprintf_r>:
 800a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	4698      	mov	r8, r3
 800a7d6:	898b      	ldrh	r3, [r1, #12]
 800a7d8:	061b      	lsls	r3, r3, #24
 800a7da:	b09d      	sub	sp, #116	; 0x74
 800a7dc:	4607      	mov	r7, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	4614      	mov	r4, r2
 800a7e2:	d50e      	bpl.n	800a802 <_svfiprintf_r+0x32>
 800a7e4:	690b      	ldr	r3, [r1, #16]
 800a7e6:	b963      	cbnz	r3, 800a802 <_svfiprintf_r+0x32>
 800a7e8:	2140      	movs	r1, #64	; 0x40
 800a7ea:	f7ff ff21 	bl	800a630 <_malloc_r>
 800a7ee:	6028      	str	r0, [r5, #0]
 800a7f0:	6128      	str	r0, [r5, #16]
 800a7f2:	b920      	cbnz	r0, 800a7fe <_svfiprintf_r+0x2e>
 800a7f4:	230c      	movs	r3, #12
 800a7f6:	603b      	str	r3, [r7, #0]
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fc:	e0d1      	b.n	800a9a2 <_svfiprintf_r+0x1d2>
 800a7fe:	2340      	movs	r3, #64	; 0x40
 800a800:	616b      	str	r3, [r5, #20]
 800a802:	2300      	movs	r3, #0
 800a804:	9309      	str	r3, [sp, #36]	; 0x24
 800a806:	2320      	movs	r3, #32
 800a808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a810:	2330      	movs	r3, #48	; 0x30
 800a812:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a9bc <_svfiprintf_r+0x1ec>
 800a816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a81a:	f04f 0901 	mov.w	r9, #1
 800a81e:	4623      	mov	r3, r4
 800a820:	469a      	mov	sl, r3
 800a822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a826:	b10a      	cbz	r2, 800a82c <_svfiprintf_r+0x5c>
 800a828:	2a25      	cmp	r2, #37	; 0x25
 800a82a:	d1f9      	bne.n	800a820 <_svfiprintf_r+0x50>
 800a82c:	ebba 0b04 	subs.w	fp, sl, r4
 800a830:	d00b      	beq.n	800a84a <_svfiprintf_r+0x7a>
 800a832:	465b      	mov	r3, fp
 800a834:	4622      	mov	r2, r4
 800a836:	4629      	mov	r1, r5
 800a838:	4638      	mov	r0, r7
 800a83a:	f7ff ff6d 	bl	800a718 <__ssputs_r>
 800a83e:	3001      	adds	r0, #1
 800a840:	f000 80aa 	beq.w	800a998 <_svfiprintf_r+0x1c8>
 800a844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a846:	445a      	add	r2, fp
 800a848:	9209      	str	r2, [sp, #36]	; 0x24
 800a84a:	f89a 3000 	ldrb.w	r3, [sl]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 80a2 	beq.w	800a998 <_svfiprintf_r+0x1c8>
 800a854:	2300      	movs	r3, #0
 800a856:	f04f 32ff 	mov.w	r2, #4294967295
 800a85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a85e:	f10a 0a01 	add.w	sl, sl, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	9307      	str	r3, [sp, #28]
 800a866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a86a:	931a      	str	r3, [sp, #104]	; 0x68
 800a86c:	4654      	mov	r4, sl
 800a86e:	2205      	movs	r2, #5
 800a870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a874:	4851      	ldr	r0, [pc, #324]	; (800a9bc <_svfiprintf_r+0x1ec>)
 800a876:	f7f5 fcbb 	bl	80001f0 <memchr>
 800a87a:	9a04      	ldr	r2, [sp, #16]
 800a87c:	b9d8      	cbnz	r0, 800a8b6 <_svfiprintf_r+0xe6>
 800a87e:	06d0      	lsls	r0, r2, #27
 800a880:	bf44      	itt	mi
 800a882:	2320      	movmi	r3, #32
 800a884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a888:	0711      	lsls	r1, r2, #28
 800a88a:	bf44      	itt	mi
 800a88c:	232b      	movmi	r3, #43	; 0x2b
 800a88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a892:	f89a 3000 	ldrb.w	r3, [sl]
 800a896:	2b2a      	cmp	r3, #42	; 0x2a
 800a898:	d015      	beq.n	800a8c6 <_svfiprintf_r+0xf6>
 800a89a:	9a07      	ldr	r2, [sp, #28]
 800a89c:	4654      	mov	r4, sl
 800a89e:	2000      	movs	r0, #0
 800a8a0:	f04f 0c0a 	mov.w	ip, #10
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8aa:	3b30      	subs	r3, #48	; 0x30
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	d94e      	bls.n	800a94e <_svfiprintf_r+0x17e>
 800a8b0:	b1b0      	cbz	r0, 800a8e0 <_svfiprintf_r+0x110>
 800a8b2:	9207      	str	r2, [sp, #28]
 800a8b4:	e014      	b.n	800a8e0 <_svfiprintf_r+0x110>
 800a8b6:	eba0 0308 	sub.w	r3, r0, r8
 800a8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	46a2      	mov	sl, r4
 800a8c4:	e7d2      	b.n	800a86c <_svfiprintf_r+0x9c>
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	1d19      	adds	r1, r3, #4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	9103      	str	r1, [sp, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bfbb      	ittet	lt
 800a8d2:	425b      	neglt	r3, r3
 800a8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a8d8:	9307      	strge	r3, [sp, #28]
 800a8da:	9307      	strlt	r3, [sp, #28]
 800a8dc:	bfb8      	it	lt
 800a8de:	9204      	strlt	r2, [sp, #16]
 800a8e0:	7823      	ldrb	r3, [r4, #0]
 800a8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a8e4:	d10c      	bne.n	800a900 <_svfiprintf_r+0x130>
 800a8e6:	7863      	ldrb	r3, [r4, #1]
 800a8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ea:	d135      	bne.n	800a958 <_svfiprintf_r+0x188>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	1d1a      	adds	r2, r3, #4
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	9203      	str	r2, [sp, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfb8      	it	lt
 800a8f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8fc:	3402      	adds	r4, #2
 800a8fe:	9305      	str	r3, [sp, #20]
 800a900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9cc <_svfiprintf_r+0x1fc>
 800a904:	7821      	ldrb	r1, [r4, #0]
 800a906:	2203      	movs	r2, #3
 800a908:	4650      	mov	r0, sl
 800a90a:	f7f5 fc71 	bl	80001f0 <memchr>
 800a90e:	b140      	cbz	r0, 800a922 <_svfiprintf_r+0x152>
 800a910:	2340      	movs	r3, #64	; 0x40
 800a912:	eba0 000a 	sub.w	r0, r0, sl
 800a916:	fa03 f000 	lsl.w	r0, r3, r0
 800a91a:	9b04      	ldr	r3, [sp, #16]
 800a91c:	4303      	orrs	r3, r0
 800a91e:	3401      	adds	r4, #1
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a926:	4826      	ldr	r0, [pc, #152]	; (800a9c0 <_svfiprintf_r+0x1f0>)
 800a928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a92c:	2206      	movs	r2, #6
 800a92e:	f7f5 fc5f 	bl	80001f0 <memchr>
 800a932:	2800      	cmp	r0, #0
 800a934:	d038      	beq.n	800a9a8 <_svfiprintf_r+0x1d8>
 800a936:	4b23      	ldr	r3, [pc, #140]	; (800a9c4 <_svfiprintf_r+0x1f4>)
 800a938:	bb1b      	cbnz	r3, 800a982 <_svfiprintf_r+0x1b2>
 800a93a:	9b03      	ldr	r3, [sp, #12]
 800a93c:	3307      	adds	r3, #7
 800a93e:	f023 0307 	bic.w	r3, r3, #7
 800a942:	3308      	adds	r3, #8
 800a944:	9303      	str	r3, [sp, #12]
 800a946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a948:	4433      	add	r3, r6
 800a94a:	9309      	str	r3, [sp, #36]	; 0x24
 800a94c:	e767      	b.n	800a81e <_svfiprintf_r+0x4e>
 800a94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a952:	460c      	mov	r4, r1
 800a954:	2001      	movs	r0, #1
 800a956:	e7a5      	b.n	800a8a4 <_svfiprintf_r+0xd4>
 800a958:	2300      	movs	r3, #0
 800a95a:	3401      	adds	r4, #1
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	4619      	mov	r1, r3
 800a960:	f04f 0c0a 	mov.w	ip, #10
 800a964:	4620      	mov	r0, r4
 800a966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a96a:	3a30      	subs	r2, #48	; 0x30
 800a96c:	2a09      	cmp	r2, #9
 800a96e:	d903      	bls.n	800a978 <_svfiprintf_r+0x1a8>
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0c5      	beq.n	800a900 <_svfiprintf_r+0x130>
 800a974:	9105      	str	r1, [sp, #20]
 800a976:	e7c3      	b.n	800a900 <_svfiprintf_r+0x130>
 800a978:	fb0c 2101 	mla	r1, ip, r1, r2
 800a97c:	4604      	mov	r4, r0
 800a97e:	2301      	movs	r3, #1
 800a980:	e7f0      	b.n	800a964 <_svfiprintf_r+0x194>
 800a982:	ab03      	add	r3, sp, #12
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	462a      	mov	r2, r5
 800a988:	4b0f      	ldr	r3, [pc, #60]	; (800a9c8 <_svfiprintf_r+0x1f8>)
 800a98a:	a904      	add	r1, sp, #16
 800a98c:	4638      	mov	r0, r7
 800a98e:	f3af 8000 	nop.w
 800a992:	1c42      	adds	r2, r0, #1
 800a994:	4606      	mov	r6, r0
 800a996:	d1d6      	bne.n	800a946 <_svfiprintf_r+0x176>
 800a998:	89ab      	ldrh	r3, [r5, #12]
 800a99a:	065b      	lsls	r3, r3, #25
 800a99c:	f53f af2c 	bmi.w	800a7f8 <_svfiprintf_r+0x28>
 800a9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9a2:	b01d      	add	sp, #116	; 0x74
 800a9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a8:	ab03      	add	r3, sp, #12
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	462a      	mov	r2, r5
 800a9ae:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <_svfiprintf_r+0x1f8>)
 800a9b0:	a904      	add	r1, sp, #16
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	f000 f9d4 	bl	800ad60 <_printf_i>
 800a9b8:	e7eb      	b.n	800a992 <_svfiprintf_r+0x1c2>
 800a9ba:	bf00      	nop
 800a9bc:	0800b47c 	.word	0x0800b47c
 800a9c0:	0800b486 	.word	0x0800b486
 800a9c4:	00000000 	.word	0x00000000
 800a9c8:	0800a719 	.word	0x0800a719
 800a9cc:	0800b482 	.word	0x0800b482

0800a9d0 <__sfputc_r>:
 800a9d0:	6893      	ldr	r3, [r2, #8]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	b410      	push	{r4}
 800a9d8:	6093      	str	r3, [r2, #8]
 800a9da:	da08      	bge.n	800a9ee <__sfputc_r+0x1e>
 800a9dc:	6994      	ldr	r4, [r2, #24]
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	db01      	blt.n	800a9e6 <__sfputc_r+0x16>
 800a9e2:	290a      	cmp	r1, #10
 800a9e4:	d103      	bne.n	800a9ee <__sfputc_r+0x1e>
 800a9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ea:	f7ff bad5 	b.w	8009f98 <__swbuf_r>
 800a9ee:	6813      	ldr	r3, [r2, #0]
 800a9f0:	1c58      	adds	r0, r3, #1
 800a9f2:	6010      	str	r0, [r2, #0]
 800a9f4:	7019      	strb	r1, [r3, #0]
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <__sfputs_r>:
 800a9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa00:	4606      	mov	r6, r0
 800aa02:	460f      	mov	r7, r1
 800aa04:	4614      	mov	r4, r2
 800aa06:	18d5      	adds	r5, r2, r3
 800aa08:	42ac      	cmp	r4, r5
 800aa0a:	d101      	bne.n	800aa10 <__sfputs_r+0x12>
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e007      	b.n	800aa20 <__sfputs_r+0x22>
 800aa10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa14:	463a      	mov	r2, r7
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ffda 	bl	800a9d0 <__sfputc_r>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d1f3      	bne.n	800aa08 <__sfputs_r+0xa>
 800aa20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa24 <_vfiprintf_r>:
 800aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	460d      	mov	r5, r1
 800aa2a:	b09d      	sub	sp, #116	; 0x74
 800aa2c:	4614      	mov	r4, r2
 800aa2e:	4698      	mov	r8, r3
 800aa30:	4606      	mov	r6, r0
 800aa32:	b118      	cbz	r0, 800aa3c <_vfiprintf_r+0x18>
 800aa34:	6983      	ldr	r3, [r0, #24]
 800aa36:	b90b      	cbnz	r3, 800aa3c <_vfiprintf_r+0x18>
 800aa38:	f7ff fc88 	bl	800a34c <__sinit>
 800aa3c:	4b89      	ldr	r3, [pc, #548]	; (800ac64 <_vfiprintf_r+0x240>)
 800aa3e:	429d      	cmp	r5, r3
 800aa40:	d11b      	bne.n	800aa7a <_vfiprintf_r+0x56>
 800aa42:	6875      	ldr	r5, [r6, #4]
 800aa44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa46:	07d9      	lsls	r1, r3, #31
 800aa48:	d405      	bmi.n	800aa56 <_vfiprintf_r+0x32>
 800aa4a:	89ab      	ldrh	r3, [r5, #12]
 800aa4c:	059a      	lsls	r2, r3, #22
 800aa4e:	d402      	bmi.n	800aa56 <_vfiprintf_r+0x32>
 800aa50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa52:	f7ff fd19 	bl	800a488 <__retarget_lock_acquire_recursive>
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	071b      	lsls	r3, r3, #28
 800aa5a:	d501      	bpl.n	800aa60 <_vfiprintf_r+0x3c>
 800aa5c:	692b      	ldr	r3, [r5, #16]
 800aa5e:	b9eb      	cbnz	r3, 800aa9c <_vfiprintf_r+0x78>
 800aa60:	4629      	mov	r1, r5
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff faea 	bl	800a03c <__swsetup_r>
 800aa68:	b1c0      	cbz	r0, 800aa9c <_vfiprintf_r+0x78>
 800aa6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa6c:	07dc      	lsls	r4, r3, #31
 800aa6e:	d50e      	bpl.n	800aa8e <_vfiprintf_r+0x6a>
 800aa70:	f04f 30ff 	mov.w	r0, #4294967295
 800aa74:	b01d      	add	sp, #116	; 0x74
 800aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa7a:	4b7b      	ldr	r3, [pc, #492]	; (800ac68 <_vfiprintf_r+0x244>)
 800aa7c:	429d      	cmp	r5, r3
 800aa7e:	d101      	bne.n	800aa84 <_vfiprintf_r+0x60>
 800aa80:	68b5      	ldr	r5, [r6, #8]
 800aa82:	e7df      	b.n	800aa44 <_vfiprintf_r+0x20>
 800aa84:	4b79      	ldr	r3, [pc, #484]	; (800ac6c <_vfiprintf_r+0x248>)
 800aa86:	429d      	cmp	r5, r3
 800aa88:	bf08      	it	eq
 800aa8a:	68f5      	ldreq	r5, [r6, #12]
 800aa8c:	e7da      	b.n	800aa44 <_vfiprintf_r+0x20>
 800aa8e:	89ab      	ldrh	r3, [r5, #12]
 800aa90:	0598      	lsls	r0, r3, #22
 800aa92:	d4ed      	bmi.n	800aa70 <_vfiprintf_r+0x4c>
 800aa94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa96:	f7ff fcf8 	bl	800a48a <__retarget_lock_release_recursive>
 800aa9a:	e7e9      	b.n	800aa70 <_vfiprintf_r+0x4c>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa0:	2320      	movs	r3, #32
 800aaa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaa6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaaa:	2330      	movs	r3, #48	; 0x30
 800aaac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac70 <_vfiprintf_r+0x24c>
 800aab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aab4:	f04f 0901 	mov.w	r9, #1
 800aab8:	4623      	mov	r3, r4
 800aaba:	469a      	mov	sl, r3
 800aabc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aac0:	b10a      	cbz	r2, 800aac6 <_vfiprintf_r+0xa2>
 800aac2:	2a25      	cmp	r2, #37	; 0x25
 800aac4:	d1f9      	bne.n	800aaba <_vfiprintf_r+0x96>
 800aac6:	ebba 0b04 	subs.w	fp, sl, r4
 800aaca:	d00b      	beq.n	800aae4 <_vfiprintf_r+0xc0>
 800aacc:	465b      	mov	r3, fp
 800aace:	4622      	mov	r2, r4
 800aad0:	4629      	mov	r1, r5
 800aad2:	4630      	mov	r0, r6
 800aad4:	f7ff ff93 	bl	800a9fe <__sfputs_r>
 800aad8:	3001      	adds	r0, #1
 800aada:	f000 80aa 	beq.w	800ac32 <_vfiprintf_r+0x20e>
 800aade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aae0:	445a      	add	r2, fp
 800aae2:	9209      	str	r2, [sp, #36]	; 0x24
 800aae4:	f89a 3000 	ldrb.w	r3, [sl]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80a2 	beq.w	800ac32 <_vfiprintf_r+0x20e>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf8:	f10a 0a01 	add.w	sl, sl, #1
 800aafc:	9304      	str	r3, [sp, #16]
 800aafe:	9307      	str	r3, [sp, #28]
 800ab00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab04:	931a      	str	r3, [sp, #104]	; 0x68
 800ab06:	4654      	mov	r4, sl
 800ab08:	2205      	movs	r2, #5
 800ab0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0e:	4858      	ldr	r0, [pc, #352]	; (800ac70 <_vfiprintf_r+0x24c>)
 800ab10:	f7f5 fb6e 	bl	80001f0 <memchr>
 800ab14:	9a04      	ldr	r2, [sp, #16]
 800ab16:	b9d8      	cbnz	r0, 800ab50 <_vfiprintf_r+0x12c>
 800ab18:	06d1      	lsls	r1, r2, #27
 800ab1a:	bf44      	itt	mi
 800ab1c:	2320      	movmi	r3, #32
 800ab1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab22:	0713      	lsls	r3, r2, #28
 800ab24:	bf44      	itt	mi
 800ab26:	232b      	movmi	r3, #43	; 0x2b
 800ab28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab30:	2b2a      	cmp	r3, #42	; 0x2a
 800ab32:	d015      	beq.n	800ab60 <_vfiprintf_r+0x13c>
 800ab34:	9a07      	ldr	r2, [sp, #28]
 800ab36:	4654      	mov	r4, sl
 800ab38:	2000      	movs	r0, #0
 800ab3a:	f04f 0c0a 	mov.w	ip, #10
 800ab3e:	4621      	mov	r1, r4
 800ab40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab44:	3b30      	subs	r3, #48	; 0x30
 800ab46:	2b09      	cmp	r3, #9
 800ab48:	d94e      	bls.n	800abe8 <_vfiprintf_r+0x1c4>
 800ab4a:	b1b0      	cbz	r0, 800ab7a <_vfiprintf_r+0x156>
 800ab4c:	9207      	str	r2, [sp, #28]
 800ab4e:	e014      	b.n	800ab7a <_vfiprintf_r+0x156>
 800ab50:	eba0 0308 	sub.w	r3, r0, r8
 800ab54:	fa09 f303 	lsl.w	r3, r9, r3
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	46a2      	mov	sl, r4
 800ab5e:	e7d2      	b.n	800ab06 <_vfiprintf_r+0xe2>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	1d19      	adds	r1, r3, #4
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	9103      	str	r1, [sp, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	bfbb      	ittet	lt
 800ab6c:	425b      	neglt	r3, r3
 800ab6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab72:	9307      	strge	r3, [sp, #28]
 800ab74:	9307      	strlt	r3, [sp, #28]
 800ab76:	bfb8      	it	lt
 800ab78:	9204      	strlt	r2, [sp, #16]
 800ab7a:	7823      	ldrb	r3, [r4, #0]
 800ab7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab7e:	d10c      	bne.n	800ab9a <_vfiprintf_r+0x176>
 800ab80:	7863      	ldrb	r3, [r4, #1]
 800ab82:	2b2a      	cmp	r3, #42	; 0x2a
 800ab84:	d135      	bne.n	800abf2 <_vfiprintf_r+0x1ce>
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	1d1a      	adds	r2, r3, #4
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	9203      	str	r2, [sp, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	bfb8      	it	lt
 800ab92:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab96:	3402      	adds	r4, #2
 800ab98:	9305      	str	r3, [sp, #20]
 800ab9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac80 <_vfiprintf_r+0x25c>
 800ab9e:	7821      	ldrb	r1, [r4, #0]
 800aba0:	2203      	movs	r2, #3
 800aba2:	4650      	mov	r0, sl
 800aba4:	f7f5 fb24 	bl	80001f0 <memchr>
 800aba8:	b140      	cbz	r0, 800abbc <_vfiprintf_r+0x198>
 800abaa:	2340      	movs	r3, #64	; 0x40
 800abac:	eba0 000a 	sub.w	r0, r0, sl
 800abb0:	fa03 f000 	lsl.w	r0, r3, r0
 800abb4:	9b04      	ldr	r3, [sp, #16]
 800abb6:	4303      	orrs	r3, r0
 800abb8:	3401      	adds	r4, #1
 800abba:	9304      	str	r3, [sp, #16]
 800abbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc0:	482c      	ldr	r0, [pc, #176]	; (800ac74 <_vfiprintf_r+0x250>)
 800abc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abc6:	2206      	movs	r2, #6
 800abc8:	f7f5 fb12 	bl	80001f0 <memchr>
 800abcc:	2800      	cmp	r0, #0
 800abce:	d03f      	beq.n	800ac50 <_vfiprintf_r+0x22c>
 800abd0:	4b29      	ldr	r3, [pc, #164]	; (800ac78 <_vfiprintf_r+0x254>)
 800abd2:	bb1b      	cbnz	r3, 800ac1c <_vfiprintf_r+0x1f8>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	3307      	adds	r3, #7
 800abd8:	f023 0307 	bic.w	r3, r3, #7
 800abdc:	3308      	adds	r3, #8
 800abde:	9303      	str	r3, [sp, #12]
 800abe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe2:	443b      	add	r3, r7
 800abe4:	9309      	str	r3, [sp, #36]	; 0x24
 800abe6:	e767      	b.n	800aab8 <_vfiprintf_r+0x94>
 800abe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800abec:	460c      	mov	r4, r1
 800abee:	2001      	movs	r0, #1
 800abf0:	e7a5      	b.n	800ab3e <_vfiprintf_r+0x11a>
 800abf2:	2300      	movs	r3, #0
 800abf4:	3401      	adds	r4, #1
 800abf6:	9305      	str	r3, [sp, #20]
 800abf8:	4619      	mov	r1, r3
 800abfa:	f04f 0c0a 	mov.w	ip, #10
 800abfe:	4620      	mov	r0, r4
 800ac00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac04:	3a30      	subs	r2, #48	; 0x30
 800ac06:	2a09      	cmp	r2, #9
 800ac08:	d903      	bls.n	800ac12 <_vfiprintf_r+0x1ee>
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0c5      	beq.n	800ab9a <_vfiprintf_r+0x176>
 800ac0e:	9105      	str	r1, [sp, #20]
 800ac10:	e7c3      	b.n	800ab9a <_vfiprintf_r+0x176>
 800ac12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac16:	4604      	mov	r4, r0
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e7f0      	b.n	800abfe <_vfiprintf_r+0x1da>
 800ac1c:	ab03      	add	r3, sp, #12
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	462a      	mov	r2, r5
 800ac22:	4b16      	ldr	r3, [pc, #88]	; (800ac7c <_vfiprintf_r+0x258>)
 800ac24:	a904      	add	r1, sp, #16
 800ac26:	4630      	mov	r0, r6
 800ac28:	f3af 8000 	nop.w
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	1c78      	adds	r0, r7, #1
 800ac30:	d1d6      	bne.n	800abe0 <_vfiprintf_r+0x1bc>
 800ac32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac34:	07d9      	lsls	r1, r3, #31
 800ac36:	d405      	bmi.n	800ac44 <_vfiprintf_r+0x220>
 800ac38:	89ab      	ldrh	r3, [r5, #12]
 800ac3a:	059a      	lsls	r2, r3, #22
 800ac3c:	d402      	bmi.n	800ac44 <_vfiprintf_r+0x220>
 800ac3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac40:	f7ff fc23 	bl	800a48a <__retarget_lock_release_recursive>
 800ac44:	89ab      	ldrh	r3, [r5, #12]
 800ac46:	065b      	lsls	r3, r3, #25
 800ac48:	f53f af12 	bmi.w	800aa70 <_vfiprintf_r+0x4c>
 800ac4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac4e:	e711      	b.n	800aa74 <_vfiprintf_r+0x50>
 800ac50:	ab03      	add	r3, sp, #12
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	462a      	mov	r2, r5
 800ac56:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <_vfiprintf_r+0x258>)
 800ac58:	a904      	add	r1, sp, #16
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f000 f880 	bl	800ad60 <_printf_i>
 800ac60:	e7e4      	b.n	800ac2c <_vfiprintf_r+0x208>
 800ac62:	bf00      	nop
 800ac64:	0800b43c 	.word	0x0800b43c
 800ac68:	0800b45c 	.word	0x0800b45c
 800ac6c:	0800b41c 	.word	0x0800b41c
 800ac70:	0800b47c 	.word	0x0800b47c
 800ac74:	0800b486 	.word	0x0800b486
 800ac78:	00000000 	.word	0x00000000
 800ac7c:	0800a9ff 	.word	0x0800a9ff
 800ac80:	0800b482 	.word	0x0800b482

0800ac84 <_printf_common>:
 800ac84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac88:	4616      	mov	r6, r2
 800ac8a:	4699      	mov	r9, r3
 800ac8c:	688a      	ldr	r2, [r1, #8]
 800ac8e:	690b      	ldr	r3, [r1, #16]
 800ac90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac94:	4293      	cmp	r3, r2
 800ac96:	bfb8      	it	lt
 800ac98:	4613      	movlt	r3, r2
 800ac9a:	6033      	str	r3, [r6, #0]
 800ac9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aca0:	4607      	mov	r7, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	b10a      	cbz	r2, 800acaa <_printf_common+0x26>
 800aca6:	3301      	adds	r3, #1
 800aca8:	6033      	str	r3, [r6, #0]
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	0699      	lsls	r1, r3, #26
 800acae:	bf42      	ittt	mi
 800acb0:	6833      	ldrmi	r3, [r6, #0]
 800acb2:	3302      	addmi	r3, #2
 800acb4:	6033      	strmi	r3, [r6, #0]
 800acb6:	6825      	ldr	r5, [r4, #0]
 800acb8:	f015 0506 	ands.w	r5, r5, #6
 800acbc:	d106      	bne.n	800accc <_printf_common+0x48>
 800acbe:	f104 0a19 	add.w	sl, r4, #25
 800acc2:	68e3      	ldr	r3, [r4, #12]
 800acc4:	6832      	ldr	r2, [r6, #0]
 800acc6:	1a9b      	subs	r3, r3, r2
 800acc8:	42ab      	cmp	r3, r5
 800acca:	dc26      	bgt.n	800ad1a <_printf_common+0x96>
 800accc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acd0:	1e13      	subs	r3, r2, #0
 800acd2:	6822      	ldr	r2, [r4, #0]
 800acd4:	bf18      	it	ne
 800acd6:	2301      	movne	r3, #1
 800acd8:	0692      	lsls	r2, r2, #26
 800acda:	d42b      	bmi.n	800ad34 <_printf_common+0xb0>
 800acdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ace0:	4649      	mov	r1, r9
 800ace2:	4638      	mov	r0, r7
 800ace4:	47c0      	blx	r8
 800ace6:	3001      	adds	r0, #1
 800ace8:	d01e      	beq.n	800ad28 <_printf_common+0xa4>
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	68e5      	ldr	r5, [r4, #12]
 800acee:	6832      	ldr	r2, [r6, #0]
 800acf0:	f003 0306 	and.w	r3, r3, #6
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	bf08      	it	eq
 800acf8:	1aad      	subeq	r5, r5, r2
 800acfa:	68a3      	ldr	r3, [r4, #8]
 800acfc:	6922      	ldr	r2, [r4, #16]
 800acfe:	bf0c      	ite	eq
 800ad00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad04:	2500      	movne	r5, #0
 800ad06:	4293      	cmp	r3, r2
 800ad08:	bfc4      	itt	gt
 800ad0a:	1a9b      	subgt	r3, r3, r2
 800ad0c:	18ed      	addgt	r5, r5, r3
 800ad0e:	2600      	movs	r6, #0
 800ad10:	341a      	adds	r4, #26
 800ad12:	42b5      	cmp	r5, r6
 800ad14:	d11a      	bne.n	800ad4c <_printf_common+0xc8>
 800ad16:	2000      	movs	r0, #0
 800ad18:	e008      	b.n	800ad2c <_printf_common+0xa8>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	4652      	mov	r2, sl
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4638      	mov	r0, r7
 800ad22:	47c0      	blx	r8
 800ad24:	3001      	adds	r0, #1
 800ad26:	d103      	bne.n	800ad30 <_printf_common+0xac>
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad30:	3501      	adds	r5, #1
 800ad32:	e7c6      	b.n	800acc2 <_printf_common+0x3e>
 800ad34:	18e1      	adds	r1, r4, r3
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	2030      	movs	r0, #48	; 0x30
 800ad3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad3e:	4422      	add	r2, r4
 800ad40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad48:	3302      	adds	r3, #2
 800ad4a:	e7c7      	b.n	800acdc <_printf_common+0x58>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	4622      	mov	r2, r4
 800ad50:	4649      	mov	r1, r9
 800ad52:	4638      	mov	r0, r7
 800ad54:	47c0      	blx	r8
 800ad56:	3001      	adds	r0, #1
 800ad58:	d0e6      	beq.n	800ad28 <_printf_common+0xa4>
 800ad5a:	3601      	adds	r6, #1
 800ad5c:	e7d9      	b.n	800ad12 <_printf_common+0x8e>
	...

0800ad60 <_printf_i>:
 800ad60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad64:	7e0f      	ldrb	r7, [r1, #24]
 800ad66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad68:	2f78      	cmp	r7, #120	; 0x78
 800ad6a:	4691      	mov	r9, r2
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	460c      	mov	r4, r1
 800ad70:	469a      	mov	sl, r3
 800ad72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad76:	d807      	bhi.n	800ad88 <_printf_i+0x28>
 800ad78:	2f62      	cmp	r7, #98	; 0x62
 800ad7a:	d80a      	bhi.n	800ad92 <_printf_i+0x32>
 800ad7c:	2f00      	cmp	r7, #0
 800ad7e:	f000 80d8 	beq.w	800af32 <_printf_i+0x1d2>
 800ad82:	2f58      	cmp	r7, #88	; 0x58
 800ad84:	f000 80a3 	beq.w	800aece <_printf_i+0x16e>
 800ad88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad90:	e03a      	b.n	800ae08 <_printf_i+0xa8>
 800ad92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad96:	2b15      	cmp	r3, #21
 800ad98:	d8f6      	bhi.n	800ad88 <_printf_i+0x28>
 800ad9a:	a101      	add	r1, pc, #4	; (adr r1, 800ada0 <_printf_i+0x40>)
 800ad9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ada0:	0800adf9 	.word	0x0800adf9
 800ada4:	0800ae0d 	.word	0x0800ae0d
 800ada8:	0800ad89 	.word	0x0800ad89
 800adac:	0800ad89 	.word	0x0800ad89
 800adb0:	0800ad89 	.word	0x0800ad89
 800adb4:	0800ad89 	.word	0x0800ad89
 800adb8:	0800ae0d 	.word	0x0800ae0d
 800adbc:	0800ad89 	.word	0x0800ad89
 800adc0:	0800ad89 	.word	0x0800ad89
 800adc4:	0800ad89 	.word	0x0800ad89
 800adc8:	0800ad89 	.word	0x0800ad89
 800adcc:	0800af19 	.word	0x0800af19
 800add0:	0800ae3d 	.word	0x0800ae3d
 800add4:	0800aefb 	.word	0x0800aefb
 800add8:	0800ad89 	.word	0x0800ad89
 800addc:	0800ad89 	.word	0x0800ad89
 800ade0:	0800af3b 	.word	0x0800af3b
 800ade4:	0800ad89 	.word	0x0800ad89
 800ade8:	0800ae3d 	.word	0x0800ae3d
 800adec:	0800ad89 	.word	0x0800ad89
 800adf0:	0800ad89 	.word	0x0800ad89
 800adf4:	0800af03 	.word	0x0800af03
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	1d1a      	adds	r2, r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	602a      	str	r2, [r5, #0]
 800ae00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e0a3      	b.n	800af54 <_printf_i+0x1f4>
 800ae0c:	6820      	ldr	r0, [r4, #0]
 800ae0e:	6829      	ldr	r1, [r5, #0]
 800ae10:	0606      	lsls	r6, r0, #24
 800ae12:	f101 0304 	add.w	r3, r1, #4
 800ae16:	d50a      	bpl.n	800ae2e <_printf_i+0xce>
 800ae18:	680e      	ldr	r6, [r1, #0]
 800ae1a:	602b      	str	r3, [r5, #0]
 800ae1c:	2e00      	cmp	r6, #0
 800ae1e:	da03      	bge.n	800ae28 <_printf_i+0xc8>
 800ae20:	232d      	movs	r3, #45	; 0x2d
 800ae22:	4276      	negs	r6, r6
 800ae24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae28:	485e      	ldr	r0, [pc, #376]	; (800afa4 <_printf_i+0x244>)
 800ae2a:	230a      	movs	r3, #10
 800ae2c:	e019      	b.n	800ae62 <_printf_i+0x102>
 800ae2e:	680e      	ldr	r6, [r1, #0]
 800ae30:	602b      	str	r3, [r5, #0]
 800ae32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae36:	bf18      	it	ne
 800ae38:	b236      	sxthne	r6, r6
 800ae3a:	e7ef      	b.n	800ae1c <_printf_i+0xbc>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	6820      	ldr	r0, [r4, #0]
 800ae40:	1d19      	adds	r1, r3, #4
 800ae42:	6029      	str	r1, [r5, #0]
 800ae44:	0601      	lsls	r1, r0, #24
 800ae46:	d501      	bpl.n	800ae4c <_printf_i+0xec>
 800ae48:	681e      	ldr	r6, [r3, #0]
 800ae4a:	e002      	b.n	800ae52 <_printf_i+0xf2>
 800ae4c:	0646      	lsls	r6, r0, #25
 800ae4e:	d5fb      	bpl.n	800ae48 <_printf_i+0xe8>
 800ae50:	881e      	ldrh	r6, [r3, #0]
 800ae52:	4854      	ldr	r0, [pc, #336]	; (800afa4 <_printf_i+0x244>)
 800ae54:	2f6f      	cmp	r7, #111	; 0x6f
 800ae56:	bf0c      	ite	eq
 800ae58:	2308      	moveq	r3, #8
 800ae5a:	230a      	movne	r3, #10
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae62:	6865      	ldr	r5, [r4, #4]
 800ae64:	60a5      	str	r5, [r4, #8]
 800ae66:	2d00      	cmp	r5, #0
 800ae68:	bfa2      	ittt	ge
 800ae6a:	6821      	ldrge	r1, [r4, #0]
 800ae6c:	f021 0104 	bicge.w	r1, r1, #4
 800ae70:	6021      	strge	r1, [r4, #0]
 800ae72:	b90e      	cbnz	r6, 800ae78 <_printf_i+0x118>
 800ae74:	2d00      	cmp	r5, #0
 800ae76:	d04d      	beq.n	800af14 <_printf_i+0x1b4>
 800ae78:	4615      	mov	r5, r2
 800ae7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae7e:	fb03 6711 	mls	r7, r3, r1, r6
 800ae82:	5dc7      	ldrb	r7, [r0, r7]
 800ae84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae88:	4637      	mov	r7, r6
 800ae8a:	42bb      	cmp	r3, r7
 800ae8c:	460e      	mov	r6, r1
 800ae8e:	d9f4      	bls.n	800ae7a <_printf_i+0x11a>
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d10b      	bne.n	800aeac <_printf_i+0x14c>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	07de      	lsls	r6, r3, #31
 800ae98:	d508      	bpl.n	800aeac <_printf_i+0x14c>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	6861      	ldr	r1, [r4, #4]
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	bfde      	ittt	le
 800aea2:	2330      	movle	r3, #48	; 0x30
 800aea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aea8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aeac:	1b52      	subs	r2, r2, r5
 800aeae:	6122      	str	r2, [r4, #16]
 800aeb0:	f8cd a000 	str.w	sl, [sp]
 800aeb4:	464b      	mov	r3, r9
 800aeb6:	aa03      	add	r2, sp, #12
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4640      	mov	r0, r8
 800aebc:	f7ff fee2 	bl	800ac84 <_printf_common>
 800aec0:	3001      	adds	r0, #1
 800aec2:	d14c      	bne.n	800af5e <_printf_i+0x1fe>
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	b004      	add	sp, #16
 800aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aece:	4835      	ldr	r0, [pc, #212]	; (800afa4 <_printf_i+0x244>)
 800aed0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aed4:	6829      	ldr	r1, [r5, #0]
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aedc:	6029      	str	r1, [r5, #0]
 800aede:	061d      	lsls	r5, r3, #24
 800aee0:	d514      	bpl.n	800af0c <_printf_i+0x1ac>
 800aee2:	07df      	lsls	r7, r3, #31
 800aee4:	bf44      	itt	mi
 800aee6:	f043 0320 	orrmi.w	r3, r3, #32
 800aeea:	6023      	strmi	r3, [r4, #0]
 800aeec:	b91e      	cbnz	r6, 800aef6 <_printf_i+0x196>
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	f023 0320 	bic.w	r3, r3, #32
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	2310      	movs	r3, #16
 800aef8:	e7b0      	b.n	800ae5c <_printf_i+0xfc>
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	f043 0320 	orr.w	r3, r3, #32
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	2378      	movs	r3, #120	; 0x78
 800af04:	4828      	ldr	r0, [pc, #160]	; (800afa8 <_printf_i+0x248>)
 800af06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af0a:	e7e3      	b.n	800aed4 <_printf_i+0x174>
 800af0c:	0659      	lsls	r1, r3, #25
 800af0e:	bf48      	it	mi
 800af10:	b2b6      	uxthmi	r6, r6
 800af12:	e7e6      	b.n	800aee2 <_printf_i+0x182>
 800af14:	4615      	mov	r5, r2
 800af16:	e7bb      	b.n	800ae90 <_printf_i+0x130>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	6826      	ldr	r6, [r4, #0]
 800af1c:	6961      	ldr	r1, [r4, #20]
 800af1e:	1d18      	adds	r0, r3, #4
 800af20:	6028      	str	r0, [r5, #0]
 800af22:	0635      	lsls	r5, r6, #24
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	d501      	bpl.n	800af2c <_printf_i+0x1cc>
 800af28:	6019      	str	r1, [r3, #0]
 800af2a:	e002      	b.n	800af32 <_printf_i+0x1d2>
 800af2c:	0670      	lsls	r0, r6, #25
 800af2e:	d5fb      	bpl.n	800af28 <_printf_i+0x1c8>
 800af30:	8019      	strh	r1, [r3, #0]
 800af32:	2300      	movs	r3, #0
 800af34:	6123      	str	r3, [r4, #16]
 800af36:	4615      	mov	r5, r2
 800af38:	e7ba      	b.n	800aeb0 <_printf_i+0x150>
 800af3a:	682b      	ldr	r3, [r5, #0]
 800af3c:	1d1a      	adds	r2, r3, #4
 800af3e:	602a      	str	r2, [r5, #0]
 800af40:	681d      	ldr	r5, [r3, #0]
 800af42:	6862      	ldr	r2, [r4, #4]
 800af44:	2100      	movs	r1, #0
 800af46:	4628      	mov	r0, r5
 800af48:	f7f5 f952 	bl	80001f0 <memchr>
 800af4c:	b108      	cbz	r0, 800af52 <_printf_i+0x1f2>
 800af4e:	1b40      	subs	r0, r0, r5
 800af50:	6060      	str	r0, [r4, #4]
 800af52:	6863      	ldr	r3, [r4, #4]
 800af54:	6123      	str	r3, [r4, #16]
 800af56:	2300      	movs	r3, #0
 800af58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af5c:	e7a8      	b.n	800aeb0 <_printf_i+0x150>
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	462a      	mov	r2, r5
 800af62:	4649      	mov	r1, r9
 800af64:	4640      	mov	r0, r8
 800af66:	47d0      	blx	sl
 800af68:	3001      	adds	r0, #1
 800af6a:	d0ab      	beq.n	800aec4 <_printf_i+0x164>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	079b      	lsls	r3, r3, #30
 800af70:	d413      	bmi.n	800af9a <_printf_i+0x23a>
 800af72:	68e0      	ldr	r0, [r4, #12]
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	4298      	cmp	r0, r3
 800af78:	bfb8      	it	lt
 800af7a:	4618      	movlt	r0, r3
 800af7c:	e7a4      	b.n	800aec8 <_printf_i+0x168>
 800af7e:	2301      	movs	r3, #1
 800af80:	4632      	mov	r2, r6
 800af82:	4649      	mov	r1, r9
 800af84:	4640      	mov	r0, r8
 800af86:	47d0      	blx	sl
 800af88:	3001      	adds	r0, #1
 800af8a:	d09b      	beq.n	800aec4 <_printf_i+0x164>
 800af8c:	3501      	adds	r5, #1
 800af8e:	68e3      	ldr	r3, [r4, #12]
 800af90:	9903      	ldr	r1, [sp, #12]
 800af92:	1a5b      	subs	r3, r3, r1
 800af94:	42ab      	cmp	r3, r5
 800af96:	dcf2      	bgt.n	800af7e <_printf_i+0x21e>
 800af98:	e7eb      	b.n	800af72 <_printf_i+0x212>
 800af9a:	2500      	movs	r5, #0
 800af9c:	f104 0619 	add.w	r6, r4, #25
 800afa0:	e7f5      	b.n	800af8e <_printf_i+0x22e>
 800afa2:	bf00      	nop
 800afa4:	0800b48d 	.word	0x0800b48d
 800afa8:	0800b49e 	.word	0x0800b49e

0800afac <_sbrk_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d06      	ldr	r5, [pc, #24]	; (800afc8 <_sbrk_r+0x1c>)
 800afb0:	2300      	movs	r3, #0
 800afb2:	4604      	mov	r4, r0
 800afb4:	4608      	mov	r0, r1
 800afb6:	602b      	str	r3, [r5, #0]
 800afb8:	f7f8 fee4 	bl	8003d84 <_sbrk>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d102      	bne.n	800afc6 <_sbrk_r+0x1a>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	b103      	cbz	r3, 800afc6 <_sbrk_r+0x1a>
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	bd38      	pop	{r3, r4, r5, pc}
 800afc8:	20000c98 	.word	0x20000c98

0800afcc <__sread>:
 800afcc:	b510      	push	{r4, lr}
 800afce:	460c      	mov	r4, r1
 800afd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd4:	f000 f8f8 	bl	800b1c8 <_read_r>
 800afd8:	2800      	cmp	r0, #0
 800afda:	bfab      	itete	ge
 800afdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afde:	89a3      	ldrhlt	r3, [r4, #12]
 800afe0:	181b      	addge	r3, r3, r0
 800afe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afe6:	bfac      	ite	ge
 800afe8:	6563      	strge	r3, [r4, #84]	; 0x54
 800afea:	81a3      	strhlt	r3, [r4, #12]
 800afec:	bd10      	pop	{r4, pc}

0800afee <__swrite>:
 800afee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff2:	461f      	mov	r7, r3
 800aff4:	898b      	ldrh	r3, [r1, #12]
 800aff6:	05db      	lsls	r3, r3, #23
 800aff8:	4605      	mov	r5, r0
 800affa:	460c      	mov	r4, r1
 800affc:	4616      	mov	r6, r2
 800affe:	d505      	bpl.n	800b00c <__swrite+0x1e>
 800b000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b004:	2302      	movs	r3, #2
 800b006:	2200      	movs	r2, #0
 800b008:	f000 f868 	bl	800b0dc <_lseek_r>
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b016:	81a3      	strh	r3, [r4, #12]
 800b018:	4632      	mov	r2, r6
 800b01a:	463b      	mov	r3, r7
 800b01c:	4628      	mov	r0, r5
 800b01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b022:	f000 b817 	b.w	800b054 <_write_r>

0800b026 <__sseek>:
 800b026:	b510      	push	{r4, lr}
 800b028:	460c      	mov	r4, r1
 800b02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b02e:	f000 f855 	bl	800b0dc <_lseek_r>
 800b032:	1c43      	adds	r3, r0, #1
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	bf15      	itete	ne
 800b038:	6560      	strne	r0, [r4, #84]	; 0x54
 800b03a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b03e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b042:	81a3      	strheq	r3, [r4, #12]
 800b044:	bf18      	it	ne
 800b046:	81a3      	strhne	r3, [r4, #12]
 800b048:	bd10      	pop	{r4, pc}

0800b04a <__sclose>:
 800b04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b04e:	f000 b813 	b.w	800b078 <_close_r>
	...

0800b054 <_write_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d07      	ldr	r5, [pc, #28]	; (800b074 <_write_r+0x20>)
 800b058:	4604      	mov	r4, r0
 800b05a:	4608      	mov	r0, r1
 800b05c:	4611      	mov	r1, r2
 800b05e:	2200      	movs	r2, #0
 800b060:	602a      	str	r2, [r5, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	f7f8 fe3d 	bl	8003ce2 <_write>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_write_r+0x1e>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_write_r+0x1e>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	20000c98 	.word	0x20000c98

0800b078 <_close_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4d06      	ldr	r5, [pc, #24]	; (800b094 <_close_r+0x1c>)
 800b07c:	2300      	movs	r3, #0
 800b07e:	4604      	mov	r4, r0
 800b080:	4608      	mov	r0, r1
 800b082:	602b      	str	r3, [r5, #0]
 800b084:	f7f8 fe49 	bl	8003d1a <_close>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d102      	bne.n	800b092 <_close_r+0x1a>
 800b08c:	682b      	ldr	r3, [r5, #0]
 800b08e:	b103      	cbz	r3, 800b092 <_close_r+0x1a>
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	20000c98 	.word	0x20000c98

0800b098 <_fstat_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d07      	ldr	r5, [pc, #28]	; (800b0b8 <_fstat_r+0x20>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	f7f8 fe44 	bl	8003d32 <_fstat>
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	d102      	bne.n	800b0b4 <_fstat_r+0x1c>
 800b0ae:	682b      	ldr	r3, [r5, #0]
 800b0b0:	b103      	cbz	r3, 800b0b4 <_fstat_r+0x1c>
 800b0b2:	6023      	str	r3, [r4, #0]
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20000c98 	.word	0x20000c98

0800b0bc <_isatty_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d06      	ldr	r5, [pc, #24]	; (800b0d8 <_isatty_r+0x1c>)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	602b      	str	r3, [r5, #0]
 800b0c8:	f7f8 fe43 	bl	8003d52 <_isatty>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_isatty_r+0x1a>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_isatty_r+0x1a>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	20000c98 	.word	0x20000c98

0800b0dc <_lseek_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	; (800b0fc <_lseek_r+0x20>)
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	4608      	mov	r0, r1
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	602a      	str	r2, [r5, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f7f8 fe3c 	bl	8003d68 <_lseek>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d102      	bne.n	800b0fa <_lseek_r+0x1e>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b103      	cbz	r3, 800b0fa <_lseek_r+0x1e>
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	20000c98 	.word	0x20000c98

0800b100 <memcpy>:
 800b100:	440a      	add	r2, r1
 800b102:	4291      	cmp	r1, r2
 800b104:	f100 33ff 	add.w	r3, r0, #4294967295
 800b108:	d100      	bne.n	800b10c <memcpy+0xc>
 800b10a:	4770      	bx	lr
 800b10c:	b510      	push	{r4, lr}
 800b10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b116:	4291      	cmp	r1, r2
 800b118:	d1f9      	bne.n	800b10e <memcpy+0xe>
 800b11a:	bd10      	pop	{r4, pc}

0800b11c <memmove>:
 800b11c:	4288      	cmp	r0, r1
 800b11e:	b510      	push	{r4, lr}
 800b120:	eb01 0402 	add.w	r4, r1, r2
 800b124:	d902      	bls.n	800b12c <memmove+0x10>
 800b126:	4284      	cmp	r4, r0
 800b128:	4623      	mov	r3, r4
 800b12a:	d807      	bhi.n	800b13c <memmove+0x20>
 800b12c:	1e43      	subs	r3, r0, #1
 800b12e:	42a1      	cmp	r1, r4
 800b130:	d008      	beq.n	800b144 <memmove+0x28>
 800b132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b13a:	e7f8      	b.n	800b12e <memmove+0x12>
 800b13c:	4402      	add	r2, r0
 800b13e:	4601      	mov	r1, r0
 800b140:	428a      	cmp	r2, r1
 800b142:	d100      	bne.n	800b146 <memmove+0x2a>
 800b144:	bd10      	pop	{r4, pc}
 800b146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b14e:	e7f7      	b.n	800b140 <memmove+0x24>

0800b150 <__malloc_lock>:
 800b150:	4801      	ldr	r0, [pc, #4]	; (800b158 <__malloc_lock+0x8>)
 800b152:	f7ff b999 	b.w	800a488 <__retarget_lock_acquire_recursive>
 800b156:	bf00      	nop
 800b158:	20000c8c 	.word	0x20000c8c

0800b15c <__malloc_unlock>:
 800b15c:	4801      	ldr	r0, [pc, #4]	; (800b164 <__malloc_unlock+0x8>)
 800b15e:	f7ff b994 	b.w	800a48a <__retarget_lock_release_recursive>
 800b162:	bf00      	nop
 800b164:	20000c8c 	.word	0x20000c8c

0800b168 <_realloc_r>:
 800b168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16c:	4680      	mov	r8, r0
 800b16e:	4614      	mov	r4, r2
 800b170:	460e      	mov	r6, r1
 800b172:	b921      	cbnz	r1, 800b17e <_realloc_r+0x16>
 800b174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b178:	4611      	mov	r1, r2
 800b17a:	f7ff ba59 	b.w	800a630 <_malloc_r>
 800b17e:	b92a      	cbnz	r2, 800b18c <_realloc_r+0x24>
 800b180:	f7ff f9ea 	bl	800a558 <_free_r>
 800b184:	4625      	mov	r5, r4
 800b186:	4628      	mov	r0, r5
 800b188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b18c:	f000 f82e 	bl	800b1ec <_malloc_usable_size_r>
 800b190:	4284      	cmp	r4, r0
 800b192:	4607      	mov	r7, r0
 800b194:	d802      	bhi.n	800b19c <_realloc_r+0x34>
 800b196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b19a:	d812      	bhi.n	800b1c2 <_realloc_r+0x5a>
 800b19c:	4621      	mov	r1, r4
 800b19e:	4640      	mov	r0, r8
 800b1a0:	f7ff fa46 	bl	800a630 <_malloc_r>
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d0ed      	beq.n	800b186 <_realloc_r+0x1e>
 800b1aa:	42bc      	cmp	r4, r7
 800b1ac:	4622      	mov	r2, r4
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	bf28      	it	cs
 800b1b2:	463a      	movcs	r2, r7
 800b1b4:	f7ff ffa4 	bl	800b100 <memcpy>
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	f7ff f9cc 	bl	800a558 <_free_r>
 800b1c0:	e7e1      	b.n	800b186 <_realloc_r+0x1e>
 800b1c2:	4635      	mov	r5, r6
 800b1c4:	e7df      	b.n	800b186 <_realloc_r+0x1e>
	...

0800b1c8 <_read_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	; (800b1e8 <_read_r+0x20>)
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	602a      	str	r2, [r5, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f7f8 fd66 	bl	8003ca8 <_read>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_read_r+0x1e>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_read_r+0x1e>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	20000c98 	.word	0x20000c98

0800b1ec <_malloc_usable_size_r>:
 800b1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f0:	1f18      	subs	r0, r3, #4
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bfbc      	itt	lt
 800b1f6:	580b      	ldrlt	r3, [r1, r0]
 800b1f8:	18c0      	addlt	r0, r0, r3
 800b1fa:	4770      	bx	lr

0800b1fc <_init>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	bf00      	nop
 800b200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b202:	bc08      	pop	{r3}
 800b204:	469e      	mov	lr, r3
 800b206:	4770      	bx	lr

0800b208 <_fini>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	bf00      	nop
 800b20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20e:	bc08      	pop	{r3}
 800b210:	469e      	mov	lr, r3
 800b212:	4770      	bx	lr
